"use strict";(self.webpackChunkelder_books_fe=self.webpackChunkelder_books_fe||[]).push([[395],{1721:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xC: () => (/* binding */ configureStore)\n/* harmony export */ });\n/* unused harmony exports EnhancerArray, MiddlewareArray, SHOULD_AUTOBATCH, TaskAbortError, addListener, autoBatchEnhancer, clearAllListeners, createAction, createAsyncThunk, createDraftSafeSelector, createEntityAdapter, createImmutableStateInvariantMiddleware, createListenerMiddleware, createReducer, createSerializableStateInvariantMiddleware, createSlice, findNonSerializableValue, getDefaultMiddleware, getType, isAction, isAllOf, isAnyOf, isAsyncThunkAction, isFluxStandardAction, isFulfilled, isImmutableDefault, isPending, isPlain, isPlainObject, isRejected, isRejectedWithValue, miniSerializeError, nanoid, prepareAutoBatched, removeListener, unwrapResult */\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2902);\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2505);\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3916);\n/* provided dependency */ var console = __webpack_require__(1283);\n/* provided dependency */ var process = __webpack_require__(2790);\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    "throw": verb(1),\n    "return": verb(2)\n  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError("Generator is already executing.");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = undefined && undefined.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function (obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function (a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\n    var prop = _c[_i];\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = function (a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __async = function (__this, __arguments, generator) {\n  return new Promise(function (resolve, reject) {\n    var fulfilled = function (value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = function (value) {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = function (x) {\n      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    };\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n// src/index.ts\n\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelector = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var selector = createSelector.apply(void 0, args);\n  var wrappedSelector = function (value) {\n    var rest = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n    return selector.apply(void 0, __spreadArray([isDraft(value) ? current(value) : value], rest));\n  };\n  return wrappedSelector;\n};\n// src/configureStore.ts\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\n  if (arguments.length === 0) return void 0;\n  if (typeof arguments[0] === "object") return redux__WEBPACK_IMPORTED_MODULE_0__/* .compose */ .qC;\n  return redux__WEBPACK_IMPORTED_MODULE_0__/* .compose */ .qC.apply(null, arguments);\n};\nvar devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {\n  return function (noop2) {\n    return noop2;\n  };\n};\n// src/isPlainObject.ts\nfunction isPlainObject(value) {\n  if (typeof value !== "object" || value === null) return false;\n  var proto = Object.getPrototypeOf(value);\n  if (proto === null) return true;\n  var baseProto = proto;\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n  return proto === baseProto;\n}\n// src/getDefaultMiddleware.ts\n\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function (fn) {\n      var started = Date.now();\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function () {\n      if (elapsed > maxDelay) {\n        console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don\'t need to worry about that.");\n      }\n    }\n  };\n}\nvar MiddlewareArray = /** @class */function (_super) {\n  __extends(MiddlewareArray, _super);\n  function MiddlewareArray() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var _this = _super.apply(this, args) || this;\n    Object.setPrototypeOf(_this, MiddlewareArray.prototype);\n    return _this;\n  }\n  Object.defineProperty(MiddlewareArray, Symbol.species, {\n    get: function () {\n      return MiddlewareArray;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MiddlewareArray.prototype.concat = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    return _super.prototype.concat.apply(this, arr);\n  };\n  MiddlewareArray.prototype.prepend = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();\n    }\n    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();\n  };\n  return MiddlewareArray;\n}(Array);\nvar EnhancerArray = /** @class */function (_super) {\n  __extends(EnhancerArray, _super);\n  function EnhancerArray() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var _this = _super.apply(this, args) || this;\n    Object.setPrototypeOf(_this, EnhancerArray.prototype);\n    return _this;\n  }\n  Object.defineProperty(EnhancerArray, Symbol.species, {\n    get: function () {\n      return EnhancerArray;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EnhancerArray.prototype.concat = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    return _super.prototype.concat.apply(this, arr);\n  };\n  EnhancerArray.prototype.prepend = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr[0].concat(this))))();\n    }\n    return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr.concat(this))))();\n  };\n  return EnhancerArray;\n}(Array);\nfunction freezeDraftable(val) {\n  return isDraftable(val) ? createNextState(val, function () {}) : val;\n}\n// src/immutableStateInvariantMiddleware.ts\nvar isProduction = (/* unused pure expression or super */ null && ("production" === "production"));\nvar prefix = "Invariant failed";\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (isProduction) {\n    throw new Error(prefix);\n  }\n  throw new Error(prefix + ": " + (message || ""));\n}\nfunction stringify(obj, serializer, indent, decycler) {\n  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n}\nfunction getSerialize(serializer, decycler) {\n  var stack = [],\n    keys = [];\n  if (!decycler) decycler = function (_, value) {\n    if (stack[0] === value) return "[Circular ~]";\n    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";\n  };\n  return function (key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n    } else stack.push(value);\n    return serializer == null ? value : serializer.call(this, key, value);\n  };\n}\nfunction isImmutableDefault(value) {\n  return typeof value !== "object" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function () {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable, ignorePaths, obj, path) {\n  if (ignorePaths === void 0) {\n    ignorePaths = [];\n  }\n  if (path === void 0) {\n    path = "";\n  }\n  var tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj)) {\n    tracked.children = {};\n    for (var key in obj) {\n      var childPath = path ? path + "." + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path) {\n  if (ignoredPaths === void 0) {\n    ignoredPaths = [];\n  }\n  if (sameParentRef === void 0) {\n    sameParentRef = false;\n  }\n  if (path === void 0) {\n    path = "";\n  }\n  var prevObj = trackedProperty ? trackedProperty.value : void 0;\n  var sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  var keysToDetect = {};\n  for (var key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (var key in obj) {\n    keysToDetect[key] = true;\n  }\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop_1 = function (key) {\n    var nestedPath = path ? path + "." + key : key;\n    if (hasIgnoredPaths) {\n      var hasMatches = ignoredPaths.some(function (ignored) {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        return "continue";\n      }\n    }\n    var result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n    if (result.wasMutated) {\n      return {\n        value: result\n      };\n    }\n  };\n  for (var key in keysToDetect) {\n    var state_1 = _loop_1(key);\n    if (typeof state_1 === "object") return state_1.value;\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (true) {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n  var _c = options.isImmutable,\n    isImmutable = _c === void 0 ? isImmutableDefault : _c,\n    ignoredPaths = options.ignoredPaths,\n    _d = options.warnAfter,\n    warnAfter = _d === void 0 ? 32 : _d,\n    ignore = options.ignore;\n  ignoredPaths = ignoredPaths || ignore;\n  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n  return function (_c) {\n    var getState = _c.getState;\n    var state = getState();\n    var tracker = track(state);\n    var result;\n    return function (next) {\n      return function (action) {\n        var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path \'" + (result.path || "") + "\'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");\n        });\n        var dispatchedAction = next(action);\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  };\n}\n// src/serializableStateInvariantMiddleware.ts\nfunction isPlain(val) {\n  var type = typeof val;\n  return val == null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject(val);\n}\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths, cache) {\n  if (path === void 0) {\n    path = "";\n  }\n  if (isSerializable === void 0) {\n    isSerializable = isPlain;\n  }\n  if (ignoredPaths === void 0) {\n    ignoredPaths = [];\n  }\n  var foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || "<root>",\n      value: value\n    };\n  }\n  if (typeof value !== "object" || value === null) {\n    return false;\n  }\n  if (cache == null ? void 0 : cache.has(value)) return false;\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop_2 = function (key, nestedValue) {\n    var nestedPath = path ? path + "." + key : key;\n    if (hasIgnoredPaths) {\n      var hasMatches = ignoredPaths.some(function (ignored) {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        return "continue";\n      }\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        value: {\n          keyPath: nestedPath,\n          value: nestedValue\n        }\n      };\n    }\n    if (typeof nestedValue === "object") {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n      if (foundNestedSerializable) {\n        return {\n          value: foundNestedSerializable\n        };\n      }\n    }\n  };\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _c = entries_1[_i],\n      key = _c[0],\n      nestedValue = _c[1];\n    var state_2 = _loop_2(key, nestedValue);\n    if (typeof state_2 === "object") return state_2.value;\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (var _i = 0, _c = Object.values(value); _i < _c.length; _i++) {\n    var nestedValue = _c[_i];\n    if (typeof nestedValue !== "object" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (true) {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n  var _c = options.isSerializable,\n    isSerializable = _c === void 0 ? isPlain : _c,\n    getEntries = options.getEntries,\n    _d = options.ignoredActions,\n    ignoredActions = _d === void 0 ? [] : _d,\n    _e = options.ignoredActionPaths,\n    ignoredActionPaths = _e === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e,\n    _f = options.ignoredPaths,\n    ignoredPaths = _f === void 0 ? [] : _f,\n    _g = options.warnAfter,\n    warnAfter = _g === void 0 ? 32 : _g,\n    _h = options.ignoreState,\n    ignoreState = _h === void 0 ? false : _h,\n    _j = options.ignoreActions,\n    ignoreActions = _j === void 0 ? false : _j,\n    _k = options.disableCache,\n    disableCache = _k === void 0 ? false : _k;\n  var cache = !disableCache && WeakSet ? new WeakSet() : void 0;\n  return function (storeAPI) {\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n        var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");\n        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n          measureUtils.measureTime(function () {\n            var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths, cache);\n            if (foundActionNonSerializableValue) {\n              var keyPath = foundActionNonSerializableValue.keyPath,\n                value = foundActionNonSerializableValue.value;\n              console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\\nTake a look at the logic that dispatched this action: ", action, "\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");\n            }\n          });\n        }\n        if (!ignoreState) {\n          measureUtils.measureTime(function () {\n            var state = storeAPI.getState();\n            var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths, cache);\n            if (foundStateNonSerializableValue) {\n              var keyPath = foundStateNonSerializableValue.keyPath,\n                value = foundStateNonSerializableValue.value;\n              console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\\nTake a look at the reducer(s) handling this action type: " + action.type + ".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");\n            }\n          });\n          measureUtils.warnIfExceeded();\n        }\n        return result;\n      };\n    };\n  };\n}\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === "boolean";\n}\nfunction curryGetDefaultMiddleware() {\n  return function curriedGetDefaultMiddleware(options) {\n    return getDefaultMiddleware(options);\n  };\n}\nfunction getDefaultMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = options.thunk,\n    thunk = _c === void 0 ? true : _c,\n    _d = options.immutableCheck,\n    immutableCheck = _d === void 0 ? true : _d,\n    _e = options.serializableCheck,\n    serializableCheck = _e === void 0 ? true : _e;\n  var middlewareArray = new MiddlewareArray();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z);\n    } else {\n      middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z.withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (false) { var serializableOptions, immutableOptions; }\n  return middlewareArray;\n}\n// src/configureStore.ts\nvar IS_PRODUCTION = "production" === "production";\nfunction configureStore(options) {\n  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();\n  var _c = options || {},\n    _d = _c.reducer,\n    reducer = _d === void 0 ? void 0 : _d,\n    _e = _c.middleware,\n    middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e,\n    _f = _c.devTools,\n    devTools = _f === void 0 ? true : _f,\n    _g = _c.preloadedState,\n    preloadedState = _g === void 0 ? void 0 : _g,\n    _h = _c.enhancers,\n    enhancers = _h === void 0 ? void 0 : _h;\n  var rootReducer;\n  if (typeof reducer === "function") {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__/* .combineReducers */ .UY)(reducer);\n  } else {\n    throw new Error(\'"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers\');\n  }\n  var finalMiddleware = middleware;\n  if (typeof finalMiddleware === "function") {\n    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);\n    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n      throw new Error("when using a middleware builder function, an array of middleware must be returned");\n    }\n  }\n  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {\n    return typeof item !== "function";\n  })) {\n    throw new Error("each middleware provided to configureStore must be a function");\n  }\n  var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__/* .applyMiddleware */ .md.apply(void 0, finalMiddleware);\n  var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__/* .compose */ .qC;\n  if (devTools) {\n    finalCompose = composeWithDevTools(__spreadValues({\n      trace: !IS_PRODUCTION\n    }, typeof devTools === "object" && devTools));\n  }\n  var defaultEnhancers = new EnhancerArray(middlewareEnhancer);\n  var storeEnhancers = defaultEnhancers;\n  if (Array.isArray(enhancers)) {\n    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);\n  } else if (typeof enhancers === "function") {\n    storeEnhancers = enhancers(defaultEnhancers);\n  }\n  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__/* .createStore */ .MT)(rootReducer, preloadedState, composedEnhancer);\n}\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, args);\n      if (!prepared) {\n        throw new Error("prepareAction did not return an object");\n      }\n      return __spreadValues(__spreadValues({\n        type: type,\n        payload: prepared.payload\n      }, "meta" in prepared && {\n        meta: prepared.meta\n      }), "error" in prepared && {\n        error: prepared.error\n      });\n    }\n    return {\n      type: type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = function () {\n    return "" + type;\n  };\n  actionCreator.type = type;\n  actionCreator.match = function (action) {\n    return action.type === type;\n  };\n  return actionCreator;\n}\nfunction isAction(action) {\n  return isPlainObject(action) && "type" in action;\n}\nfunction isFSA(action) {\n  return isAction(action) && typeof action.type === "string" && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return ["type", "payload", "error", "meta"].indexOf(key) > -1;\n}\nfunction getType(actionCreator) {\n  return "" + actionCreator;\n}\n// src/createReducer.ts\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var actionMatchers = [];\n  var defaultCaseReducer;\n  var builder = {\n    addCase: function (typeOrActionCreator, reducer) {\n      if (false) {}\n      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (type in actionsMap) {\n        throw new Error("addCase cannot be called with two reducers for the same action type");\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher: function (matcher, reducer) {\n      if (false) {}\n      actionMatchers.push({\n        matcher: matcher,\n        reducer: reducer\n      });\n      return builder;\n    },\n    addDefaultCase: function (reducer) {\n      if (false) {}\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === "function";\n}\nvar hasWarnedAboutObjectNotation = false;\nfunction createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {\n  if (actionMatchers === void 0) {\n    actionMatchers = [];\n  }\n  if (false) {}\n  var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],\n    actionsMap = _c[0],\n    finalActionMatchers = _c[1],\n    finalDefaultCaseReducer = _c[2];\n  var getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = function () {\n      return freezeDraftable(initialState());\n    };\n  } else {\n    var frozenInitialState_1 = freezeDraftable(initialState);\n    getInitialState = function () {\n      return frozenInitialState_1;\n    };\n  }\n  function reducer(state, action) {\n    if (state === void 0) {\n      state = getInitialState();\n    }\n    var caseReducers = __spreadArray([actionsMap[action.type]], finalActionMatchers.filter(function (_c) {\n      var matcher = _c.matcher;\n      return matcher(action);\n    }).map(function (_c) {\n      var reducer2 = _c.reducer;\n      return reducer2;\n    }));\n    if (caseReducers.filter(function (cr) {\n      return !!cr;\n    }).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce(function (previousState, caseReducer) {\n      if (caseReducer) {\n        if (isDraft2(previousState)) {\n          var draft = previousState;\n          var result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!isDraftable2(previousState)) {\n          var result = caseReducer(previousState, action);\n          if (result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error("A case reducer on a non-draftable value must not return undefined");\n          }\n          return result;\n        } else {\n          return createNextState2(previousState, function (draft) {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n// src/createSlice.ts\nvar hasWarnedAboutObjectNotation2 = false;\nfunction getType2(slice, actionKey) {\n  return slice + "/" + actionKey;\n}\nfunction createSlice(options) {\n  var name = options.name;\n  if (!name) {\n    throw new Error("`name` is a required option for createSlice");\n  }\n  if (typeof process !== "undefined" && "production" === "development") {}\n  var initialState = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);\n  var reducers = options.reducers || {};\n  var reducerNames = Object.keys(reducers);\n  var sliceCaseReducersByName = {};\n  var sliceCaseReducersByType = {};\n  var actionCreators = {};\n  reducerNames.forEach(function (reducerName) {\n    var maybeReducerWithPrepare = reducers[reducerName];\n    var type = getType2(name, reducerName);\n    var caseReducer;\n    var prepareCallback;\n    if ("reducer" in maybeReducerWithPrepare) {\n      caseReducer = maybeReducerWithPrepare.reducer;\n      prepareCallback = maybeReducerWithPrepare.prepare;\n    } else {\n      caseReducer = maybeReducerWithPrepare;\n    }\n    sliceCaseReducersByName[reducerName] = caseReducer;\n    sliceCaseReducersByType[type] = caseReducer;\n    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\n  });\n  function buildReducer() {\n    if (false) {}\n    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],\n      _d = _c[0],\n      extraReducers = _d === void 0 ? {} : _d,\n      _e = _c[1],\n      actionMatchers = _e === void 0 ? [] : _e,\n      _f = _c[2],\n      defaultCaseReducer = _f === void 0 ? void 0 : _f;\n    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);\n    return createReducer(initialState, function (builder) {\n      for (var key in finalCaseReducers) {\n        builder.addCase(key, finalCaseReducers[key]);\n      }\n      for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {\n        var m = actionMatchers_1[_i];\n        builder.addMatcher(m.matcher, m.reducer);\n      }\n      if (defaultCaseReducer) {\n        builder.addDefaultCase(defaultCaseReducer);\n      }\n    });\n  }\n  var _reducer;\n  return {\n    name: name,\n    reducer: function (state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    },\n    actions: actionCreators,\n    caseReducers: sliceCaseReducersByName,\n    getInitialState: function () {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n  };\n}\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory() {\n  function getInitialState(additionalState) {\n    if (additionalState === void 0) {\n      additionalState = {};\n    }\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n  return {\n    getInitialState: getInitialState\n  };\n}\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var selectIds = function (state) {\n      return state.ids;\n    };\n    var selectEntities = function (state) {\n      return state.entities;\n    };\n    var selectAll = createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n    var selectId = function (_, id) {\n      return id;\n    };\n    var selectById = function (entities, id) {\n      return entities[id];\n    };\n    var selectTotal = createDraftSafeSelector(selectIds, function (ids) {\n      return ids.length;\n    });\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createDraftSafeSelector(selectEntities, selectId, selectById)\n      };\n    }\n    var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);\n    return {\n      selectIds: createDraftSafeSelector(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createDraftSafeSelector(selectState, selectAll),\n      selectTotal: createDraftSafeSelector(selectState, selectTotal),\n      selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors: getSelectors\n  };\n}\n// src/entities/state_adapter.ts\n\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    var runMutator = function (draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraft3(state)) {\n      runMutator(state);\n      return state;\n    } else {\n      return createNextState3(state, runMutator);\n    }\n  };\n}\n// src/entities/utils.ts\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n  if (false) {}\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  var added = [];\n  var updated = [];\n  for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {\n    var entity = newEntities_1[_i];\n    var id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      updated.push({\n        id: id,\n        changes: entity\n      });\n    } else {\n      added.push(entity);\n    }\n  }\n  return [added, updated];\n}\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {\n      var entity = newEntities_2[_i];\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {\n      var entity = newEntities_3[_i];\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    var original2 = state.entities[update.id];\n    var updated = Object.assign({}, original2, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      if (update.id in state.entities) {\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.keys(state.entities);\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),\n      added = _c[0],\n      updated = _c[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n// src/entities/sorted_state_adapter.ts\nfunction createSortedStateAdapter(selectId, sort) {\n  var _c = createUnsortedStateAdapter(selectId),\n    removeOne = _c.removeOne,\n    removeMany = _c.removeMany,\n    removeAll = _c.removeAll;\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var models = newEntities.filter(function (model) {\n      return !(selectIdValue(model, selectId) in state.entities);\n    });\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      merge(newEntities, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var appliedUpdates = false;\n    for (var _i = 0, updates_1 = updates; _i < updates_1.length; _i++) {\n      var update = updates_1[_i];\n      var entity = state.entities[update.id];\n      if (!entity) {\n        continue;\n      }\n      appliedUpdates = true;\n      Object.assign(entity, update.changes);\n      var newId = selectId(entity);\n      if (update.id !== newId) {\n        delete state.entities[update.id];\n        state.entities[newId] = entity;\n      }\n    }\n    if (appliedUpdates) {\n      resortEntities(state);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),\n      added = _c[0],\n      updated = _c[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length && i < b.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  function merge(models, state) {\n    models.forEach(function (model) {\n      state.entities[selectId(model)] = model;\n    });\n    resortEntities(state);\n  }\n  function resortEntities(state) {\n    var allEntities = Object.values(state.entities);\n    allEntities.sort(sort);\n    var newSortedIds = allEntities.map(selectId);\n    var ids = state.ids;\n    if (!areArraysEqual(ids, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  }\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = __spreadValues({\n      sortComparer: false,\n      selectId: function (instance) {\n        return instance.id;\n      }\n    }, options),\n    selectId = _c.selectId,\n    sortComparer = _c.sortComparer;\n  var stateFactory = createInitialStateFactory();\n  var selectorsFactory = createSelectorsFactory();\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  return __spreadValues(__spreadValues(__spreadValues({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory), selectorsFactory), stateAdapter);\n}\n// src/nanoid.ts\nvar urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";\nvar nanoid = function (size) {\n  if (size === void 0) {\n    size = 21;\n  }\n  var id = "";\n  var i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n// src/createAsyncThunk.ts\nvar commonProperties = ["name", "message", "stack", "code"];\nvar RejectWithValue = /** @class */function () {\n  function RejectWithValue(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  return RejectWithValue;\n}();\nvar FulfillWithMeta = /** @class */function () {\n  function FulfillWithMeta(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  return FulfillWithMeta;\n}();\nvar miniSerializeError = function (value) {\n  if (typeof value === "object" && value !== null) {\n    var simpleError = {};\n    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {\n      var property = commonProperties_1[_i];\n      if (typeof value[property] === "string") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar createAsyncThunk = function () {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    var fulfilled = createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) {\n      return {\n        payload: payload,\n        meta: __spreadProps(__spreadValues({}, meta || {}), {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: "fulfilled"\n        })\n      };\n    });\n    var pending = createAction(typePrefix + "/pending", function (requestId, arg, meta) {\n      return {\n        payload: void 0,\n        meta: __spreadProps(__spreadValues({}, meta || {}), {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: "pending"\n        })\n      };\n    });\n    var rejected = createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) {\n      return {\n        payload: payload,\n        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),\n        meta: __spreadProps(__spreadValues({}, meta || {}), {\n          arg: arg,\n          requestId: requestId,\n          rejectedWithValue: !!payload,\n          requestStatus: "rejected",\n          aborted: (error == null ? void 0 : error.name) === "AbortError",\n          condition: (error == null ? void 0 : error.name) === "ConditionError"\n        })\n      };\n    });\n    var displayedWarning = false;\n    var AC = typeof AbortController !== "undefined" ? AbortController : /** @class */function () {\n      function class_1() {\n        this.signal = {\n          aborted: false,\n          addEventListener: function () {},\n          dispatchEvent: function () {\n            return false;\n          },\n          onabort: function () {},\n          removeEventListener: function () {},\n          reason: void 0,\n          throwIfAborted: function () {}\n        };\n      }\n      class_1.prototype.abort = function () {\n        if (false) {}\n      };\n      return class_1;\n    }();\n    function actionCreator(arg) {\n      return function (dispatch, getState, extra) {\n        var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();\n        var abortController = new AC();\n        var abortReason;\n        var started = false;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        var promise2 = function () {\n          return __async(this, null, function () {\n            var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;\n            return __generator(this, function (_c) {\n              switch (_c.label) {\n                case 0:\n                  _c.trys.push([0, 4,, 5]);\n                  conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {\n                    getState: getState,\n                    extra: extra\n                  });\n                  if (!isThenable(conditionResult)) return [3 /*break*/, 2];\n                  return [4 /*yield*/, conditionResult];\n                case 1:\n                  conditionResult = _c.sent();\n                  _c.label = 2;\n                case 2:\n                  if (conditionResult === false || abortController.signal.aborted) {\n                    throw {\n                      name: "ConditionError",\n                      message: "Aborted due to condition callback returning false."\n                    };\n                  }\n                  started = true;\n                  abortedPromise = new Promise(function (_, reject) {\n                    return abortController.signal.addEventListener("abort", function () {\n                      return reject({\n                        name: "AbortError",\n                        message: abortReason || "Aborted"\n                      });\n                    });\n                  });\n                  dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {\n                    requestId: requestId,\n                    arg: arg\n                  }, {\n                    getState: getState,\n                    extra: extra\n                  })));\n                  return [4 /*yield*/, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n                    dispatch: dispatch,\n                    getState: getState,\n                    extra: extra,\n                    requestId: requestId,\n                    signal: abortController.signal,\n                    abort: abort,\n                    rejectWithValue: function (value, meta) {\n                      return new RejectWithValue(value, meta);\n                    },\n                    fulfillWithValue: function (value, meta) {\n                      return new FulfillWithMeta(value, meta);\n                    }\n                  })).then(function (result) {\n                    if (result instanceof RejectWithValue) {\n                      throw result;\n                    }\n                    if (result instanceof FulfillWithMeta) {\n                      return fulfilled(result.payload, requestId, arg, result.meta);\n                    }\n                    return fulfilled(result, requestId, arg);\n                  })])];\n                case 3:\n                  finalAction = _c.sent();\n                  return [3 /*break*/, 5];\n                case 4:\n                  err_1 = _c.sent();\n                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);\n                  return [3 /*break*/, 5];\n                case 5:\n                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                  if (!skipDispatch) {\n                    dispatch(finalAction);\n                  }\n                  return [2 /*return*/, finalAction];\n              }\n            });\n          });\n        }();\n        return Object.assign(promise2, {\n          abort: abort,\n          requestId: requestId,\n          arg: arg,\n          unwrap: function () {\n            return promise2.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending: pending,\n      rejected: rejected,\n      fulfilled: fulfilled,\n      typePrefix: typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = function () {\n    return createAsyncThunk2;\n  };\n  return createAsyncThunk2;\n}();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && typeof value === "object" && typeof value.then === "function";\n}\n// src/tsHelpers.ts\nvar hasMatchFunction = function (v) {\n  return v && typeof v.match === "function";\n};\n// src/matchers.ts\nvar matches = function (matcher, action) {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf() {\n  var matchers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    matchers[_i] = arguments[_i];\n  }\n  return function (action) {\n    return matchers.some(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction isAllOf() {\n  var matchers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    matchers[_i] = arguments[_i];\n  }\n  return function (action) {\n    return matchers.every(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  var hasValidRequestId = typeof action.meta.requestId === "string";\n  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === "function" && "pending" in a[0] && "fulfilled" in a[0] && "rejected" in a[0];\n}\nfunction isPending() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, ["pending"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.pending;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isRejected() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, ["rejected"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.rejected;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isRejectedWithValue() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  var hasFlag = function (action) {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n      return combinedMatcher(action);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return function (action) {\n    var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n    return combinedMatcher(action);\n  };\n}\nfunction isFulfilled() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, ["fulfilled"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.fulfilled;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isAsyncThunkAction() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, ["pending", "fulfilled", "rejected"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = [];\n    for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {\n      var asyncThunk = asyncThunks_1[_i];\n      matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\n    }\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function (func, expected) {\n  if (typeof func !== "function") {\n    throw new TypeError(expected + " is not a function");\n  }\n};\nvar noop = function () {};\nvar catchRejection = function (promise2, onError) {\n  if (onError === void 0) {\n    onError = noop;\n  }\n  promise2.catch(onError);\n  return promise2;\n};\nvar addAbortSignalListener = function (abortSignal, callback) {\n  abortSignal.addEventListener("abort", callback, {\n    once: true\n  });\n  return function () {\n    return abortSignal.removeEventListener("abort", callback);\n  };\n};\nvar abortControllerWithReason = function (abortController, reason) {\n  var signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!("reason" in signal)) {\n    Object.defineProperty(signal, "reason", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n// src/listenerMiddleware/exceptions.ts\nvar task = "task";\nvar listener = "listener";\nvar completed = "completed";\nvar cancelled = "cancelled";\nvar taskCancelled = "task-" + cancelled;\nvar taskCompleted = "task-" + completed;\nvar listenerCancelled = listener + "-" + cancelled;\nvar listenerCompleted = listener + "-" + completed;\nvar TaskAbortError = /** @class */function () {\n  function TaskAbortError(code) {\n    this.code = code;\n    this.name = "TaskAbortError";\n    this.message = task + " " + cancelled + " (reason: " + code + ")";\n  }\n  return TaskAbortError;\n}();\n// src/listenerMiddleware/task.ts\nvar validateActive = function (signal) {\n  if (signal.aborted) {\n    throw new TaskAbortError(signal.reason);\n  }\n};\nfunction raceWithSignal(signal, promise2) {\n  var cleanup = noop;\n  return new Promise(function (resolve, reject) {\n    var notifyRejection = function () {\n      return reject(new TaskAbortError(signal.reason));\n    };\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise2.finally(function () {\n      return cleanup();\n    }).then(resolve, reject);\n  }).finally(function () {\n    cleanup = noop;\n  });\n}\nvar runTask = function (task2, cleanUp) {\n  return __async(void 0, null, function () {\n    var value, error_1;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _c.trys.push([0, 3, 4, 5]);\n          return [4 /*yield*/, Promise.resolve()];\n        case 1:\n          _c.sent();\n          return [4 /*yield*/, task2()];\n        case 2:\n          value = _c.sent();\n          return [2 /*return*/, {\n            status: "ok",\n            value: value\n          }];\n        case 3:\n          error_1 = _c.sent();\n          return [2 /*return*/, {\n            status: error_1 instanceof TaskAbortError ? "cancelled" : "rejected",\n            error: error_1\n          }];\n        case 4:\n          cleanUp == null ? void 0 : cleanUp();\n          return [7 /*endfinally*/];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n};\n\nvar createPause = function (signal) {\n  return function (promise2) {\n    return catchRejection(raceWithSignal(signal, promise2).then(function (output) {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = function (signal) {\n  var pause = createPause(signal);\n  return function (timeoutMs) {\n    return pause(new Promise(function (resolve) {\n      return setTimeout(resolve, timeoutMs);\n    }));\n  };\n};\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = "listenerMiddleware";\nvar createFork = function (parentAbortSignal) {\n  var linkControllers = function (controller) {\n    return addAbortSignalListener(parentAbortSignal, function () {\n      return abortControllerWithReason(controller, parentAbortSignal.reason);\n    });\n  };\n  return function (taskExecutor) {\n    assertFunction(taskExecutor, "taskExecutor");\n    var childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    var result = runTask(function () {\n      return __async(void 0, null, function () {\n        var result2;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              validateActive(parentAbortSignal);\n              validateActive(childAbortController.signal);\n              return [4 /*yield*/, taskExecutor({\n                pause: createPause(childAbortController.signal),\n                delay: createDelay(childAbortController.signal),\n                signal: childAbortController.signal\n              })];\n            case 1:\n              result2 = _c.sent();\n              validateActive(childAbortController.signal);\n              return [2 /*return*/, result2];\n          }\n        });\n      });\n    }, function () {\n      return abortControllerWithReason(childAbortController, taskCompleted);\n    });\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel: function () {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = function (startListening, signal) {\n  var take = function (predicate, timeout) {\n    return __async(void 0, null, function () {\n      var unsubscribe, tuplePromise, promises, output;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            validateActive(signal);\n            unsubscribe = function () {};\n            tuplePromise = new Promise(function (resolve, reject) {\n              var stopListening = startListening({\n                predicate: predicate,\n                effect: function (action, listenerApi) {\n                  listenerApi.unsubscribe();\n                  resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n                }\n              });\n              unsubscribe = function () {\n                stopListening();\n                reject();\n              };\n            });\n            promises = [tuplePromise];\n            if (timeout != null) {\n              promises.push(new Promise(function (resolve) {\n                return setTimeout(resolve, timeout, null);\n              }));\n            }\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, raceWithSignal(signal, Promise.race(promises))];\n          case 2:\n            output = _c.sent();\n            validateActive(signal);\n            return [2 /*return*/, output];\n          case 3:\n            unsubscribe();\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return function (predicate, timeout) {\n    return catchRejection(take(predicate, timeout));\n  };\n};\nvar getListenerEntryPropsFrom = function (options) {\n  var type = options.type,\n    actionCreator = options.actionCreator,\n    matcher = options.matcher,\n    predicate = options.predicate,\n    effect = options.effect;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error("Creating or removing a listener requires one of the known fields for matching an action");\n  }\n  assertFunction(effect, "options.listener");\n  return {\n    predicate: predicate,\n    type: type,\n    effect: effect\n  };\n};\nvar createListenerEntry = function (options) {\n  var _c = getListenerEntryPropsFrom(options),\n    type = _c.type,\n    predicate = _c.predicate,\n    effect = _c.effect;\n  var id = nanoid();\n  var entry = {\n    id: id,\n    effect: effect,\n    type: type,\n    predicate: predicate,\n    pending: new Set(),\n    unsubscribe: function () {\n      throw new Error("Unsubscribe not initialized");\n    }\n  };\n  return entry;\n};\nvar cancelActiveListeners = function (entry) {\n  entry.pending.forEach(function (controller) {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = function (listenerMap) {\n  return function () {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = function (errorHandler, errorToNotify, errorInfo) {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(function () {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = createAction(alm + "/add");\nvar clearAllListeners = createAction(alm + "/removeAll");\nvar removeListener = createAction(alm + "/remove");\nvar defaultErrorHandler = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  console.error.apply(console, __spreadArray([alm + "/error"], args));\n};\nfunction createListenerMiddleware(middlewareOptions) {\n  var _this = this;\n  if (middlewareOptions === void 0) {\n    middlewareOptions = {};\n  }\n  var listenerMap = new Map();\n  var extra = middlewareOptions.extra,\n    _c = middlewareOptions.onError,\n    onError = _c === void 0 ? defaultErrorHandler : _c;\n  assertFunction(onError, "onError");\n  var insertEntry = function (entry) {\n    entry.unsubscribe = function () {\n      return listenerMap.delete(entry.id);\n    };\n    listenerMap.set(entry.id, entry);\n    return function (cancelOptions) {\n      entry.unsubscribe();\n      if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  var findListenerEntry = function (comparator) {\n    for (var _i = 0, _c = Array.from(listenerMap.values()); _i < _c.length; _i++) {\n      var entry = _c[_i];\n      if (comparator(entry)) {\n        return entry;\n      }\n    }\n    return void 0;\n  };\n  var startListening = function (options) {\n    var entry = findListenerEntry(function (existingEntry) {\n      return existingEntry.effect === options.effect;\n    });\n    if (!entry) {\n      entry = createListenerEntry(options);\n    }\n    return insertEntry(entry);\n  };\n  var stopListening = function (options) {\n    var _c = getListenerEntryPropsFrom(options),\n      type = _c.type,\n      effect = _c.effect,\n      predicate = _c.predicate;\n    var entry = findListenerEntry(function (entry2) {\n      var matchPredicateOrType = typeof type === "string" ? entry2.type === type : entry2.predicate === predicate;\n      return matchPredicateOrType && entry2.effect === effect;\n    });\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  var notifyListener = function (entry, action, api, getOriginalState) {\n    return __async(_this, null, function () {\n      var internalTaskController, take, listenerError_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            internalTaskController = new AbortController();\n            take = createTakePattern(startListening, internalTaskController.signal);\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n            entry.pending.add(internalTaskController);\n            return [4 /*yield*/, Promise.resolve(entry.effect(action, assign({}, api, {\n              getOriginalState: getOriginalState,\n              condition: function (predicate, timeout) {\n                return take(predicate, timeout).then(Boolean);\n              },\n              take: take,\n              delay: createDelay(internalTaskController.signal),\n              pause: createPause(internalTaskController.signal),\n              extra: extra,\n              signal: internalTaskController.signal,\n              fork: createFork(internalTaskController.signal),\n              unsubscribe: entry.unsubscribe,\n              subscribe: function () {\n                listenerMap.set(entry.id, entry);\n              },\n              cancelActiveListeners: function () {\n                entry.pending.forEach(function (controller, _, set) {\n                  if (controller !== internalTaskController) {\n                    abortControllerWithReason(controller, listenerCancelled);\n                    set.delete(controller);\n                  }\n                });\n              }\n            })))];\n          case 2:\n            _c.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            listenerError_1 = _c.sent();\n            if (!(listenerError_1 instanceof TaskAbortError)) {\n              safelyNotifyError(onError, listenerError_1, {\n                raisedBy: "effect"\n              });\n            }\n            return [3 /*break*/, 5];\n          case 4:\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending.delete(internalTaskController);\n            return [7 /*endfinally*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  var middleware = function (api) {\n    return function (next) {\n      return function (action) {\n        if (!isAction(action)) {\n          return next(action);\n        }\n        if (addListener.match(action)) {\n          return startListening(action.payload);\n        }\n        if (clearAllListeners.match(action)) {\n          clearListenerMiddleware();\n          return;\n        }\n        if (removeListener.match(action)) {\n          return stopListening(action.payload);\n        }\n        var originalState = api.getState();\n        var getOriginalState = function () {\n          if (originalState === INTERNAL_NIL_TOKEN) {\n            throw new Error(alm + ": getOriginalState can only be called synchronously");\n          }\n          return originalState;\n        };\n        var result;\n        try {\n          result = next(action);\n          if (listenerMap.size > 0) {\n            var currentState = api.getState();\n            var listenerEntries = Array.from(listenerMap.values());\n            for (var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++) {\n              var entry = listenerEntries_1[_i];\n              var runListener = false;\n              try {\n                runListener = entry.predicate(action, currentState, originalState);\n              } catch (predicateError) {\n                runListener = false;\n                safelyNotifyError(onError, predicateError, {\n                  raisedBy: "predicate"\n                });\n              }\n              if (!runListener) {\n                continue;\n              }\n              notifyListener(entry, action, api, getOriginalState);\n            }\n          }\n        } finally {\n          originalState = INTERNAL_NIL_TOKEN;\n        }\n        return result;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    startListening: startListening,\n    stopListening: stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n}\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = "RTK_autoBatch";\nvar prepareAutoBatched = function () {\n  return function (payload) {\n    var _c;\n    return {\n      payload: payload,\n      meta: (_c = {}, _c[SHOULD_AUTOBATCH] = true, _c)\n    };\n  };\n};\nvar promise;\nvar queueMicrotaskShim = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : globalThis) : function (cb) {\n  return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) {\n    return setTimeout(function () {\n      throw err;\n    }, 0);\n  });\n};\nvar createQueueWithTimer = function (timeout) {\n  return function (notify) {\n    setTimeout(notify, timeout);\n  };\n};\nvar rAF = typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);\nvar autoBatchEnhancer = function (options) {\n  if (options === void 0) {\n    options = {\n      type: "raf"\n    };\n  }\n  return function (next) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var store = next.apply(void 0, args);\n      var notifying = true;\n      var shouldNotifyAtEndOfTick = false;\n      var notificationQueued = false;\n      var listeners = new Set();\n      var queueCallback = options.type === "tick" ? queueMicrotaskShim : options.type === "raf" ? rAF : options.type === "callback" ? options.queueNotification : createQueueWithTimer(options.timeout);\n      var notifyListeners = function () {\n        notificationQueued = false;\n        if (shouldNotifyAtEndOfTick) {\n          shouldNotifyAtEndOfTick = false;\n          listeners.forEach(function (l) {\n            return l();\n          });\n        }\n      };\n      return Object.assign({}, store, {\n        subscribe: function (listener2) {\n          var wrappedListener = function () {\n            return notifying && listener2();\n          };\n          var unsubscribe = store.subscribe(wrappedListener);\n          listeners.add(listener2);\n          return function () {\n            unsubscribe();\n            listeners.delete(listener2);\n          };\n        },\n        dispatch: function (action) {\n          var _a;\n          try {\n            notifying = !((_a = action == null ? void 0 : action.meta) == null ? void 0 : _a[SHOULD_AUTOBATCH]);\n            shouldNotifyAtEndOfTick = !notifying;\n            if (shouldNotifyAtEndOfTick) {\n              if (!notificationQueued) {\n                notificationQueued = true;\n                queueCallback(notifyListeners);\n              }\n            }\n            return store.dispatch(action);\n          } finally {\n            notifying = true;\n          }\n        }\n      });\n    };\n  };\n};\n// src/index.ts\n(0,immer__WEBPACK_IMPORTED_MODULE_2__/* .enableES5 */ .pV)();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsR0FBWSxFQUFDLENBQUF4SyxFQUFBLEdBQUE1UixNQUFBLG9CQUFBQSxNQUFBLENBQVErRSxJQUFBLEtBQVIsZ0JBQUE2TSxFQUFBLENBQWV5SixnQkFBQTtZQUc1QmdCLHVCQUFBLEdBQTBCLENBQUNELFNBQUE7WUFDM0IsSUFBSUMsdUJBQUEsRUFBeUI7Y0FJM0IsSUFBSSxDQUFDQyxrQkFBQSxFQUFvQjtnQkFDdkJBLGtCQUFBLEdBQXFCO2dCQUNyQkUsYUFBQSxDQUFjRSxlQUFBOzs7WUFTbEIsT0FBT1AsS0FBQSxDQUFNL0ssUUFBQSxDQUFTcFIsTUFBQTtXQUFBLFNBQ3RCO1lBRUFvYyxTQUFBLEdBQVk7O1FBQUE7T0FBQTtJQUFBO0VBeEVwQixDQXdFb0I7QUF6RXBCLENBeUVvQjs7QTVCM0h0QnprQiwwREFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9pbmRleC50cz82ZjM3Iiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9jcmVhdGVEcmFmdFNhZmVTZWxlY3Rvci50cz8xNzMyIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9jb25maWd1cmVTdG9yZS50cz9mMGNiIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9kZXZ0b29sc0V4dGVuc2lvbi50cz8yODFlIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9pc1BsYWluT2JqZWN0LnRzP2NiN2UiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzPzkyMTAiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL3V0aWxzLnRzPzdmMzMiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50cz8wYjdjIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHM/MDVjZSIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvY3JlYXRlQWN0aW9uLnRzPzkwZjEiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2NyZWF0ZVJlZHVjZXIudHM/NGMwYSIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvbWFwQnVpbGRlcnMudHM/MjRkNyIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvY3JlYXRlU2xpY2UudHM/MTk1ZCIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvZW50aXRpZXMvZW50aXR5X3N0YXRlLnRzP2RjN2YiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2VudGl0aWVzL3N0YXRlX3NlbGVjdG9ycy50cz8yOGYyIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9lbnRpdGllcy9zdGF0ZV9hZGFwdGVyLnRzP2QxZDEiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2VudGl0aWVzL3V0aWxzLnRzPzBiNmYiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2VudGl0aWVzL3Vuc29ydGVkX3N0YXRlX2FkYXB0ZXIudHM/MThlNiIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvZW50aXRpZXMvc29ydGVkX3N0YXRlX2FkYXB0ZXIudHM/MDkxYyIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXIudHM/MWE0NCIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvbmFub2lkLnRzP2YyOGEiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2NyZWF0ZUFzeW5jVGh1bmsudHM/OGFjNiIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvdHNIZWxwZXJzLnRzPzA0ZDAiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL21hdGNoZXJzLnRzP2FmNjciLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi4vc3JjL2xpc3RlbmVyTWlkZGxld2FyZS91dGlscy50cz9hYjcyIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9saXN0ZW5lck1pZGRsZXdhcmUvZXhjZXB0aW9ucy50cz82N2Y0Iiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9saXN0ZW5lck1pZGRsZXdhcmUvdGFzay50cz8zYWEyIiwid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4uL3NyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHM/ZmU1NCIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uLi9zcmMvYXV0b0JhdGNoRW5oYW5jZXIudHM/NDE1NSIsIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS9yZWR1eC10b29sa2l0LmVzbS5qcz84NTlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuYWJsZUVTNSB9IGZyb20gJ2ltbWVyJ1xyXG5leHBvcnQgKiBmcm9tICdyZWR1eCdcclxuZXhwb3J0IHtcclxuICBkZWZhdWx0IGFzIGNyZWF0ZU5leHRTdGF0ZSxcclxuICBjdXJyZW50LFxyXG4gIGZyZWV6ZSxcclxuICBvcmlnaW5hbCxcclxuICBpc0RyYWZ0LFxyXG59IGZyb20gJ2ltbWVyJ1xyXG5leHBvcnQgdHlwZSB7IERyYWZ0IH0gZnJvbSAnaW1tZXInXHJcbmV4cG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnXHJcbmV4cG9ydCB0eXBlIHtcclxuICBTZWxlY3RvcixcclxuICBPdXRwdXRQYXJhbWV0cmljU2VsZWN0b3IsXHJcbiAgT3V0cHV0U2VsZWN0b3IsXHJcbiAgUGFyYW1ldHJpY1NlbGVjdG9yLFxyXG59IGZyb20gJ3Jlc2VsZWN0J1xyXG5leHBvcnQgeyBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciB9IGZyb20gJy4vY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3InXHJcbmV4cG9ydCB0eXBlIHsgVGh1bmtBY3Rpb24sIFRodW5rRGlzcGF0Y2gsIFRodW5rTWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5cclxuLy8gV2UgZGVsaWJlcmF0ZWx5IGVuYWJsZSBJbW1lcidzIEVTNSBzdXBwb3J0LCBvbiB0aGUgZ3JvdW5kcyB0aGF0XHJcbi8vIHdlIGFzc3VtZSBSVEsgd2lsbCBiZSB1c2VkIHdpdGggUmVhY3QgTmF0aXZlIGFuZCBvdGhlciBQcm94eS1sZXNzXHJcbi8vIGVudmlyb25tZW50cy4gIEluIGFkZGl0aW9uLCB0aGF0J3MgaG93IEltbWVyIDQgYmVoYXZlZCwgYW5kIHNpbmNlXHJcbi8vIHdlIHdhbnQgdG8gc2hpcCB0aGlzIGluIGFuIFJUSyBtaW5vciwgd2Ugc2hvdWxkIGtlZXAgdGhlIHNhbWUgYmVoYXZpb3IuXHJcbmVuYWJsZUVTNSgpXHJcblxyXG5leHBvcnQge1xyXG4gIC8vIGpzXHJcbiAgY29uZmlndXJlU3RvcmUsXHJcbn0gZnJvbSAnLi9jb25maWd1cmVTdG9yZSdcclxuZXhwb3J0IHR5cGUge1xyXG4gIC8vIHR5cGVzXHJcbiAgQ29uZmlndXJlRW5oYW5jZXJzQ2FsbGJhY2ssXHJcbiAgQ29uZmlndXJlU3RvcmVPcHRpb25zLFxyXG4gIEVuaGFuY2VkU3RvcmUsXHJcbn0gZnJvbSAnLi9jb25maWd1cmVTdG9yZSdcclxuZXhwb3J0IHR5cGUgeyBEZXZUb29sc0VuaGFuY2VyT3B0aW9ucyB9IGZyb20gJy4vZGV2dG9vbHNFeHRlbnNpb24nXHJcbmV4cG9ydCB7XHJcbiAgLy8ganNcclxuICBjcmVhdGVBY3Rpb24sXHJcbiAgZ2V0VHlwZSxcclxuICBpc0FjdGlvbixcclxuICBpc0ZTQSBhcyBpc0ZsdXhTdGFuZGFyZEFjdGlvbixcclxufSBmcm9tICcuL2NyZWF0ZUFjdGlvbidcclxuZXhwb3J0IHR5cGUge1xyXG4gIC8vIHR5cGVzXHJcbiAgUGF5bG9hZEFjdGlvbixcclxuICBQYXlsb2FkQWN0aW9uQ3JlYXRvcixcclxuICBBY3Rpb25DcmVhdG9yV2l0aE5vbkluZmVycmFibGVQYXlsb2FkLFxyXG4gIEFjdGlvbkNyZWF0b3JXaXRoT3B0aW9uYWxQYXlsb2FkLFxyXG4gIEFjdGlvbkNyZWF0b3JXaXRoUGF5bG9hZCxcclxuICBBY3Rpb25DcmVhdG9yV2l0aG91dFBheWxvYWQsXHJcbiAgQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQsXHJcbiAgUHJlcGFyZUFjdGlvbixcclxufSBmcm9tICcuL2NyZWF0ZUFjdGlvbidcclxuZXhwb3J0IHtcclxuICAvLyBqc1xyXG4gIGNyZWF0ZVJlZHVjZXIsXHJcbn0gZnJvbSAnLi9jcmVhdGVSZWR1Y2VyJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgLy8gdHlwZXNcclxuICBBY3Rpb25zLFxyXG4gIENhc2VSZWR1Y2VyLFxyXG4gIENhc2VSZWR1Y2VycyxcclxufSBmcm9tICcuL2NyZWF0ZVJlZHVjZXInXHJcbmV4cG9ydCB7XHJcbiAgLy8ganNcclxuICBjcmVhdGVTbGljZSxcclxufSBmcm9tICcuL2NyZWF0ZVNsaWNlJ1xyXG5cclxuZXhwb3J0IHR5cGUge1xyXG4gIC8vIHR5cGVzXHJcbiAgQ3JlYXRlU2xpY2VPcHRpb25zLFxyXG4gIFNsaWNlLFxyXG4gIENhc2VSZWR1Y2VyQWN0aW9ucyxcclxuICBTbGljZUNhc2VSZWR1Y2VycyxcclxuICBWYWxpZGF0ZVNsaWNlQ2FzZVJlZHVjZXJzLFxyXG4gIENhc2VSZWR1Y2VyV2l0aFByZXBhcmUsXHJcbiAgU2xpY2VBY3Rpb25DcmVhdG9yLFxyXG59IGZyb20gJy4vY3JlYXRlU2xpY2UnXHJcbmV4cG9ydCB7XHJcbiAgLy8ganNcclxuICBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsXHJcbiAgaXNJbW11dGFibGVEZWZhdWx0LFxyXG59IGZyb20gJy4vaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgLy8gdHlwZXNcclxuICBJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zLFxyXG59IGZyb20gJy4vaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG5leHBvcnQge1xyXG4gIC8vIGpzXHJcbiAgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLFxyXG4gIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSxcclxuICBpc1BsYWluLFxyXG59IGZyb20gJy4vc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgLy8gdHlwZXNcclxuICBTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zLFxyXG59IGZyb20gJy4vc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG5leHBvcnQge1xyXG4gIC8vIGpzXHJcbiAgZ2V0RGVmYXVsdE1pZGRsZXdhcmUsXHJcbn0gZnJvbSAnLi9nZXREZWZhdWx0TWlkZGxld2FyZSdcclxuZXhwb3J0IHR5cGUge1xyXG4gIC8vIHR5cGVzXHJcbiAgQWN0aW9uUmVkdWNlck1hcEJ1aWxkZXIsXHJcbn0gZnJvbSAnLi9tYXBCdWlsZGVycydcclxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBFbmhhbmNlckFycmF5IH0gZnJvbSAnLi91dGlscydcclxuXHJcbmV4cG9ydCB7IGNyZWF0ZUVudGl0eUFkYXB0ZXIgfSBmcm9tICcuL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgRGljdGlvbmFyeSxcclxuICBFbnRpdHlTdGF0ZSxcclxuICBFbnRpdHlBZGFwdGVyLFxyXG4gIEVudGl0eVNlbGVjdG9ycyxcclxuICBFbnRpdHlTdGF0ZUFkYXB0ZXIsXHJcbiAgRW50aXR5SWQsXHJcbiAgVXBkYXRlLFxyXG4gIElkU2VsZWN0b3IsXHJcbiAgQ29tcGFyZXIsXHJcbn0gZnJvbSAnLi9lbnRpdGllcy9tb2RlbHMnXHJcblxyXG5leHBvcnQge1xyXG4gIGNyZWF0ZUFzeW5jVGh1bmssXHJcbiAgdW53cmFwUmVzdWx0LFxyXG4gIG1pbmlTZXJpYWxpemVFcnJvcixcclxufSBmcm9tICcuL2NyZWF0ZUFzeW5jVGh1bmsnXHJcbmV4cG9ydCB0eXBlIHtcclxuICBBc3luY1RodW5rLFxyXG4gIEFzeW5jVGh1bmtPcHRpb25zLFxyXG4gIEFzeW5jVGh1bmtBY3Rpb24sXHJcbiAgQXN5bmNUaHVua1BheWxvYWRDcmVhdG9yUmV0dXJuVmFsdWUsXHJcbiAgQXN5bmNUaHVua1BheWxvYWRDcmVhdG9yLFxyXG4gIFNlcmlhbGl6ZWRFcnJvcixcclxufSBmcm9tICcuL2NyZWF0ZUFzeW5jVGh1bmsnXHJcblxyXG5leHBvcnQge1xyXG4gIC8vIGpzXHJcbiAgaXNBbGxPZixcclxuICBpc0FueU9mLFxyXG4gIGlzUGVuZGluZyxcclxuICBpc1JlamVjdGVkLFxyXG4gIGlzRnVsZmlsbGVkLFxyXG4gIGlzQXN5bmNUaHVua0FjdGlvbixcclxuICBpc1JlamVjdGVkV2l0aFZhbHVlLFxyXG59IGZyb20gJy4vbWF0Y2hlcnMnXHJcbmV4cG9ydCB0eXBlIHtcclxuICAvLyB0eXBlc1xyXG4gIEFjdGlvbk1hdGNoaW5nQWxsT2YsXHJcbiAgQWN0aW9uTWF0Y2hpbmdBbnlPZixcclxufSBmcm9tICcuL21hdGNoZXJzJ1xyXG5cclxuZXhwb3J0IHsgbmFub2lkIH0gZnJvbSAnLi9uYW5vaWQnXHJcblxyXG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzUGxhaW5PYmplY3QgfSBmcm9tICcuL2lzUGxhaW5PYmplY3QnXHJcblxyXG5leHBvcnQgdHlwZSB7XHJcbiAgTGlzdGVuZXJFZmZlY3QsXHJcbiAgTGlzdGVuZXJNaWRkbGV3YXJlLFxyXG4gIExpc3RlbmVyRWZmZWN0QVBJLFxyXG4gIExpc3RlbmVyTWlkZGxld2FyZUluc3RhbmNlLFxyXG4gIENyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZU9wdGlvbnMsXHJcbiAgTGlzdGVuZXJFcnJvckhhbmRsZXIsXHJcbiAgVHlwZWRTdGFydExpc3RlbmluZyxcclxuICBUeXBlZEFkZExpc3RlbmVyLFxyXG4gIFR5cGVkU3RvcExpc3RlbmluZyxcclxuICBUeXBlZFJlbW92ZUxpc3RlbmVyLFxyXG4gIFVuc3Vic2NyaWJlTGlzdGVuZXIsXHJcbiAgVW5zdWJzY3JpYmVMaXN0ZW5lck9wdGlvbnMsXHJcbiAgRm9ya2VkVGFza0V4ZWN1dG9yLFxyXG4gIEZvcmtlZFRhc2ssXHJcbiAgRm9ya2VkVGFza0FQSSxcclxuICBBc3luY1Rhc2tFeGVjdXRvcixcclxuICBTeW5jVGFza0V4ZWN1dG9yLFxyXG4gIFRhc2tDYW5jZWxsZWQsXHJcbiAgVGFza1JlamVjdGVkLFxyXG4gIFRhc2tSZXNvbHZlZCxcclxuICBUYXNrUmVzdWx0LFxyXG59IGZyb20gJy4vbGlzdGVuZXJNaWRkbGV3YXJlL2luZGV4J1xyXG5leHBvcnQgdHlwZSB7IEFueUxpc3RlbmVyUHJlZGljYXRlIH0gZnJvbSAnLi9saXN0ZW5lck1pZGRsZXdhcmUvdHlwZXMnXHJcblxyXG5leHBvcnQge1xyXG4gIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSxcclxuICBhZGRMaXN0ZW5lcixcclxuICByZW1vdmVMaXN0ZW5lcixcclxuICBjbGVhckFsbExpc3RlbmVycyxcclxuICBUYXNrQWJvcnRFcnJvcixcclxufSBmcm9tICcuL2xpc3RlbmVyTWlkZGxld2FyZS9pbmRleCdcclxuXHJcbmV4cG9ydCB7XHJcbiAgU0hPVUxEX0FVVE9CQVRDSCxcclxuICBwcmVwYXJlQXV0b0JhdGNoZWQsXHJcbiAgYXV0b0JhdGNoRW5oYW5jZXIsXHJcbn0gZnJvbSAnLi9hdXRvQmF0Y2hFbmhhbmNlcidcclxuZXhwb3J0IHR5cGUgeyBBdXRvQmF0Y2hPcHRpb25zIH0gZnJvbSAnLi9hdXRvQmF0Y2hFbmhhbmNlcidcclxuIiwiaW1wb3J0IHsgY3VycmVudCwgaXNEcmFmdCB9IGZyb20gJ2ltbWVyJ1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0J1xyXG5cclxuLyoqXHJcbiAqIFwiRHJhZnQtU2FmZVwiIHZlcnNpb24gb2YgYHJlc2VsZWN0YCdzIGBjcmVhdGVTZWxlY3RvcmA6XHJcbiAqIElmIGFuIGBpbW1lcmAtZHJhZnRlZCBvYmplY3QgaXMgcGFzc2VkIGludG8gdGhlIHJlc3VsdGluZyBzZWxlY3RvcidzIGZpcnN0IGFyZ3VtZW50LFxyXG4gKiB0aGUgc2VsZWN0b3Igd2lsbCBhY3Qgb24gdGhlIGN1cnJlbnQgZHJhZnQgdmFsdWUsIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgY2FjaGVkIHZhbHVlXHJcbiAqIHRoYXQgbWlnaHQgYmUgcG9zc2libHkgb3V0ZGF0ZWQgaWYgdGhlIGRyYWZ0IGhhcyBiZWVuIG1vZGlmaWVkIHNpbmNlLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3I6IHR5cGVvZiBjcmVhdGVTZWxlY3RvciA9IChcclxuICAuLi5hcmdzOiB1bmtub3duW11cclxuKSA9PiB7XHJcbiAgY29uc3Qgc2VsZWN0b3IgPSAoY3JlYXRlU2VsZWN0b3IgYXMgYW55KSguLi5hcmdzKVxyXG4gIGNvbnN0IHdyYXBwZWRTZWxlY3RvciA9ICh2YWx1ZTogdW5rbm93biwgLi4ucmVzdDogdW5rbm93bltdKSA9PlxyXG4gICAgc2VsZWN0b3IoaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlLCAuLi5yZXN0KVxyXG4gIHJldHVybiB3cmFwcGVkU2VsZWN0b3IgYXMgYW55XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUge1xyXG4gIFJlZHVjZXIsXHJcbiAgUmVkdWNlcnNNYXBPYmplY3QsXHJcbiAgTWlkZGxld2FyZSxcclxuICBBY3Rpb24sXHJcbiAgQW55QWN0aW9uLFxyXG4gIFN0b3JlRW5oYW5jZXIsXHJcbiAgU3RvcmUsXHJcbiAgRGlzcGF0Y2gsXHJcbiAgUHJlbG9hZGVkU3RhdGUsXHJcbiAgQ29tYmluZWRTdGF0ZSxcclxufSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbXBvc2UsIGFwcGx5TWlkZGxld2FyZSwgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnXHJcbmltcG9ydCB0eXBlIHsgRGV2VG9vbHNFbmhhbmNlck9wdGlvbnMgYXMgRGV2VG9vbHNPcHRpb25zIH0gZnJvbSAnLi9kZXZ0b29sc0V4dGVuc2lvbidcclxuaW1wb3J0IHsgY29tcG9zZVdpdGhEZXZUb29scyB9IGZyb20gJy4vZGV2dG9vbHNFeHRlbnNpb24nXHJcblxyXG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QnXHJcbmltcG9ydCB0eXBlIHtcclxuICBUaHVua01pZGRsZXdhcmVGb3IsXHJcbiAgQ3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlLFxyXG59IGZyb20gJy4vZ2V0RGVmYXVsdE1pZGRsZXdhcmUnXHJcbmltcG9ydCB7IGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUgfSBmcm9tICcuL2dldERlZmF1bHRNaWRkbGV3YXJlJ1xyXG5pbXBvcnQgdHlwZSB7XHJcbiAgTm9JbmZlcixcclxuICBFeHRyYWN0RGlzcGF0Y2hFeHRlbnNpb25zLFxyXG4gIEV4dHJhY3RTdG9yZUV4dGVuc2lvbnMsXHJcbiAgRXh0cmFjdFN0YXRlRXh0ZW5zaW9ucyxcclxufSBmcm9tICcuL3RzSGVscGVycydcclxuaW1wb3J0IHsgRW5oYW5jZXJBcnJheSB9IGZyb20gJy4vdXRpbHMnXHJcblxyXG5jb25zdCBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xyXG5cclxuLyoqXHJcbiAqIENhbGxiYWNrIGZ1bmN0aW9uIHR5cGUsIHRvIGJlIHVzZWQgaW4gYENvbmZpZ3VyZVN0b3JlT3B0aW9ucy5lbmhhbmNlcnNgXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIENvbmZpZ3VyZUVuaGFuY2Vyc0NhbGxiYWNrPEUgZXh0ZW5kcyBFbmhhbmNlcnMgPSBFbmhhbmNlcnM+ID0gKFxyXG4gIGRlZmF1bHRFbmhhbmNlcnM6IEVuaGFuY2VyQXJyYXk8W1N0b3JlRW5oYW5jZXI8e30sIHt9Pl0+XHJcbikgPT4gRVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIGBjb25maWd1cmVTdG9yZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmVTdG9yZU9wdGlvbnM8XHJcbiAgUyA9IGFueSxcclxuICBBIGV4dGVuZHMgQWN0aW9uID0gQW55QWN0aW9uLFxyXG4gIE0gZXh0ZW5kcyBNaWRkbGV3YXJlczxTPiA9IE1pZGRsZXdhcmVzPFM+LFxyXG4gIEUgZXh0ZW5kcyBFbmhhbmNlcnMgPSBFbmhhbmNlcnNcclxuPiB7XHJcbiAgLyoqXHJcbiAgICogQSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCByZWR1Y2VyLCBvciBhblxyXG4gICAqIG9iamVjdCBvZiBzbGljZSByZWR1Y2VycyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIGBjb21iaW5lUmVkdWNlcnMoKWAuXHJcbiAgICovXHJcbiAgcmVkdWNlcjogUmVkdWNlcjxTLCBBPiB8IFJlZHVjZXJzTWFwT2JqZWN0PFMsIEE+XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIGFycmF5IG9mIFJlZHV4IG1pZGRsZXdhcmUgdG8gaW5zdGFsbC4gSWYgbm90IHN1cHBsaWVkLCBkZWZhdWx0cyB0b1xyXG4gICAqIHRoZSBzZXQgb2YgbWlkZGxld2FyZSByZXR1cm5lZCBieSBgZ2V0RGVmYXVsdE1pZGRsZXdhcmUoKWAuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZSBgbWlkZGxld2FyZTogKGdETSkgPT4gZ0RNKCkuY29uY2F0KGxvZ2dlciwgYXBpTWlkZGxld2FyZSwgeW91ckN1c3RvbU1pZGRsZXdhcmUpYFxyXG4gICAqIEBzZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUjaW50ZW5kZWQtdXNhZ2VcclxuICAgKi9cclxuICBtaWRkbGV3YXJlPzogKChnZXREZWZhdWx0TWlkZGxld2FyZTogQ3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlPFM+KSA9PiBNKSB8IE1cclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0byBlbmFibGUgUmVkdXggRGV2VG9vbHMgaW50ZWdyYXRpb24uIERlZmF1bHRzIHRvIGB0cnVlYC5cclxuICAgKlxyXG4gICAqIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBjYW4gYmUgZG9uZSBieSBwYXNzaW5nIFJlZHV4IERldlRvb2xzIG9wdGlvbnNcclxuICAgKi9cclxuICBkZXZUb29scz86IGJvb2xlYW4gfCBEZXZUb29sc09wdGlvbnNcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGluaXRpYWwgc3RhdGUsIHNhbWUgYXMgUmVkdXgncyBjcmVhdGVTdG9yZS5cclxuICAgKiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdCB0byBoeWRyYXRlIHRoZSBzdGF0ZVxyXG4gICAqIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhIHByZXZpb3VzbHkgc2VyaWFsaXplZFxyXG4gICAqIHVzZXIgc2Vzc2lvbi4gSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzKClgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlclxyXG4gICAqIGZ1bmN0aW9uIChlaXRoZXIgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBieSBwYXNzaW5nIGFuIG9iamVjdCBhcyBgcmVkdWNlcmApLFxyXG4gICAqIHRoaXMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyB0aGUgcmVkdWNlciBtYXAga2V5cy5cclxuICAgKi9cclxuICAvKlxyXG4gIE5vdCAxMDAlIGNvcnJlY3QgYnV0IHRoZSBiZXN0IGFwcHJveGltYXRpb24gd2UgY2FuIGdldDpcclxuICAtIGlmIFMgaXMgYSBgQ29tYmluZWRTdGF0ZWAgYXBwbHlpbmcgYSBzZWNvbmQgYENvbWJpbmVkU3RhdGVgIG9uIGl0IGRvZXMgbm90IGNoYW5nZSBhbnl0aGluZy5cclxuICAtIGlmIGl0IGlzIG5vdCwgdGhlcmUgY291bGQgYmUgdHdvIGNhc2VzOlxyXG4gICAgLSBgUmVkdWNlcnNNYXBPYmplY3Q8UywgQT5gIGlzIGJlaW5nIHBhc3NlZCBpbi4gSW4gdGhpcyBjYXNlLCB3ZSB3aWxsIGNhbGwgYGNvbWJpbmVSZWR1Y2Vyc2Agb24gaXQgYW5kIGBDb21iaW5lZFN0YXRlPFM+YCBpcyBjb3JyZWN0XHJcbiAgICAtIGBSZWR1Y2VyPFMsIEE+YCBpcyBiZWluZyBwYXNzZWQgaW4uIEluIHRoaXMgY2FzZSwgYWN0dWFsbHkgYENvbWJpbmVkU3RhdGU8Uz5gIGlzIHdyb25nIGFuZCBgU2Agd291bGQgYmUgY29ycmVjdC5cclxuICAgIEFzIHdlIGNhbm5vdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRob3NlIHR3byBjYXNlcyB3aXRob3V0IGFkZGluZyBhbm90aGVyIGdlbmVyaWMgcGFyYW1ldGVyLFxyXG4gICAgd2UganVzdCBtYWtlIHRoZSBwcmFnbWF0aWMgYXNzdW1wdGlvbiB0aGF0IHRoZSBsYXR0ZXIgYWxtb3N0IG5ldmVyIGhhcHBlbnMuXHJcbiAgKi9cclxuICBwcmVsb2FkZWRTdGF0ZT86IFByZWxvYWRlZFN0YXRlPENvbWJpbmVkU3RhdGU8Tm9JbmZlcjxTPj4+XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBzdG9yZSBlbmhhbmNlcnMgdG8gYXBwbHkuIFNlZSBSZWR1eCdzIGBjcmVhdGVTdG9yZSgpYC5cclxuICAgKiBBbGwgZW5oYW5jZXJzIHdpbGwgYmUgaW5jbHVkZWQgYmVmb3JlIHRoZSBEZXZUb29scyBFeHRlbnNpb24gZW5oYW5jZXIuXHJcbiAgICogSWYgeW91IG5lZWQgdG8gY3VzdG9taXplIHRoZSBvcmRlciBvZiBlbmhhbmNlcnMsIHN1cHBseSBhIGNhbGxiYWNrXHJcbiAgICogZnVuY3Rpb24gdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG9yaWdpbmFsIGFycmF5IChpZSwgYFthcHBseU1pZGRsZXdhcmVdYCksXHJcbiAgICogYW5kIHNob3VsZCByZXR1cm4gYSBuZXcgYXJyYXkgKHN1Y2ggYXMgYFthcHBseU1pZGRsZXdhcmUsIG9mZmxpbmVdYCkuXHJcbiAgICogSWYgeW91IG9ubHkgbmVlZCB0byBhZGQgbWlkZGxld2FyZSwgeW91IGNhbiB1c2UgdGhlIGBtaWRkbGV3YXJlYCBwYXJhbWV0ZXIgaW5zdGVhZC5cclxuICAgKi9cclxuICBlbmhhbmNlcnM/OiBFIHwgQ29uZmlndXJlRW5oYW5jZXJzQ2FsbGJhY2s8RT5cclxufVxyXG5cclxudHlwZSBNaWRkbGV3YXJlczxTPiA9IFJlYWRvbmx5QXJyYXk8TWlkZGxld2FyZTx7fSwgUz4+XHJcblxyXG50eXBlIEVuaGFuY2VycyA9IFJlYWRvbmx5QXJyYXk8U3RvcmVFbmhhbmNlcj5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9vbGtpdFN0b3JlPFxyXG4gIFMgPSBhbnksXHJcbiAgQSBleHRlbmRzIEFjdGlvbiA9IEFueUFjdGlvbixcclxuICBNIGV4dGVuZHMgTWlkZGxld2FyZXM8Uz4gPSBNaWRkbGV3YXJlczxTPlxyXG4+IGV4dGVuZHMgU3RvcmU8UywgQT4ge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBgZGlzcGF0Y2hgIG1ldGhvZCBvZiB5b3VyIHN0b3JlLCBlbmhhbmNlZCBieSBhbGwgaXRzIG1pZGRsZXdhcmVzLlxyXG4gICAqXHJcbiAgICogQGluaGVyaXRkb2NcclxuICAgKi9cclxuICBkaXNwYXRjaDogRXh0cmFjdERpc3BhdGNoRXh0ZW5zaW9uczxNPiAmIERpc3BhdGNoPEE+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFJlZHV4IHN0b3JlIHJldHVybmVkIGJ5IGBjb25maWd1cmVTdG9yZSgpYC4gU3VwcG9ydHMgZGlzcGF0Y2hpbmdcclxuICogc2lkZS1lZmZlY3RmdWwgX3RodW5rc18gaW4gYWRkaXRpb24gdG8gcGxhaW4gYWN0aW9ucy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgRW5oYW5jZWRTdG9yZTxcclxuICBTID0gYW55LFxyXG4gIEEgZXh0ZW5kcyBBY3Rpb24gPSBBbnlBY3Rpb24sXHJcbiAgTSBleHRlbmRzIE1pZGRsZXdhcmVzPFM+ID0gTWlkZGxld2FyZXM8Uz4sXHJcbiAgRSBleHRlbmRzIEVuaGFuY2VycyA9IEVuaGFuY2Vyc1xyXG4+ID0gVG9vbGtpdFN0b3JlPFMgJiBFeHRyYWN0U3RhdGVFeHRlbnNpb25zPEU+LCBBLCBNPiAmXHJcbiAgRXh0cmFjdFN0b3JlRXh0ZW5zaW9uczxFPlxyXG5cclxuLyoqXHJcbiAqIEEgZnJpZW5kbHkgYWJzdHJhY3Rpb24gb3ZlciB0aGUgc3RhbmRhcmQgUmVkdXggYGNyZWF0ZVN0b3JlKClgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgc3RvcmUgY29uZmlndXJhdGlvbi5cclxuICogQHJldHVybnMgQSBjb25maWd1cmVkIFJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlU3RvcmU8XHJcbiAgUyA9IGFueSxcclxuICBBIGV4dGVuZHMgQWN0aW9uID0gQW55QWN0aW9uLFxyXG4gIE0gZXh0ZW5kcyBNaWRkbGV3YXJlczxTPiA9IFtUaHVua01pZGRsZXdhcmVGb3I8Uz5dLFxyXG4gIEUgZXh0ZW5kcyBFbmhhbmNlcnMgPSBbU3RvcmVFbmhhbmNlcl1cclxuPihvcHRpb25zOiBDb25maWd1cmVTdG9yZU9wdGlvbnM8UywgQSwgTSwgRT4pOiBFbmhhbmNlZFN0b3JlPFMsIEEsIE0sIEU+IHtcclxuICBjb25zdCBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlPFM+KClcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgcmVkdWNlciA9IHVuZGVmaW5lZCxcclxuICAgIG1pZGRsZXdhcmUgPSBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSxcclxuICAgIGRldlRvb2xzID0gdHJ1ZSxcclxuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkLFxyXG4gICAgZW5oYW5jZXJzID0gdW5kZWZpbmVkLFxyXG4gIH0gPSBvcHRpb25zIHx8IHt9XHJcblxyXG4gIGxldCByb290UmVkdWNlcjogUmVkdWNlcjxTLCBBPlxyXG5cclxuICBpZiAodHlwZW9mIHJlZHVjZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHJvb3RSZWR1Y2VyID0gcmVkdWNlclxyXG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcikgYXMgdW5rbm93biBhcyBSZWR1Y2VyPFMsIEE+XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJ1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgbGV0IGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmVcclxuICBpZiAodHlwZW9mIGZpbmFsTWlkZGxld2FyZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgZmluYWxNaWRkbGV3YXJlID0gZmluYWxNaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSlcclxuXHJcbiAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgIUFycmF5LmlzQXJyYXkoZmluYWxNaWRkbGV3YXJlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgJ3doZW4gdXNpbmcgYSBtaWRkbGV3YXJlIGJ1aWxkZXIgZnVuY3Rpb24sIGFuIGFycmF5IG9mIG1pZGRsZXdhcmUgbXVzdCBiZSByZXR1cm5lZCdcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoXHJcbiAgICAhSVNfUFJPRFVDVElPTiAmJlxyXG4gICAgZmluYWxNaWRkbGV3YXJlLnNvbWUoKGl0ZW06IGFueSkgPT4gdHlwZW9mIGl0ZW0gIT09ICdmdW5jdGlvbicpXHJcbiAgKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICdlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uJ1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgbWlkZGxld2FyZUVuaGFuY2VyOiBTdG9yZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlKC4uLmZpbmFsTWlkZGxld2FyZSlcclxuXHJcbiAgbGV0IGZpbmFsQ29tcG9zZSA9IGNvbXBvc2VcclxuXHJcbiAgaWYgKGRldlRvb2xzKSB7XHJcbiAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKHtcclxuICAgICAgLy8gRW5hYmxlIGNhcHR1cmUgb2Ygc3RhY2sgdHJhY2VzIGZvciBkaXNwYXRjaGVkIFJlZHV4IGFjdGlvbnNcclxuICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OLFxyXG4gICAgICAuLi4odHlwZW9mIGRldlRvb2xzID09PSAnb2JqZWN0JyAmJiBkZXZUb29scyksXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZGVmYXVsdEVuaGFuY2VycyA9IG5ldyBFbmhhbmNlckFycmF5KG1pZGRsZXdhcmVFbmhhbmNlcilcclxuICBsZXQgc3RvcmVFbmhhbmNlcnM6IEVuaGFuY2VycyA9IGRlZmF1bHRFbmhhbmNlcnNcclxuXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xyXG4gICAgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyLCAuLi5lbmhhbmNlcnNdXHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhkZWZhdWx0RW5oYW5jZXJzKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZSguLi5zdG9yZUVuaGFuY2VycykgYXMgU3RvcmVFbmhhbmNlcjxhbnk+XHJcblxyXG4gIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpXHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBBY3Rpb24sIEFjdGlvbkNyZWF0b3IsIFN0b3JlRW5oYW5jZXIgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ3JlZHV4J1xyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2VG9vbHNFbmhhbmNlck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIHRoZSBpbnN0YW5jZSBuYW1lIHRvIGJlIHNob3dlZCBvbiB0aGUgbW9uaXRvciBwYWdlLiBEZWZhdWx0IHZhbHVlIGlzIGBkb2N1bWVudC50aXRsZWAuXHJcbiAgICogSWYgbm90IHNwZWNpZmllZCBhbmQgdGhlcmUncyBubyBkb2N1bWVudCB0aXRsZSwgaXQgd2lsbCBjb25zaXN0IG9mIGB0YWJJZGAgYW5kIGBpbnN0YW5jZUlkYC5cclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nXHJcbiAgLyoqXHJcbiAgICogYWN0aW9uIGNyZWF0b3JzIGZ1bmN0aW9ucyB0byBiZSBhdmFpbGFibGUgaW4gdGhlIERpc3BhdGNoZXIuXHJcbiAgICovXHJcbiAgYWN0aW9uQ3JlYXRvcnM/OiBBY3Rpb25DcmVhdG9yPGFueT5bXSB8IHsgW2tleTogc3RyaW5nXTogQWN0aW9uQ3JlYXRvcjxhbnk+IH1cclxuICAvKipcclxuICAgKiBpZiBtb3JlIHRoYW4gb25lIGFjdGlvbiBpcyBkaXNwYXRjaGVkIGluIHRoZSBpbmRpY2F0ZWQgaW50ZXJ2YWwsIGFsbCBuZXcgYWN0aW9ucyB3aWxsIGJlIGNvbGxlY3RlZCBhbmQgc2VudCBhdCBvbmNlLlxyXG4gICAqIEl0IGlzIHRoZSBqb2ludCBiZXR3ZWVuIHBlcmZvcm1hbmNlIGFuZCBzcGVlZC4gV2hlbiBzZXQgdG8gYDBgLCBhbGwgYWN0aW9ucyB3aWxsIGJlIHNlbnQgaW5zdGFudGx5LlxyXG4gICAqIFNldCBpdCB0byBhIGhpZ2hlciB2YWx1ZSB3aGVuIGV4cGVyaWVuY2luZyBwZXJmIGlzc3VlcyAoYWxzbyBgbWF4QWdlYCB0byBhIGxvd2VyIHZhbHVlKS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IDUwMCBtcy5cclxuICAgKi9cclxuICBsYXRlbmN5PzogbnVtYmVyXHJcbiAgLyoqXHJcbiAgICogKD4gMSkgLSBtYXhpbXVtIGFsbG93ZWQgYWN0aW9ucyB0byBiZSBzdG9yZWQgaW4gdGhlIGhpc3RvcnkgdHJlZS4gVGhlIG9sZGVzdCBhY3Rpb25zIGFyZSByZW1vdmVkIG9uY2UgbWF4QWdlIGlzIHJlYWNoZWQuIEl0J3MgY3JpdGljYWwgZm9yIHBlcmZvcm1hbmNlLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgNTBcclxuICAgKi9cclxuICBtYXhBZ2U/OiBudW1iZXJcclxuICAvKipcclxuICAgKiBDdXN0b21pemVzIGhvdyBhY3Rpb25zIGFuZCBzdGF0ZSBhcmUgc2VyaWFsaXplZCBhbmQgZGVzZXJpYWxpemVkLiBDYW4gYmUgYSBib29sZWFuIG9yIG9iamVjdC4gSWYgZ2l2ZW4gYSBib29sZWFuLCB0aGUgYmVoYXZpb3IgaXMgdGhlIHNhbWUgYXMgaWYgeW91XHJcbiAgICogd2VyZSB0byBwYXNzIGFuIG9iamVjdCBhbmQgc3BlY2lmeSBgb3B0aW9uc2AgYXMgYSBib29sZWFuLiBHaXZpbmcgYW4gb2JqZWN0IGFsbG93cyBmaW5lLWdyYWluZWQgY3VzdG9taXphdGlvbiB1c2luZyB0aGUgYHJlcGxhY2VyYCBhbmQgYHJldml2ZXJgXHJcbiAgICogZnVuY3Rpb25zLlxyXG4gICAqL1xyXG4gIHNlcmlhbGl6ZT86XHJcbiAgICB8IGJvb2xlYW5cclxuICAgIHwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gYHVuZGVmaW5lZGAgLSB3aWxsIHVzZSByZWd1bGFyIGBKU09OLnN0cmluZ2lmeWAgdG8gc2VuZCBkYXRhIChpdCdzIHRoZSBmYXN0IG1vZGUpLlxyXG4gICAgICAgICAqIC0gYGZhbHNlYCAtIHdpbGwgaGFuZGxlIGFsc28gY2lyY3VsYXIgcmVmZXJlbmNlcy5cclxuICAgICAgICAgKiAtIGB0cnVlYCAtIHdpbGwgaGFuZGxlIGFsc28gZGF0ZSwgcmVnZXgsIHVuZGVmaW5lZCwgZXJyb3Igb2JqZWN0cywgc3ltYm9scywgbWFwcywgc2V0cyBhbmQgZnVuY3Rpb25zLlxyXG4gICAgICAgICAqIC0gb2JqZWN0LCB3aGljaCBjb250YWlucyBgZGF0ZWAsIGByZWdleGAsIGB1bmRlZmluZWRgLCBgZXJyb3JgLCBgc3ltYm9sYCwgYG1hcGAsIGBzZXRgIGFuZCBgZnVuY3Rpb25gIGtleXMuXHJcbiAgICAgICAgICogICBGb3IgZWFjaCBvZiB0aGVtIHlvdSBjYW4gaW5kaWNhdGUgaWYgdG8gaW5jbHVkZSAoYnkgc2V0dGluZyBhcyBgdHJ1ZWApLlxyXG4gICAgICAgICAqICAgRm9yIGBmdW5jdGlvbmAga2V5IHlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgY3VzdG9tIGZ1bmN0aW9uIHdoaWNoIGhhbmRsZXMgc2VyaWFsaXphdGlvbi5cclxuICAgICAgICAgKiAgIFNlZSBbYGpzYW5gXShodHRwczovL2dpdGh1Yi5jb20va29sb2RueS9qc2FuKSBmb3IgbW9yZSBkZXRhaWxzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wdGlvbnM/OlxyXG4gICAgICAgICAgfCB1bmRlZmluZWRcclxuICAgICAgICAgIHwgYm9vbGVhblxyXG4gICAgICAgICAgfCB7XHJcbiAgICAgICAgICAgICAgZGF0ZT86IHRydWVcclxuICAgICAgICAgICAgICByZWdleD86IHRydWVcclxuICAgICAgICAgICAgICB1bmRlZmluZWQ/OiB0cnVlXHJcbiAgICAgICAgICAgICAgZXJyb3I/OiB0cnVlXHJcbiAgICAgICAgICAgICAgc3ltYm9sPzogdHJ1ZVxyXG4gICAgICAgICAgICAgIG1hcD86IHRydWVcclxuICAgICAgICAgICAgICBzZXQ/OiB0cnVlXHJcbiAgICAgICAgICAgICAgZnVuY3Rpb24/OiB0cnVlIHwgKChmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID0+IHN0cmluZylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFtKU09OIHJlcGxhY2VyIGZ1bmN0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3N0cmluZ2lmeSNUaGVfcmVwbGFjZXJfcGFyYW1ldGVyKSB1c2VkIGZvciBib3RoIGFjdGlvbnMgYW5kIHN0YXRlcyBzdHJpbmdpZnkuXHJcbiAgICAgICAgICogSW4gYWRkaXRpb24sIHlvdSBjYW4gc3BlY2lmeSBhIGRhdGEgdHlwZSBieSBhZGRpbmcgYSBbYF9fc2VyaWFsaXplZFR5cGVfX2BdKGh0dHBzOi8vZ2l0aHViLmNvbS96YWxtb3hpc3VzL3JlbW90ZWRldi1zZXJpYWxpemUvYmxvYi9tYXN0ZXIvaGVscGVycy9pbmRleC5qcyNMNClcclxuICAgICAgICAgKiBrZXkuIFNvIHlvdSBjYW4gZGVzZXJpYWxpemUgaXQgYmFjayB3aGlsZSBpbXBvcnRpbmcgb3IgcGVyc2lzdGluZyBkYXRhLlxyXG4gICAgICAgICAqIE1vcmVvdmVyLCBpdCB3aWxsIGFsc28gW3Nob3cgYSBuaWNlIHByZXZpZXcgc2hvd2luZyB0aGUgcHJvdmlkZWQgY3VzdG9tIHR5cGVdKGh0dHBzOi8vY2xvdWQuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Fzc2V0cy83OTU3ODU5LzIxODE0MzMwL2ExN2Q1NTZhLWQ3NjEtMTFlNi04NWVmLTE1OWRkMTJmMzZjNS5wbmcpOlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlcGxhY2VyPzogKGtleTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bikgPT4gYW55XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogW0pTT04gYHJldml2ZXJgIGZ1bmN0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3BhcnNlI1VzaW5nX3RoZV9yZXZpdmVyX3BhcmFtZXRlcilcclxuICAgICAgICAgKiB1c2VkIGZvciBwYXJzaW5nIHRoZSBpbXBvcnRlZCBhY3Rpb25zIGFuZCBzdGF0ZXMuIFNlZSBbYHJlbW90ZWRldi1zZXJpYWxpemVgXShodHRwczovL2dpdGh1Yi5jb20vemFsbW94aXN1cy9yZW1vdGVkZXYtc2VyaWFsaXplL2Jsb2IvbWFzdGVyL2ltbXV0YWJsZS9zZXJpYWxpemUuanMjTDgtTDQxKVxyXG4gICAgICAgICAqIGFzIGFuIGV4YW1wbGUgb24gaG93IHRvIHNlcmlhbGl6ZSBzcGVjaWFsIGRhdGEgdHlwZXMgYW5kIGdldCB0aGVtIGJhY2suXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV2aXZlcj86IChrZXk6IHN0cmluZywgdmFsdWU6IHVua25vd24pID0+IGFueVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEF1dG9tYXRpY2FsbHkgc2VyaWFsaXplL2Rlc2VyaWFsaXplIGltbXV0YWJsZWpzIHZpYSBbcmVtb3RlZGV2LXNlcmlhbGl6ZV0oaHR0cHM6Ly9naXRodWIuY29tL3phbG1veGlzdXMvcmVtb3RlZGV2LXNlcmlhbGl6ZSkuXHJcbiAgICAgICAgICogSnVzdCBwYXNzIHRoZSBJbW11dGFibGUgbGlicmFyeS4gSXQgd2lsbCBzdXBwb3J0IGFsbCBJbW11dGFibGVKUyBzdHJ1Y3R1cmVzLiBZb3UgY2FuIGV2ZW4gZXhwb3J0IHRoZW0gaW50byBhIGZpbGUgYW5kIGdldCB0aGVtIGJhY2suXHJcbiAgICAgICAgICogVGhlIG9ubHkgZXhjZXB0aW9uIGlzIGBSZWNvcmRgIGNsYXNzLCBmb3Igd2hpY2ggeW91IHNob3VsZCBwYXNzIHRoaXMgaW4gYWRkaXRpb24gdGhlIHJlZmVyZW5jZXMgdG8geW91ciBjbGFzc2VzIGluIGByZWZzYC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbW11dGFibGU/OiBhbnlcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbW11dGFibGVKUyBgUmVjb3JkYCBjbGFzc2VzIHVzZWQgdG8gbWFrZSBwb3NzaWJsZSByZXN0b3JlIGl0cyBpbnN0YW5jZXMgYmFjayB3aGVuIGltcG9ydGluZywgcGVyc2lzdGluZy4uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZnM/OiBhbnlcclxuICAgICAgfVxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGBhY3Rpb25gIG9iamVjdCBhbmQgaWQgbnVtYmVyIGFzIGFyZ3VtZW50cywgYW5kIHNob3VsZCByZXR1cm4gYGFjdGlvbmAgb2JqZWN0IGJhY2suXHJcbiAgICovXHJcbiAgYWN0aW9uU2FuaXRpemVyPzogPEEgZXh0ZW5kcyBBY3Rpb24+KGFjdGlvbjogQSwgaWQ6IG51bWJlcikgPT4gQVxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGBzdGF0ZWAgb2JqZWN0IGFuZCBpbmRleCBhcyBhcmd1bWVudHMsIGFuZCBzaG91bGQgcmV0dXJuIGBzdGF0ZWAgb2JqZWN0IGJhY2suXHJcbiAgICovXHJcbiAgc3RhdGVTYW5pdGl6ZXI/OiA8Uz4oc3RhdGU6IFMsIGluZGV4OiBudW1iZXIpID0+IFNcclxuICAvKipcclxuICAgKiAqc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3MgYXMgcmVnZXgqIC0gYWN0aW9ucyB0eXBlcyB0byBiZSBoaWRkZW4gLyBzaG93biBpbiB0aGUgbW9uaXRvcnMgKHdoaWxlIHBhc3NlZCB0byB0aGUgcmVkdWNlcnMpLlxyXG4gICAqIElmIGBhY3Rpb25zV2hpdGVsaXN0YCBzcGVjaWZpZWQsIGBhY3Rpb25zQmxhY2tsaXN0YCBpcyBpZ25vcmVkLlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBhY3Rpb25zRGVueWxpc3QgaW5zdGVhZC5cclxuICAgKi9cclxuICBhY3Rpb25zQmxhY2tsaXN0Pzogc3RyaW5nIHwgc3RyaW5nW11cclxuICAvKipcclxuICAgKiAqc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3MgYXMgcmVnZXgqIC0gYWN0aW9ucyB0eXBlcyB0byBiZSBoaWRkZW4gLyBzaG93biBpbiB0aGUgbW9uaXRvcnMgKHdoaWxlIHBhc3NlZCB0byB0aGUgcmVkdWNlcnMpLlxyXG4gICAqIElmIGBhY3Rpb25zV2hpdGVsaXN0YCBzcGVjaWZpZWQsIGBhY3Rpb25zQmxhY2tsaXN0YCBpcyBpZ25vcmVkLlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBhY3Rpb25zQWxsb3dsaXN0IGluc3RlYWQuXHJcbiAgICovXHJcbiAgYWN0aW9uc1doaXRlbGlzdD86IHN0cmluZyB8IHN0cmluZ1tdXHJcbiAgLyoqXHJcbiAgICogKnN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIGFzIHJlZ2V4KiAtIGFjdGlvbnMgdHlwZXMgdG8gYmUgaGlkZGVuIC8gc2hvd24gaW4gdGhlIG1vbml0b3JzICh3aGlsZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXJzKS5cclxuICAgKiBJZiBgYWN0aW9uc0FsbG93bGlzdGAgc3BlY2lmaWVkLCBgYWN0aW9uc0RlbnlsaXN0YCBpcyBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIGFjdGlvbnNEZW55bGlzdD86IHN0cmluZyB8IHN0cmluZ1tdXHJcbiAgLyoqXHJcbiAgICogKnN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIGFzIHJlZ2V4KiAtIGFjdGlvbnMgdHlwZXMgdG8gYmUgaGlkZGVuIC8gc2hvd24gaW4gdGhlIG1vbml0b3JzICh3aGlsZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXJzKS5cclxuICAgKiBJZiBgYWN0aW9uc0FsbG93bGlzdGAgc3BlY2lmaWVkLCBgYWN0aW9uc0RlbnlsaXN0YCBpcyBpZ25vcmVkLlxyXG4gICAqL1xyXG4gIGFjdGlvbnNBbGxvd2xpc3Q/OiBzdHJpbmcgfCBzdHJpbmdbXVxyXG4gIC8qKlxyXG4gICAqIGNhbGxlZCBmb3IgZXZlcnkgYWN0aW9uIGJlZm9yZSBzZW5kaW5nLCB0YWtlcyBgc3RhdGVgIGFuZCBgYWN0aW9uYCBvYmplY3QsIGFuZCByZXR1cm5zIGB0cnVlYCBpbiBjYXNlIGl0IGFsbG93cyBzZW5kaW5nIHRoZSBjdXJyZW50IGRhdGEgdG8gdGhlIG1vbml0b3IuXHJcbiAgICogVXNlIGl0IGFzIGEgbW9yZSBhZHZhbmNlZCB2ZXJzaW9uIG9mIGBhY3Rpb25zRGVueWxpc3RgL2BhY3Rpb25zQWxsb3dsaXN0YCBwYXJhbWV0ZXJzLlxyXG4gICAqL1xyXG4gIHByZWRpY2F0ZT86IDxTLCBBIGV4dGVuZHMgQWN0aW9uPihzdGF0ZTogUywgYWN0aW9uOiBBKSA9PiBib29sZWFuXHJcbiAgLyoqXHJcbiAgICogaWYgc3BlY2lmaWVkIGFzIGBmYWxzZWAsIGl0IHdpbGwgbm90IHJlY29yZCB0aGUgY2hhbmdlcyB0aWxsIGNsaWNraW5nIG9uIGBTdGFydCByZWNvcmRpbmdgIGJ1dHRvbi5cclxuICAgKiBBdmFpbGFibGUgb25seSBmb3IgUmVkdXggZW5oYW5jZXIsIGZvciBvdGhlcnMgdXNlIGBhdXRvUGF1c2VgLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgdHJ1ZVxyXG4gICAqL1xyXG4gIHNob3VsZFJlY29yZENoYW5nZXM/OiBib29sZWFuXHJcbiAgLyoqXHJcbiAgICogaWYgc3BlY2lmaWVkLCB3aGVuZXZlciBjbGlja2luZyBvbiBgUGF1c2UgcmVjb3JkaW5nYCBidXR0b24gYW5kIHRoZXJlIGFyZSBhY3Rpb25zIGluIHRoZSBoaXN0b3J5IGxvZywgd2lsbCBhZGQgdGhpcyBhY3Rpb24gdHlwZS5cclxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB3aWxsIGNvbW1pdCB3aGVuIHBhdXNlZC4gQXZhaWxhYmxlIG9ubHkgZm9yIFJlZHV4IGVuaGFuY2VyLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgXCJAQFBBVVNFRFwiXCJcclxuICAgKi9cclxuICBwYXVzZUFjdGlvblR5cGU/OiBzdHJpbmdcclxuICAvKipcclxuICAgKiBhdXRvIHBhdXNlcyB3aGVuIHRoZSBleHRlbnNpb27igJlzIHdpbmRvdyBpcyBub3Qgb3BlbmVkLCBhbmQgc28gaGFzIHplcm8gaW1wYWN0IG9uIHlvdXIgYXBwIHdoZW4gbm90IGluIHVzZS5cclxuICAgKiBOb3QgYXZhaWxhYmxlIGZvciBSZWR1eCBlbmhhbmNlciAoYXMgaXQgYWxyZWFkeSBkb2VzIGl0IGJ1dCBzdG9yaW5nIHRoZSBkYXRhIHRvIGJlIHNlbnQpLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgKi9cclxuICBhdXRvUGF1c2U/OiBib29sZWFuXHJcbiAgLyoqXHJcbiAgICogaWYgc3BlY2lmaWVkIGFzIGB0cnVlYCwgaXQgd2lsbCBub3QgYWxsb3cgYW55IG5vbi1tb25pdG9yIGFjdGlvbnMgdG8gYmUgZGlzcGF0Y2hlZCB0aWxsIGNsaWNraW5nIG9uIGBVbmxvY2sgY2hhbmdlc2AgYnV0dG9uLlxyXG4gICAqIEF2YWlsYWJsZSBvbmx5IGZvciBSZWR1eCBlbmhhbmNlci5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGZhbHNlXHJcbiAgICovXHJcbiAgc2hvdWxkU3RhcnRMb2NrZWQ/OiBib29sZWFuXHJcbiAgLyoqXHJcbiAgICogaWYgc2V0IHRvIGBmYWxzZWAsIHdpbGwgbm90IHJlY29tcHV0ZSB0aGUgc3RhdGVzIG9uIGhvdCByZWxvYWRpbmcgKG9yIG9uIHJlcGxhY2luZyB0aGUgcmVkdWNlcnMpLiBBdmFpbGFibGUgb25seSBmb3IgUmVkdXggZW5oYW5jZXIuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICovXHJcbiAgc2hvdWxkSG90UmVsb2FkPzogYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIGlmIHNwZWNpZmllZCBhcyBgdHJ1ZWAsIHdoZW5ldmVyIHRoZXJlJ3MgYW4gZXhjZXB0aW9uIGluIHJlZHVjZXJzLCB0aGUgbW9uaXRvcnMgd2lsbCBzaG93IHRoZSBlcnJvciBtZXNzYWdlLCBhbmQgbmV4dCBhY3Rpb25zIHdpbGwgbm90IGJlIGRpc3BhdGNoZWQuXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAqL1xyXG4gIHNob3VsZENhdGNoRXJyb3JzPzogYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIElmIHlvdSB3YW50IHRvIHJlc3RyaWN0IHRoZSBleHRlbnNpb24sIHNwZWNpZnkgdGhlIGZlYXR1cmVzIHlvdSBhbGxvdy5cclxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCBhbGwgb2YgdGhlIGZlYXR1cmVzIGFyZSBlbmFibGVkLiBXaGVuIHNldCBhcyBhbiBvYmplY3QsIG9ubHkgdGhvc2UgaW5jbHVkZWQgYXMgYHRydWVgIHdpbGwgYmUgYWxsb3dlZC5cclxuICAgKiBOb3RlIHRoYXQgZXhjZXB0IGB0cnVlYC9gZmFsc2VgLCBgaW1wb3J0YCBhbmQgYGV4cG9ydGAgY2FuIGJlIHNldCBhcyBgY3VzdG9tYCAod2hpY2ggaXMgYnkgZGVmYXVsdCBmb3IgUmVkdXggZW5oYW5jZXIpLCBtZWFuaW5nIHRoYXQgdGhlIGltcG9ydGluZy9leHBvcnRpbmcgb2NjdXJzIG9uIHRoZSBjbGllbnQgc2lkZS5cclxuICAgKiBPdGhlcndpc2UsIHlvdSdsbCBnZXQvc2V0IHRoZSBkYXRhIHJpZ2h0IGZyb20gdGhlIG1vbml0b3IgcGFydC5cclxuICAgKi9cclxuICBmZWF0dXJlcz86IHtcclxuICAgIC8qKlxyXG4gICAgICogc3RhcnQvcGF1c2UgcmVjb3JkaW5nIG9mIGRpc3BhdGNoZWQgYWN0aW9uc1xyXG4gICAgICovXHJcbiAgICBwYXVzZT86IGJvb2xlYW5cclxuICAgIC8qKlxyXG4gICAgICogbG9jay91bmxvY2sgZGlzcGF0Y2hpbmcgYWN0aW9ucyBhbmQgc2lkZSBlZmZlY3RzXHJcbiAgICAgKi9cclxuICAgIGxvY2s/OiBib29sZWFuXHJcbiAgICAvKipcclxuICAgICAqIHBlcnNpc3Qgc3RhdGVzIG9uIHBhZ2UgcmVsb2FkaW5nXHJcbiAgICAgKi9cclxuICAgIHBlcnNpc3Q/OiBib29sZWFuXHJcbiAgICAvKipcclxuICAgICAqIGV4cG9ydCBoaXN0b3J5IG9mIGFjdGlvbnMgaW4gYSBmaWxlXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydD86IGJvb2xlYW4gfCAnY3VzdG9tJ1xyXG4gICAgLyoqXHJcbiAgICAgKiBpbXBvcnQgaGlzdG9yeSBvZiBhY3Rpb25zIGZyb20gYSBmaWxlXHJcbiAgICAgKi9cclxuICAgIGltcG9ydD86IGJvb2xlYW4gfCAnY3VzdG9tJ1xyXG4gICAgLyoqXHJcbiAgICAgKiBqdW1wIGJhY2sgYW5kIGZvcnRoICh0aW1lIHRyYXZlbGxpbmcpXHJcbiAgICAgKi9cclxuICAgIGp1bXA/OiBib29sZWFuXHJcbiAgICAvKipcclxuICAgICAqIHNraXAgKGNhbmNlbCkgYWN0aW9uc1xyXG4gICAgICovXHJcbiAgICBza2lwPzogYm9vbGVhblxyXG4gICAgLyoqXHJcbiAgICAgKiBkcmFnIGFuZCBkcm9wIGFjdGlvbnMgaW4gdGhlIGhpc3RvcnkgbGlzdFxyXG4gICAgICovXHJcbiAgICByZW9yZGVyPzogYm9vbGVhblxyXG4gICAgLyoqXHJcbiAgICAgKiBkaXNwYXRjaCBjdXN0b20gYWN0aW9ucyBvciBhY3Rpb24gY3JlYXRvcnNcclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2g/OiBib29sZWFuXHJcbiAgICAvKipcclxuICAgICAqIGdlbmVyYXRlIHRlc3RzIGZvciB0aGUgc2VsZWN0ZWQgYWN0aW9uc1xyXG4gICAgICovXHJcbiAgICB0ZXN0PzogYm9vbGVhblxyXG4gIH1cclxuICAvKipcclxuICAgKiBTZXQgdG8gdHJ1ZSBvciBhIHN0YWNrdHJhY2UtcmV0dXJuaW5nIGZ1bmN0aW9uIHRvIHJlY29yZCBjYWxsIHN0YWNrIHRyYWNlcyBmb3IgZGlzcGF0Y2hlZCBhY3Rpb25zLlxyXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLlxyXG4gICAqL1xyXG4gIHRyYWNlPzogYm9vbGVhbiB8ICg8QSBleHRlbmRzIEFjdGlvbj4oYWN0aW9uOiBBKSA9PiBzdHJpbmcpXHJcbiAgLyoqXHJcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHN0YWNrIHRyYWNlIGVudHJpZXMgdG8gcmVjb3JkIHBlciBhY3Rpb24uIERlZmF1bHRzIHRvIDEwLlxyXG4gICAqL1xyXG4gIHRyYWNlTGltaXQ/OiBudW1iZXJcclxufVxyXG5cclxudHlwZSBDb21wb3NlID0gdHlwZW9mIGNvbXBvc2VcclxuXHJcbmludGVyZmFjZSBDb21wb3NlV2l0aERldlRvb2xzIHtcclxuICAob3B0aW9uczogRGV2VG9vbHNFbmhhbmNlck9wdGlvbnMpOiBDb21wb3NlXHJcbiAgPFN0b3JlRXh0PiguLi5mdW5jczogU3RvcmVFbmhhbmNlcjxTdG9yZUV4dD5bXSk6IFN0b3JlRW5oYW5jZXI8U3RvcmVFeHQ+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29tcG9zZVdpdGhEZXZUb29sczogQ29tcG9zZVdpdGhEZXZUb29scyA9XHJcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fXHJcbiAgICA/ICh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX19cclxuICAgIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSByZXR1cm4gY29tcG9zZVxyXG4gICAgICAgIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyBhcyBhbnkgYXMgRnVuY3Rpb25bXSlcclxuICAgICAgfVxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBjb25zdCBkZXZUb29sc0VuaGFuY2VyOiB7XHJcbiAgKG9wdGlvbnM6IERldlRvb2xzRW5oYW5jZXJPcHRpb25zKTogU3RvcmVFbmhhbmNlcjxhbnk+XHJcbn0gPVxyXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fXHJcbiAgICA/ICh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fXHJcbiAgICA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5vb3ApIHtcclxuICAgICAgICAgIHJldHVybiBub29wXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiIsIi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhc3NlZCB2YWx1ZSBpcyBcInBsYWluXCIgb2JqZWN0LCBpLmUuIGFuIG9iamVjdCB3aG9zZVxyXG4gKiBwcm90b3R5cGUgaXMgdGhlIHJvb3QgYE9iamVjdC5wcm90b3R5cGVgLiBUaGlzIGluY2x1ZGVzIG9iamVjdHMgY3JlYXRlZFxyXG4gKiB1c2luZyBvYmplY3QgbGl0ZXJhbHMsIGJ1dCBub3QgZm9yIGluc3RhbmNlIGZvciBjbGFzcyBpbnN0YW5jZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBvYmplY3Qge1xyXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKVxyXG4gIGlmIChwcm90byA9PT0gbnVsbCkgcmV0dXJuIHRydWVcclxuXHJcbiAgbGV0IGJhc2VQcm90byA9IHByb3RvXHJcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pICE9PSBudWxsKSB7XHJcbiAgICBiYXNlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHByb3RvID09PSBiYXNlUHJvdG9cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE1pZGRsZXdhcmUsIEFueUFjdGlvbiB9IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgdHlwZSB7IFRodW5rTWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJ1xyXG5pbXBvcnQgdHlwZSB7IEltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnMgfSBmcm9tICcuL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSdcclxuLyogUFJPRF9TVEFSVF9SRU1PVkVfVU1EICovXHJcbmltcG9ydCB7IGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSB9IGZyb20gJy4vaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG4vKiBQUk9EX1NUT1BfUkVNT1ZFX1VNRCAqL1xyXG5cclxuaW1wb3J0IHR5cGUgeyBTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zIH0gZnJvbSAnLi9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnXHJcbmltcG9ydCB7IGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSB9IGZyb20gJy4vc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG5pbXBvcnQgdHlwZSB7IEV4Y2x1ZGVGcm9tVHVwbGUgfSBmcm9tICcuL3RzSGVscGVycydcclxuaW1wb3J0IHsgTWlkZGxld2FyZUFycmF5IH0gZnJvbSAnLi91dGlscydcclxuXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4OiBhbnkpOiB4IGlzIGJvb2xlYW4ge1xyXG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nXHJcbn1cclxuXHJcbmludGVyZmFjZSBUaHVua09wdGlvbnM8RSA9IGFueT4ge1xyXG4gIGV4dHJhQXJndW1lbnQ6IEVcclxufVxyXG5cclxuaW50ZXJmYWNlIEdldERlZmF1bHRNaWRkbGV3YXJlT3B0aW9ucyB7XHJcbiAgdGh1bms/OiBib29sZWFuIHwgVGh1bmtPcHRpb25zXHJcbiAgaW1tdXRhYmxlQ2hlY2s/OiBib29sZWFuIHwgSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlT3B0aW9uc1xyXG4gIHNlcmlhbGl6YWJsZUNoZWNrPzogYm9vbGVhbiB8IFNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnNcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVGh1bmtNaWRkbGV3YXJlRm9yPFxyXG4gIFMsXHJcbiAgTyBleHRlbmRzIEdldERlZmF1bHRNaWRkbGV3YXJlT3B0aW9ucyA9IHt9XHJcbj4gPSBPIGV4dGVuZHMge1xyXG4gIHRodW5rOiBmYWxzZVxyXG59XHJcbiAgPyBuZXZlclxyXG4gIDogTyBleHRlbmRzIHsgdGh1bms6IHsgZXh0cmFBcmd1bWVudDogaW5mZXIgRSB9IH1cclxuICA/IFRodW5rTWlkZGxld2FyZTxTLCBBbnlBY3Rpb24sIEU+XHJcbiAgOiBUaHVua01pZGRsZXdhcmU8UywgQW55QWN0aW9uPlxyXG5cclxuZXhwb3J0IHR5cGUgQ3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlPFMgPSBhbnk+ID0gPFxyXG4gIE8gZXh0ZW5kcyBQYXJ0aWFsPEdldERlZmF1bHRNaWRkbGV3YXJlT3B0aW9ucz4gPSB7XHJcbiAgICB0aHVuazogdHJ1ZVxyXG4gICAgaW1tdXRhYmxlQ2hlY2s6IHRydWVcclxuICAgIHNlcmlhbGl6YWJsZUNoZWNrOiB0cnVlXHJcbiAgfVxyXG4+KFxyXG4gIG9wdGlvbnM/OiBPXHJcbikgPT4gTWlkZGxld2FyZUFycmF5PEV4Y2x1ZGVGcm9tVHVwbGU8W1RodW5rTWlkZGxld2FyZUZvcjxTLCBPPl0sIG5ldmVyPj5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlPFxyXG4gIFMgPSBhbnlcclxuPigpOiBDdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmU8Uz4ge1xyXG4gIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbnkgYXJyYXkgY29udGFpbmluZyB0aGUgZGVmYXVsdCBtaWRkbGV3YXJlIGluc3RhbGxlZCBieVxyXG4gKiBgY29uZmlndXJlU3RvcmUoKWAuIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBjb25maWd1cmUgeW91ciBzdG9yZSB3aXRoIGEgY3VzdG9tXHJcbiAqIGBtaWRkbGV3YXJlYCBhcnJheSBidXQgc3RpbGwga2VlcCB0aGUgZGVmYXVsdCBzZXQuXHJcbiAqXHJcbiAqIEByZXR1cm4gVGhlIGRlZmF1bHQgbWlkZGxld2FyZSB1c2VkIGJ5IGBjb25maWd1cmVTdG9yZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgdG8gdXNlIHRoZSBjYWxsYmFjayBub3RhdGlvbiBmb3IgdGhlIGBtaWRkbGV3YXJlYCBvcHRpb24gaW4gYGNvbmZpZ3VyZVN0b3JlYFxyXG4gKiB0byBhY2Nlc3MgYSBwcmUtdHlwZWQgYGdldERlZmF1bHRNaWRkbGV3YXJlYCBpbnN0ZWFkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlPFxyXG4gIFMgPSBhbnksXHJcbiAgTyBleHRlbmRzIFBhcnRpYWw8R2V0RGVmYXVsdE1pZGRsZXdhcmVPcHRpb25zPiA9IHtcclxuICAgIHRodW5rOiB0cnVlXHJcbiAgICBpbW11dGFibGVDaGVjazogdHJ1ZVxyXG4gICAgc2VyaWFsaXphYmxlQ2hlY2s6IHRydWVcclxuICB9XHJcbj4oXHJcbiAgb3B0aW9uczogTyA9IHt9IGFzIE9cclxuKTogTWlkZGxld2FyZUFycmF5PEV4Y2x1ZGVGcm9tVHVwbGU8W1RodW5rTWlkZGxld2FyZUZvcjxTLCBPPl0sIG5ldmVyPj4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHRodW5rID0gdHJ1ZSxcclxuICAgIGltbXV0YWJsZUNoZWNrID0gdHJ1ZSxcclxuICAgIHNlcmlhbGl6YWJsZUNoZWNrID0gdHJ1ZSxcclxuICB9ID0gb3B0aW9uc1xyXG5cclxuICBsZXQgbWlkZGxld2FyZUFycmF5ID0gbmV3IE1pZGRsZXdhcmVBcnJheTxNaWRkbGV3YXJlW10+KClcclxuXHJcbiAgaWYgKHRodW5rKSB7XHJcbiAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChcclxuICAgICAgICB0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudClcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIGlmIChpbW11dGFibGVDaGVjaykge1xyXG4gICAgICAvKiBQUk9EX1NUQVJUX1JFTU9WRV9VTUQgKi9cclxuICAgICAgbGV0IGltbXV0YWJsZU9wdGlvbnM6IEltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZU9wdGlvbnMgPSB7fVxyXG5cclxuICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KFxyXG4gICAgICAgIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKVxyXG4gICAgICApXHJcbiAgICAgIC8qIFBST0RfU1RPUF9SRU1PVkVfVU1EICovXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XHJcbiAgICAgIGxldCBzZXJpYWxpemFibGVPcHRpb25zOiBTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zID0ge31cclxuXHJcbiAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xyXG4gICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVja1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChcclxuICAgICAgICBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucylcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheSBhcyBhbnlcclxufVxyXG4iLCJpbXBvcnQgY3JlYXRlTmV4dFN0YXRlLCB7IGlzRHJhZnRhYmxlIH0gZnJvbSAnaW1tZXInXHJcbmltcG9ydCB0eXBlIHsgTWlkZGxld2FyZSwgU3RvcmVFbmhhbmNlciB9IGZyb20gJ3JlZHV4J1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVNZWFzdXJlVXRpbHMobWF4RGVsYXk6IG51bWJlciwgZm5OYW1lOiBzdHJpbmcpIHtcclxuICBsZXQgZWxhcHNlZCA9IDBcclxuICByZXR1cm4ge1xyXG4gICAgbWVhc3VyZVRpbWU8VD4oZm46ICgpID0+IFQpOiBUIHtcclxuICAgICAgY29uc3Qgc3RhcnRlZCA9IERhdGUubm93KClcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZm4oKVxyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIGNvbnN0IGZpbmlzaGVkID0gRGF0ZS5ub3coKVxyXG4gICAgICAgIGVsYXBzZWQgKz0gZmluaXNoZWQgLSBzdGFydGVkXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB3YXJuSWZFeGNlZWRlZCgpIHtcclxuICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgJHtmbk5hbWV9IHRvb2sgJHtlbGFwc2VkfW1zLCB3aGljaCBpcyBtb3JlIHRoYW4gdGhlIHdhcm5pbmcgdGhyZXNob2xkIG9mICR7bWF4RGVsYXl9bXMuIFxyXG5JZiB5b3VyIHN0YXRlIG9yIGFjdGlvbnMgYXJlIHZlcnkgbGFyZ2UsIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoZSBtaWRkbGV3YXJlIGFzIGl0IG1pZ2h0IGNhdXNlIHRvbyBtdWNoIG9mIGEgc2xvd2Rvd24gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlIGZvciBpbnN0cnVjdGlvbnMuXHJcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LmApXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkobXM6IG51bWJlcikge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWlkZGxld2FyZUFycmF5PFxyXG4gIE1pZGRsZXdhcmVzIGV4dGVuZHMgTWlkZGxld2FyZTxhbnksIGFueT5bXVxyXG4+IGV4dGVuZHMgQXJyYXk8TWlkZGxld2FyZXNbbnVtYmVyXT4ge1xyXG4gIGNvbnN0cnVjdG9yKC4uLml0ZW1zOiBNaWRkbGV3YXJlcylcclxuICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgc3VwZXIoLi4uYXJncylcclxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkge1xyXG4gICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheSBhcyBhbnlcclxuICB9XHJcblxyXG4gIGNvbmNhdDxBZGRpdGlvbmFsTWlkZGxld2FyZXMgZXh0ZW5kcyBSZWFkb25seUFycmF5PE1pZGRsZXdhcmU8YW55LCBhbnk+Pj4oXHJcbiAgICBpdGVtczogQWRkaXRpb25hbE1pZGRsZXdhcmVzXHJcbiAgKTogTWlkZGxld2FyZUFycmF5PFsuLi5NaWRkbGV3YXJlcywgLi4uQWRkaXRpb25hbE1pZGRsZXdhcmVzXT5cclxuXHJcbiAgY29uY2F0PEFkZGl0aW9uYWxNaWRkbGV3YXJlcyBleHRlbmRzIFJlYWRvbmx5QXJyYXk8TWlkZGxld2FyZTxhbnksIGFueT4+PihcclxuICAgIC4uLml0ZW1zOiBBZGRpdGlvbmFsTWlkZGxld2FyZXNcclxuICApOiBNaWRkbGV3YXJlQXJyYXk8Wy4uLk1pZGRsZXdhcmVzLCAuLi5BZGRpdGlvbmFsTWlkZGxld2FyZXNdPlxyXG4gIGNvbmNhdCguLi5hcnI6IGFueVtdKSB7XHJcbiAgICByZXR1cm4gc3VwZXIuY29uY2F0LmFwcGx5KHRoaXMsIGFycilcclxuICB9XHJcblxyXG4gIHByZXBlbmQ8QWRkaXRpb25hbE1pZGRsZXdhcmVzIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxNaWRkbGV3YXJlPGFueSwgYW55Pj4+KFxyXG4gICAgaXRlbXM6IEFkZGl0aW9uYWxNaWRkbGV3YXJlc1xyXG4gICk6IE1pZGRsZXdhcmVBcnJheTxbLi4uQWRkaXRpb25hbE1pZGRsZXdhcmVzLCAuLi5NaWRkbGV3YXJlc10+XHJcblxyXG4gIHByZXBlbmQ8QWRkaXRpb25hbE1pZGRsZXdhcmVzIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxNaWRkbGV3YXJlPGFueSwgYW55Pj4+KFxyXG4gICAgLi4uaXRlbXM6IEFkZGl0aW9uYWxNaWRkbGV3YXJlc1xyXG4gICk6IE1pZGRsZXdhcmVBcnJheTxbLi4uQWRkaXRpb25hbE1pZGRsZXdhcmVzLCAuLi5NaWRkbGV3YXJlc10+XHJcblxyXG4gIHByZXBlbmQoLi4uYXJyOiBhbnlbXSkge1xyXG4gICAgaWYgKGFyci5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWlkZGxld2FyZUFycmF5KC4uLmFyclswXS5jb25jYXQodGhpcykpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE1pZGRsZXdhcmVBcnJheSguLi5hcnIuY29uY2F0KHRoaXMpKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFbmhhbmNlckFycmF5PFxyXG4gIEVuaGFuY2VycyBleHRlbmRzIFN0b3JlRW5oYW5jZXI8YW55LCBhbnk+W11cclxuPiBleHRlbmRzIEFycmF5PEVuaGFuY2Vyc1tudW1iZXJdPiB7XHJcbiAgY29uc3RydWN0b3IoLi4uaXRlbXM6IEVuaGFuY2VycylcclxuICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgc3VwZXIoLi4uYXJncylcclxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBFbmhhbmNlckFycmF5LnByb3RvdHlwZSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHtcclxuICAgIHJldHVybiBFbmhhbmNlckFycmF5IGFzIGFueVxyXG4gIH1cclxuXHJcbiAgY29uY2F0PEFkZGl0aW9uYWxFbmhhbmNlcnMgZXh0ZW5kcyBSZWFkb25seUFycmF5PFN0b3JlRW5oYW5jZXI8YW55LCBhbnk+Pj4oXHJcbiAgICBpdGVtczogQWRkaXRpb25hbEVuaGFuY2Vyc1xyXG4gICk6IEVuaGFuY2VyQXJyYXk8Wy4uLkVuaGFuY2VycywgLi4uQWRkaXRpb25hbEVuaGFuY2Vyc10+XHJcblxyXG4gIGNvbmNhdDxBZGRpdGlvbmFsRW5oYW5jZXJzIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxTdG9yZUVuaGFuY2VyPGFueSwgYW55Pj4+KFxyXG4gICAgLi4uaXRlbXM6IEFkZGl0aW9uYWxFbmhhbmNlcnNcclxuICApOiBFbmhhbmNlckFycmF5PFsuLi5FbmhhbmNlcnMsIC4uLkFkZGl0aW9uYWxFbmhhbmNlcnNdPlxyXG4gIGNvbmNhdCguLi5hcnI6IGFueVtdKSB7XHJcbiAgICByZXR1cm4gc3VwZXIuY29uY2F0LmFwcGx5KHRoaXMsIGFycilcclxuICB9XHJcblxyXG4gIHByZXBlbmQ8QWRkaXRpb25hbEVuaGFuY2VycyBleHRlbmRzIFJlYWRvbmx5QXJyYXk8U3RvcmVFbmhhbmNlcjxhbnksIGFueT4+PihcclxuICAgIGl0ZW1zOiBBZGRpdGlvbmFsRW5oYW5jZXJzXHJcbiAgKTogRW5oYW5jZXJBcnJheTxbLi4uQWRkaXRpb25hbEVuaGFuY2VycywgLi4uRW5oYW5jZXJzXT5cclxuXHJcbiAgcHJlcGVuZDxBZGRpdGlvbmFsRW5oYW5jZXJzIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxTdG9yZUVuaGFuY2VyPGFueSwgYW55Pj4+KFxyXG4gICAgLi4uaXRlbXM6IEFkZGl0aW9uYWxFbmhhbmNlcnNcclxuICApOiBFbmhhbmNlckFycmF5PFsuLi5BZGRpdGlvbmFsRW5oYW5jZXJzLCAuLi5FbmhhbmNlcnNdPlxyXG5cclxuICBwcmVwZW5kKC4uLmFycjogYW55W10pIHtcclxuICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xyXG4gICAgICByZXR1cm4gbmV3IEVuaGFuY2VyQXJyYXkoLi4uYXJyWzBdLmNvbmNhdCh0aGlzKSlcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgRW5oYW5jZXJBcnJheSguLi5hcnIuY29uY2F0KHRoaXMpKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZyZWV6ZURyYWZ0YWJsZTxUPih2YWw6IFQpIHtcclxuICByZXR1cm4gaXNEcmFmdGFibGUodmFsKSA/IGNyZWF0ZU5leHRTdGF0ZSh2YWwsICgpID0+IHt9KSA6IHZhbFxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgTWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgeyBnZXRUaW1lTWVhc3VyZVV0aWxzIH0gZnJvbSAnLi91dGlscydcclxuXHJcbnR5cGUgRW50cnlQcm9jZXNzb3IgPSAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IGFueVxyXG5cclxuY29uc3QgaXNQcm9kdWN0aW9uOiBib29sZWFuID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xyXG5jb25zdCBwcmVmaXg6IHN0cmluZyA9ICdJbnZhcmlhbnQgZmFpbGVkJ1xyXG5cclxuLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlIGNvbmRpdGlvbiBmYWlsc1xyXG4vLyBTdHJpcCBvdXQgZXJyb3IgbWVzc2FnZXMgZm9yIHByb2R1Y3Rpb25cclxuLy8gPiBOb3QgcHJvdmlkaW5nIGFuIGlubGluZSBkZWZhdWx0IGFyZ3VtZW50IGZvciBtZXNzYWdlIGFzIHRoZSByZXN1bHQgaXMgc21hbGxlclxyXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uOiBhbnksIG1lc3NhZ2U/OiBzdHJpbmcpIHtcclxuICBpZiAoY29uZGl0aW9uKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgLy8gQ29uZGl0aW9uIG5vdCBwYXNzZWRcclxuXHJcbiAgLy8gSW4gcHJvZHVjdGlvbiB3ZSBzdHJpcCB0aGUgbWVzc2FnZSBidXQgc3RpbGwgdGhyb3dcclxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KVxyXG4gIH1cclxuXHJcbiAgLy8gV2hlbiBub3QgaW4gcHJvZHVjdGlvbiB3ZSBhbGxvdyB0aGUgbWVzc2FnZSB0byBwYXNzIHRocm91Z2hcclxuICAvLyAqVGhpcyBibG9jayB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMqXHJcbiAgdGhyb3cgbmV3IEVycm9yKGAke3ByZWZpeH06ICR7bWVzc2FnZSB8fCAnJ31gKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdHJpbmdpZnkoXHJcbiAgb2JqOiBhbnksXHJcbiAgc2VyaWFsaXplcj86IEVudHJ5UHJvY2Vzc29yLFxyXG4gIGluZGVudD86IHN0cmluZyB8IG51bWJlcixcclxuICBkZWN5Y2xlcj86IEVudHJ5UHJvY2Vzc29yXHJcbik6IHN0cmluZyB7XHJcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoXHJcbiAgc2VyaWFsaXplcj86IEVudHJ5UHJvY2Vzc29yLFxyXG4gIGRlY3ljbGVyPzogRW50cnlQcm9jZXNzb3JcclxuKTogRW50cnlQcm9jZXNzb3Ige1xyXG4gIGxldCBzdGFjazogYW55W10gPSBbXSxcclxuICAgIGtleXM6IGFueVtdID0gW11cclxuXHJcbiAgaWYgKCFkZWN5Y2xlcilcclxuICAgIGRlY3ljbGVyID0gZnVuY3Rpb24gKF86IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKSByZXR1cm4gJ1tDaXJjdWxhciB+XSdcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICAnW0NpcmN1bGFyIH4uJyArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oJy4nKSArICddJ1xyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAodGhpczogYW55LCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpXHJcbiAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcylcclxuICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpXHJcbiAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHZhbHVlID0gZGVjeWNsZXIhLmNhbGwodGhpcywga2V5LCB2YWx1ZSlcclxuICAgIH0gZWxzZSBzdGFjay5wdXNoKHZhbHVlKVxyXG5cclxuICAgIHJldHVybiBzZXJpYWxpemVyID09IG51bGwgPyB2YWx1ZSA6IHNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGBpc0ltbXV0YWJsZWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcclxuICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5pc0Zyb3plbih2YWx1ZSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKFxyXG4gIGlzSW1tdXRhYmxlOiBJc0ltbXV0YWJsZUZ1bmMsXHJcbiAgaWdub3JlUGF0aHM6IElnbm9yZVBhdGhzIHwgdW5kZWZpbmVkLFxyXG4gIG9iajogYW55XHJcbikge1xyXG4gIGNvbnN0IHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKVxyXG4gIHJldHVybiB7XHJcbiAgICBkZXRlY3RNdXRhdGlvbnMoKSB7XHJcbiAgICAgIHJldHVybiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKVxyXG4gICAgfSxcclxuICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBUcmFja2VkUHJvcGVydHkge1xyXG4gIHZhbHVlOiBhbnlcclxuICBjaGlsZHJlbjogUmVjb3JkPHN0cmluZywgYW55PlxyXG59XHJcblxyXG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoXHJcbiAgaXNJbW11dGFibGU6IElzSW1tdXRhYmxlRnVuYyxcclxuICBpZ25vcmVQYXRoczogSWdub3JlUGF0aHMgPSBbXSxcclxuICBvYmo6IFJlY29yZDxzdHJpbmcsIGFueT4sXHJcbiAgcGF0aDogc3RyaW5nID0gJydcclxuKSB7XHJcbiAgY29uc3QgdHJhY2tlZDogUGFydGlhbDxUcmFja2VkUHJvcGVydHk+ID0geyB2YWx1ZTogb2JqIH1cclxuXHJcbiAgaWYgKCFpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICB0cmFja2VkLmNoaWxkcmVuID0ge31cclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgY29uc3QgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyAnLicgKyBrZXkgOiBrZXlcclxuICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XHJcbiAgICAgICAgY29udGludWVcclxuICAgICAgfVxyXG5cclxuICAgICAgdHJhY2tlZC5jaGlsZHJlbltrZXldID0gdHJhY2tQcm9wZXJ0aWVzKFxyXG4gICAgICAgIGlzSW1tdXRhYmxlLFxyXG4gICAgICAgIGlnbm9yZVBhdGhzLFxyXG4gICAgICAgIG9ialtrZXldLFxyXG4gICAgICAgIGNoaWxkUGF0aFxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0cmFja2VkIGFzIFRyYWNrZWRQcm9wZXJ0eVxyXG59XHJcblxyXG50eXBlIElnbm9yZVBhdGhzID0gcmVhZG9ubHkgKHN0cmluZyB8IFJlZ0V4cClbXVxyXG5cclxuZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKFxyXG4gIGlzSW1tdXRhYmxlOiBJc0ltbXV0YWJsZUZ1bmMsXHJcbiAgaWdub3JlZFBhdGhzOiBJZ25vcmVQYXRocyA9IFtdLFxyXG4gIHRyYWNrZWRQcm9wZXJ0eTogVHJhY2tlZFByb3BlcnR5LFxyXG4gIG9iajogYW55LFxyXG4gIHNhbWVQYXJlbnRSZWY6IGJvb2xlYW4gPSBmYWxzZSxcclxuICBwYXRoOiBzdHJpbmcgPSAnJ1xyXG4pOiB7IHdhc011dGF0ZWQ6IGJvb2xlYW47IHBhdGg/OiBzdHJpbmcgfSB7XHJcbiAgY29uc3QgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHVuZGVmaW5lZFxyXG5cclxuICBjb25zdCBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqXHJcblxyXG4gIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xyXG4gICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogdHJ1ZSwgcGF0aCB9XHJcbiAgfVxyXG5cclxuICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2F0aGVyIGFsbCBrZXlzIGZyb20gcHJldiAodHJhY2tlZCkgYW5kIGFmdGVyIG9ianNcclxuICBjb25zdCBrZXlzVG9EZXRlY3Q6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge31cclxuICBmb3IgKGxldCBrZXkgaW4gdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKSB7XHJcbiAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWVcclxuICB9XHJcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xyXG4gICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlXHJcbiAgfVxyXG5cclxuICBjb25zdCBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMFxyXG5cclxuICBmb3IgKGxldCBrZXkgaW4ga2V5c1RvRGV0ZWN0KSB7XHJcbiAgICBjb25zdCBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyAnLicgKyBrZXkgOiBrZXlcclxuXHJcbiAgICBpZiAoaGFzSWdub3JlZFBhdGhzKSB7XHJcbiAgICAgIGNvbnN0IGhhc01hdGNoZXMgPSBpZ25vcmVkUGF0aHMuc29tZSgoaWdub3JlZCkgPT4ge1xyXG4gICAgICAgIGlmIChpZ25vcmVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICByZXR1cm4gaWdub3JlZC50ZXN0KG5lc3RlZFBhdGgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXN0ZWRQYXRoID09PSBpZ25vcmVkXHJcbiAgICAgIH0pXHJcbiAgICAgIGlmIChoYXNNYXRjaGVzKSB7XHJcbiAgICAgICAgY29udGludWVcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGRldGVjdE11dGF0aW9ucyhcclxuICAgICAgaXNJbW11dGFibGUsXHJcbiAgICAgIGlnbm9yZWRQYXRocyxcclxuICAgICAgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sXHJcbiAgICAgIG9ialtrZXldLFxyXG4gICAgICBzYW1lUmVmLFxyXG4gICAgICBuZXN0ZWRQYXRoXHJcbiAgICApXHJcblxyXG4gICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XHJcbiAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfVxyXG59XHJcblxyXG50eXBlIElzSW1tdXRhYmxlRnVuYyA9ICh2YWx1ZTogYW55KSA9PiBib29sZWFuXHJcblxyXG4vKipcclxuICogT3B0aW9ucyBmb3IgYGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVPcHRpb25zIHtcclxuICAvKipcclxuICAgIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdmFsdWUgaXMgY29uc2lkZXJlZCB0byBiZSBpbW11dGFibGUuXHJcbiAgICBUaGlzIGZ1bmN0aW9uIGlzIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gZXZlcnkgdmFsdWUgY29udGFpbmVkIGluIHRoZSBzdGF0ZS5cclxuICAgIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIHByaW1pdGl2ZSB0eXBlcyBcclxuICAgIChsaWtlIG51bWJlcnMsIHN0cmluZ3MsIGJvb2xlYW5zLCBudWxsIGFuZCB1bmRlZmluZWQpLlxyXG4gICAqL1xyXG4gIGlzSW1tdXRhYmxlPzogSXNJbW11dGFibGVGdW5jXHJcbiAgLyoqIFxyXG4gICAgQW4gYXJyYXkgb2YgZG90LXNlcGFyYXRlZCBwYXRoIHN0cmluZ3MgdGhhdCBtYXRjaCBuYW1lZCBub2RlcyBmcm9tIFxyXG4gICAgdGhlIHJvb3Qgc3RhdGUgdG8gaWdub3JlIHdoZW4gY2hlY2tpbmcgZm9yIGltbXV0YWJpbGl0eS5cclxuICAgIERlZmF1bHRzIHRvIHVuZGVmaW5lZFxyXG4gICAqL1xyXG4gIGlnbm9yZWRQYXRocz86IElnbm9yZVBhdGhzXHJcbiAgLyoqIFByaW50IGEgd2FybmluZyBpZiBjaGVja3MgdGFrZSBsb25nZXIgdGhhbiBOIG1zLiBEZWZhdWx0OiAzMm1zICovXHJcbiAgd2FybkFmdGVyPzogbnVtYmVyXHJcbiAgLy8gQGRlcHJlY2F0ZWQuIFVzZSBpZ25vcmVkUGF0aHNcclxuICBpZ25vcmU/OiBzdHJpbmdbXVxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1pZGRsZXdhcmUgdGhhdCBjaGVja3Mgd2hldGhlciBhbnkgc3RhdGUgd2FzIG11dGF0ZWQgaW4gYmV0d2VlblxyXG4gKiBkaXNwYXRjaGVzIG9yIGR1cmluZyBhIGRpc3BhdGNoLiBJZiBhbnkgbXV0YXRpb25zIGFyZSBkZXRlY3RlZCwgYW4gZXJyb3IgaXNcclxuICogdGhyb3duLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBNaWRkbGV3YXJlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoXHJcbiAgb3B0aW9uczogSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlT3B0aW9ucyA9IHt9XHJcbik6IE1pZGRsZXdhcmUge1xyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICByZXR1cm4gKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IG5leHQoYWN0aW9uKVxyXG4gIH1cclxuXHJcbiAgbGV0IHtcclxuICAgIGlzSW1tdXRhYmxlID0gaXNJbW11dGFibGVEZWZhdWx0LFxyXG4gICAgaWdub3JlZFBhdGhzLFxyXG4gICAgd2FybkFmdGVyID0gMzIsXHJcbiAgICBpZ25vcmUsXHJcbiAgfSA9IG9wdGlvbnNcclxuXHJcbiAgLy8gQWxpYXMgaWdub3JlLT5pZ25vcmVkUGF0aHMsIGJ1dCBwcmVmZXIgaWdub3JlZFBhdGhzIGlmIHByZXNlbnRcclxuICBpZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMgfHwgaWdub3JlXHJcblxyXG4gIGNvbnN0IHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKVxyXG5cclxuICByZXR1cm4gKHsgZ2V0U3RhdGUgfSkgPT4ge1xyXG4gICAgbGV0IHN0YXRlID0gZ2V0U3RhdGUoKVxyXG4gICAgbGV0IHRyYWNrZXIgPSB0cmFjayhzdGF0ZSlcclxuXHJcbiAgICBsZXQgcmVzdWx0XHJcbiAgICByZXR1cm4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcclxuICAgICAgY29uc3QgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyhcclxuICAgICAgICB3YXJuQWZ0ZXIsXHJcbiAgICAgICAgJ0ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSdcclxuICAgICAgKVxyXG5cclxuICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKCgpID0+IHtcclxuICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKClcclxuXHJcbiAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKVxyXG4gICAgICAgIC8vIFRyYWNrIGJlZm9yZSBwb3RlbnRpYWxseSBub3QgbWVldGluZyB0aGUgaW52YXJpYW50XHJcbiAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKVxyXG5cclxuICAgICAgICBpbnZhcmlhbnQoXHJcbiAgICAgICAgICAhcmVzdWx0Lndhc011dGF0ZWQsXHJcbiAgICAgICAgICBgQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnJHtcclxuICAgICAgICAgICAgcmVzdWx0LnBhdGggfHwgJydcclxuICAgICAgICAgIH0nLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlgXHJcbiAgICAgICAgKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc3QgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKVxyXG5cclxuICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKCgpID0+IHtcclxuICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKClcclxuXHJcbiAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKVxyXG4gICAgICAgIC8vIFRyYWNrIGJlZm9yZSBwb3RlbnRpYWxseSBub3QgbWVldGluZyB0aGUgaW52YXJpYW50XHJcbiAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKVxyXG5cclxuICAgICAgICByZXN1bHQud2FzTXV0YXRlZCAmJlxyXG4gICAgICAgICAgaW52YXJpYW50KFxyXG4gICAgICAgICAgICAhcmVzdWx0Lndhc011dGF0ZWQsXHJcbiAgICAgICAgICAgIGBBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6ICR7XHJcbiAgICAgICAgICAgICAgcmVzdWx0LnBhdGggfHwgJydcclxuICAgICAgICAgICAgfS4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiAke3N0cmluZ2lmeShcclxuICAgICAgICAgICAgICBhY3Rpb25cclxuICAgICAgICAgICAgKX0uIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKWBcclxuICAgICAgICAgIClcclxuICAgICAgfSlcclxuXHJcbiAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpXHJcblxyXG4gICAgICByZXR1cm4gZGlzcGF0Y2hlZEFjdGlvblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QnXHJcbmltcG9ydCB0eXBlIHsgTWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4J1xyXG5pbXBvcnQgeyBnZXRUaW1lTWVhc3VyZVV0aWxzIH0gZnJvbSAnLi91dGlscydcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhc3NlZCB2YWx1ZSBpcyBcInBsYWluXCIsIGkuZS4gYSB2YWx1ZSB0aGF0IGlzIGVpdGhlclxyXG4gKiBkaXJlY3RseSBKU09OLXNlcmlhbGl6YWJsZSAoYm9vbGVhbiwgbnVtYmVyLCBzdHJpbmcsIGFycmF5LCBwbGFpbiBvYmplY3QpXHJcbiAqIG9yIGB1bmRlZmluZWRgLlxyXG4gKlxyXG4gKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZSB0byBjaGVjay5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW4odmFsOiBhbnkpIHtcclxuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbFxyXG4gIHJldHVybiAoXHJcbiAgICB2YWwgPT0gbnVsbCB8fFxyXG4gICAgdHlwZSA9PT0gJ3N0cmluZycgfHxcclxuICAgIHR5cGUgPT09ICdib29sZWFuJyB8fFxyXG4gICAgdHlwZSA9PT0gJ251bWJlcicgfHxcclxuICAgIEFycmF5LmlzQXJyYXkodmFsKSB8fFxyXG4gICAgaXNQbGFpbk9iamVjdCh2YWwpXHJcbiAgKVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTm9uU2VyaWFsaXphYmxlVmFsdWUge1xyXG4gIGtleVBhdGg6IHN0cmluZ1xyXG4gIHZhbHVlOiB1bmtub3duXHJcbn1cclxuXHJcbnR5cGUgSWdub3JlUGF0aHMgPSByZWFkb25seSAoc3RyaW5nIHwgUmVnRXhwKVtdXHJcblxyXG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShcclxuICB2YWx1ZTogdW5rbm93bixcclxuICBwYXRoOiBzdHJpbmcgPSAnJyxcclxuICBpc1NlcmlhbGl6YWJsZTogKHZhbHVlOiB1bmtub3duKSA9PiBib29sZWFuID0gaXNQbGFpbixcclxuICBnZXRFbnRyaWVzPzogKHZhbHVlOiB1bmtub3duKSA9PiBbc3RyaW5nLCBhbnldW10sXHJcbiAgaWdub3JlZFBhdGhzOiBJZ25vcmVQYXRocyA9IFtdLFxyXG4gIGNhY2hlPzogV2Vha1NldDxvYmplY3Q+XHJcbik6IE5vblNlcmlhbGl6YWJsZVZhbHVlIHwgZmFsc2Uge1xyXG4gIGxldCBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTogTm9uU2VyaWFsaXphYmxlVmFsdWUgfCBmYWxzZVxyXG5cclxuICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAga2V5UGF0aDogcGF0aCB8fCAnPHJvb3Q+JyxcclxuICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgaWYgKGNhY2hlPy5oYXModmFsdWUpKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgY29uc3QgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpXHJcblxyXG4gIGNvbnN0IGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwXHJcblxyXG4gIGZvciAoY29uc3QgW2tleSwgbmVzdGVkVmFsdWVdIG9mIGVudHJpZXMpIHtcclxuICAgIGNvbnN0IG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArICcuJyArIGtleSA6IGtleVxyXG5cclxuICAgIGlmIChoYXNJZ25vcmVkUGF0aHMpIHtcclxuICAgICAgY29uc3QgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKChpZ25vcmVkKSA9PiB7XHJcbiAgICAgICAgaWYgKGlnbm9yZWQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5lc3RlZFBhdGggPT09IGlnbm9yZWRcclxuICAgICAgfSlcclxuICAgICAgaWYgKGhhc01hdGNoZXMpIHtcclxuICAgICAgICBjb250aW51ZVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxyXG4gICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZSxcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKFxyXG4gICAgICAgIG5lc3RlZFZhbHVlLFxyXG4gICAgICAgIG5lc3RlZFBhdGgsXHJcbiAgICAgICAgaXNTZXJpYWxpemFibGUsXHJcbiAgICAgICAgZ2V0RW50cmllcyxcclxuICAgICAgICBpZ25vcmVkUGF0aHMsXHJcbiAgICAgICAgY2FjaGVcclxuICAgICAgKVxyXG5cclxuICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChjYWNoZSAmJiBpc05lc3RlZEZyb3plbih2YWx1ZSkpIGNhY2hlLmFkZCh2YWx1ZSlcclxuXHJcbiAgcmV0dXJuIGZhbHNlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc05lc3RlZEZyb3plbih2YWx1ZTogb2JqZWN0KSB7XHJcbiAgaWYgKCFPYmplY3QuaXNGcm96ZW4odmFsdWUpKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgZm9yIChjb25zdCBuZXN0ZWRWYWx1ZSBvZiBPYmplY3QudmFsdWVzKHZhbHVlKSkge1xyXG4gICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSAhPT0gJ29iamVjdCcgfHwgbmVzdGVkVmFsdWUgPT09IG51bGwpIGNvbnRpbnVlXHJcblxyXG4gICAgaWYgKCFpc05lc3RlZEZyb3plbihuZXN0ZWRWYWx1ZSkpIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWVcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIGBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoKWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdmFsdWUgaXMgY29uc2lkZXJlZCBzZXJpYWxpemFibGUuIFRoaXNcclxuICAgKiBmdW5jdGlvbiBpcyBhcHBsaWVkIHJlY3Vyc2l2ZWx5IHRvIGV2ZXJ5IHZhbHVlIGNvbnRhaW5lZCBpbiB0aGVcclxuICAgKiBzdGF0ZS4gRGVmYXVsdHMgdG8gYGlzUGxhaW4oKWAuXHJcbiAgICovXHJcbiAgaXNTZXJpYWxpemFibGU/OiAodmFsdWU6IGFueSkgPT4gYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byByZXRyaWV2ZSBlbnRyaWVzIGZyb20gZWFjaFxyXG4gICAqIHZhbHVlLiAgSWYgdW5zcGVjaWZpZWQsIGBPYmplY3QuZW50cmllc2Agd2lsbCBiZSB1c2VkLiBEZWZhdWx0c1xyXG4gICAqIHRvIGB1bmRlZmluZWRgLlxyXG4gICAqL1xyXG4gIGdldEVudHJpZXM/OiAodmFsdWU6IGFueSkgPT4gW3N0cmluZywgYW55XVtdXHJcblxyXG4gIC8qKlxyXG4gICAqIEFuIGFycmF5IG9mIGFjdGlvbiB0eXBlcyB0byBpZ25vcmUgd2hlbiBjaGVja2luZyBmb3Igc2VyaWFsaXphYmlsaXR5LlxyXG4gICAqIERlZmF1bHRzIHRvIFtdXHJcbiAgICovXHJcbiAgaWdub3JlZEFjdGlvbnM/OiBzdHJpbmdbXVxyXG5cclxuICAvKipcclxuICAgKiBBbiBhcnJheSBvZiBkb3Qtc2VwYXJhdGVkIHBhdGggc3RyaW5ncyBvciByZWd1bGFyIGV4cHJlc3Npb25zIHRvIGlnbm9yZVxyXG4gICAqIHdoZW4gY2hlY2tpbmcgZm9yIHNlcmlhbGl6YWJpbGl0eSwgRGVmYXVsdHMgdG9cclxuICAgKiBbJ21ldGEuYXJnJywgJ21ldGEuYmFzZVF1ZXJ5TWV0YSddXHJcbiAgICovXHJcbiAgaWdub3JlZEFjdGlvblBhdGhzPzogKHN0cmluZyB8IFJlZ0V4cClbXVxyXG5cclxuICAvKipcclxuICAgKiBBbiBhcnJheSBvZiBkb3Qtc2VwYXJhdGVkIHBhdGggc3RyaW5ncyBvciByZWd1bGFyIGV4cHJlc3Npb25zIHRvIGlnbm9yZVxyXG4gICAqIHdoZW4gY2hlY2tpbmcgZm9yIHNlcmlhbGl6YWJpbGl0eSwgRGVmYXVsdHMgdG8gW11cclxuICAgKi9cclxuICBpZ25vcmVkUGF0aHM/OiAoc3RyaW5nIHwgUmVnRXhwKVtdXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0aW9uIHRpbWUgd2FybmluZyB0aHJlc2hvbGQuIElmIHRoZSBtaWRkbGV3YXJlIHRha2VzIGxvbmdlclxyXG4gICAqIHRoYW4gYHdhcm5BZnRlcmAgbXMsIGEgd2FybmluZyB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgY29uc29sZS5cclxuICAgKiBEZWZhdWx0cyB0byAzMm1zLlxyXG4gICAqL1xyXG4gIHdhcm5BZnRlcj86IG51bWJlclxyXG5cclxuICAvKipcclxuICAgKiBPcHQgb3V0IG9mIGNoZWNraW5nIHN0YXRlLiBXaGVuIHNldCB0byBgdHJ1ZWAsIG90aGVyIHN0YXRlLXJlbGF0ZWQgcGFyYW1zIHdpbGwgYmUgaWdub3JlZC5cclxuICAgKi9cclxuICBpZ25vcmVTdGF0ZT86IGJvb2xlYW5cclxuXHJcbiAgLyoqXHJcbiAgICogT3B0IG91dCBvZiBjaGVja2luZyBhY3Rpb25zLiBXaGVuIHNldCB0byBgdHJ1ZWAsIG90aGVyIGFjdGlvbi1yZWxhdGVkIHBhcmFtcyB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICovXHJcbiAgaWdub3JlQWN0aW9ucz86IGJvb2xlYW5cclxuXHJcbiAgLyoqXHJcbiAgICogT3B0IG91dCBvZiBjYWNoaW5nIHRoZSByZXN1bHRzLiBUaGUgY2FjaGUgdXNlcyBhIFdlYWtTZXQgYW5kIHNwZWVkcyB1cCByZXBlYXRlZCBjaGVja2luZyBwcm9jZXNzZXMuXHJcbiAgICogVGhlIGNhY2hlIGlzIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgaWYgbm8gYnJvd3NlciBzdXBwb3J0IGZvciBXZWFrU2V0IGlzIHByZXNlbnQuXHJcbiAgICovXHJcbiAgZGlzYWJsZUNhY2hlPzogYm9vbGVhblxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1pZGRsZXdhcmUgdGhhdCwgYWZ0ZXIgZXZlcnkgc3RhdGUgY2hhbmdlLCBjaGVja3MgaWYgdGhlIG5ld1xyXG4gKiBzdGF0ZSBpcyBzZXJpYWxpemFibGUuIElmIGEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSBpcyBmb3VuZCB3aXRoaW4gdGhlXHJcbiAqIHN0YXRlLCBhbiBlcnJvciBpcyBwcmludGVkIHRvIHRoZSBjb25zb2xlLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBNaWRkbGV3YXJlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoXHJcbiAgb3B0aW9uczogU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlT3B0aW9ucyA9IHt9XHJcbik6IE1pZGRsZXdhcmUge1xyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICByZXR1cm4gKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IG5leHQoYWN0aW9uKVxyXG4gIH1cclxuICBjb25zdCB7XHJcbiAgICBpc1NlcmlhbGl6YWJsZSA9IGlzUGxhaW4sXHJcbiAgICBnZXRFbnRyaWVzLFxyXG4gICAgaWdub3JlZEFjdGlvbnMgPSBbXSxcclxuICAgIGlnbm9yZWRBY3Rpb25QYXRocyA9IFsnbWV0YS5hcmcnLCAnbWV0YS5iYXNlUXVlcnlNZXRhJ10sXHJcbiAgICBpZ25vcmVkUGF0aHMgPSBbXSxcclxuICAgIHdhcm5BZnRlciA9IDMyLFxyXG4gICAgaWdub3JlU3RhdGUgPSBmYWxzZSxcclxuICAgIGlnbm9yZUFjdGlvbnMgPSBmYWxzZSxcclxuICAgIGRpc2FibGVDYWNoZSA9IGZhbHNlLFxyXG4gIH0gPSBvcHRpb25zXHJcblxyXG4gIGNvbnN0IGNhY2hlOiBXZWFrU2V0PG9iamVjdD4gfCB1bmRlZmluZWQgPVxyXG4gICAgIWRpc2FibGVDYWNoZSAmJiBXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IHVuZGVmaW5lZFxyXG5cclxuICByZXR1cm4gKHN0b3JlQVBJKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gbmV4dChhY3Rpb24pXHJcblxyXG4gICAgY29uc3QgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyhcclxuICAgICAgd2FybkFmdGVyLFxyXG4gICAgICAnU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlJ1xyXG4gICAgKVxyXG5cclxuICAgIGlmIChcclxuICAgICAgIWlnbm9yZUFjdGlvbnMgJiZcclxuICAgICAgIShpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKVxyXG4gICAgKSB7XHJcbiAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZSgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShcclxuICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICcnLFxyXG4gICAgICAgICAgaXNTZXJpYWxpemFibGUsXHJcbiAgICAgICAgICBnZXRFbnRyaWVzLFxyXG4gICAgICAgICAgaWdub3JlZEFjdGlvblBhdGhzLFxyXG4gICAgICAgICAgY2FjaGVcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICBjb25zdCB7IGtleVBhdGgsIHZhbHVlIH0gPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlXHJcblxyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgYEEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gYW4gYWN0aW9uLCBpbiB0aGUgcGF0aDogXFxgJHtrZXlQYXRofVxcYC4gVmFsdWU6YCxcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICdcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiAnLFxyXG4gICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICdcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKScsXHJcbiAgICAgICAgICAgICdcXG4oVG8gYWxsb3cgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZXMgc2VlOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3VzYWdlL3VzYWdlLWd1aWRlI3dvcmtpbmctd2l0aC1ub24tc2VyaWFsaXphYmxlLWRhdGEpJ1xyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlnbm9yZVN0YXRlKSB7XHJcbiAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZSgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpXHJcblxyXG4gICAgICAgIGNvbnN0IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShcclxuICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgICAgJycsXHJcbiAgICAgICAgICBpc1NlcmlhbGl6YWJsZSxcclxuICAgICAgICAgIGdldEVudHJpZXMsXHJcbiAgICAgICAgICBpZ25vcmVkUGF0aHMsXHJcbiAgICAgICAgICBjYWNoZVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgaWYgKGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSkge1xyXG4gICAgICAgICAgY29uc3QgeyBrZXlQYXRoLCB2YWx1ZSB9ID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlXHJcblxyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgYEEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogXFxgJHtrZXlQYXRofVxcYC4gVmFsdWU6YCxcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIGBcclxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogJHthY3Rpb24udHlwZX0uXHJcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKWBcclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHRcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHR5cGUge1xyXG4gIElzVW5rbm93bk9yTm9uSW5mZXJyYWJsZSxcclxuICBJZk1heWJlVW5kZWZpbmVkLFxyXG4gIElmVm9pZCxcclxuICBJc0FueSxcclxufSBmcm9tICcuL3RzSGVscGVycydcclxuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0J1xyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiB3aXRoIGEgc3RyaW5nIHR5cGUgYW5kIGFuIGFzc29jaWF0ZWQgcGF5bG9hZC4gVGhpcyBpcyB0aGVcclxuICogdHlwZSBvZiBhY3Rpb24gcmV0dXJuZWQgYnkgYGNyZWF0ZUFjdGlvbigpYCBhY3Rpb24gY3JlYXRvcnMuXHJcbiAqXHJcbiAqIEB0ZW1wbGF0ZSBQIFRoZSB0eXBlIG9mIHRoZSBhY3Rpb24ncyBwYXlsb2FkLlxyXG4gKiBAdGVtcGxhdGUgVCB0aGUgdHlwZSB1c2VkIGZvciB0aGUgYWN0aW9uIHR5cGUuXHJcbiAqIEB0ZW1wbGF0ZSBNIFRoZSB0eXBlIG9mIHRoZSBhY3Rpb24ncyBtZXRhIChvcHRpb25hbClcclxuICogQHRlbXBsYXRlIEUgVGhlIHR5cGUgb2YgdGhlIGFjdGlvbidzIGVycm9yIChvcHRpb25hbClcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgUGF5bG9hZEFjdGlvbjxcclxuICBQID0gdm9pZCxcclxuICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxyXG4gIE0gPSBuZXZlcixcclxuICBFID0gbmV2ZXJcclxuPiA9IHtcclxuICBwYXlsb2FkOiBQXHJcbiAgdHlwZTogVFxyXG59ICYgKFtNXSBleHRlbmRzIFtuZXZlcl1cclxuICA/IHt9XHJcbiAgOiB7XHJcbiAgICAgIG1ldGE6IE1cclxuICAgIH0pICZcclxuICAoW0VdIGV4dGVuZHMgW25ldmVyXVxyXG4gICAgPyB7fVxyXG4gICAgOiB7XHJcbiAgICAgICAgZXJyb3I6IEVcclxuICAgICAgfSlcclxuXHJcbi8qKlxyXG4gKiBBIFwicHJlcGFyZVwiIG1ldGhvZCB0byBiZSB1c2VkIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIGBjcmVhdGVBY3Rpb25gLlxyXG4gKiBUYWtlcyBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhIEZsdXggU3RhbmRhcmQgQWN0aW9uIHdpdGhvdXRcclxuICogdHlwZSAod2lsbCBiZSBhZGRlZCBsYXRlcikgdGhhdCAqbXVzdCogY29udGFpbiBhIHBheWxvYWQgKG1pZ2h0IGJlIHVuZGVmaW5lZCkuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIFByZXBhcmVBY3Rpb248UD4gPVxyXG4gIHwgKCguLi5hcmdzOiBhbnlbXSkgPT4geyBwYXlsb2FkOiBQIH0pXHJcbiAgfCAoKC4uLmFyZ3M6IGFueVtdKSA9PiB7IHBheWxvYWQ6IFA7IG1ldGE6IGFueSB9KVxyXG4gIHwgKCguLi5hcmdzOiBhbnlbXSkgPT4geyBwYXlsb2FkOiBQOyBlcnJvcjogYW55IH0pXHJcbiAgfCAoKC4uLmFyZ3M6IGFueVtdKSA9PiB7IHBheWxvYWQ6IFA7IG1ldGE6IGFueTsgZXJyb3I6IGFueSB9KVxyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIHZlcnNpb24gb2YgYEFjdGlvbkNyZWF0b3JXaXRoUHJlcGFyZWRQYXlsb2FkYC4gTm90IHRvIGJlIHVzZWQgZXh0ZXJuYWxseS5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBfQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQ8XHJcbiAgUEEgZXh0ZW5kcyBQcmVwYXJlQWN0aW9uPGFueT4gfCB2b2lkLFxyXG4gIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmdcclxuPiA9IFBBIGV4dGVuZHMgUHJlcGFyZUFjdGlvbjxpbmZlciBQPlxyXG4gID8gQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQ8XHJcbiAgICAgIFBhcmFtZXRlcnM8UEE+LFxyXG4gICAgICBQLFxyXG4gICAgICBULFxyXG4gICAgICBSZXR1cm5UeXBlPFBBPiBleHRlbmRzIHtcclxuICAgICAgICBlcnJvcjogaW5mZXIgRVxyXG4gICAgICB9XHJcbiAgICAgICAgPyBFXHJcbiAgICAgICAgOiBuZXZlcixcclxuICAgICAgUmV0dXJuVHlwZTxQQT4gZXh0ZW5kcyB7XHJcbiAgICAgICAgbWV0YTogaW5mZXIgTVxyXG4gICAgICB9XHJcbiAgICAgICAgPyBNXHJcbiAgICAgICAgOiBuZXZlclxyXG4gICAgPlxyXG4gIDogdm9pZFxyXG5cclxuLyoqXHJcbiAqIEJhc2ljIHR5cGUgZm9yIGFsbCBhY3Rpb24gY3JlYXRvcnMuXHJcbiAqXHJcbiAqIEBpbmhlcml0ZG9jIHtyZWR1eCNBY3Rpb25DcmVhdG9yfVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCYXNlQWN0aW9uQ3JlYXRvcjxQLCBUIGV4dGVuZHMgc3RyaW5nLCBNID0gbmV2ZXIsIEUgPSBuZXZlcj4ge1xyXG4gIHR5cGU6IFRcclxuICBtYXRjaDogKGFjdGlvbjogQWN0aW9uPHVua25vd24+KSA9PiBhY3Rpb24gaXMgUGF5bG9hZEFjdGlvbjxQLCBULCBNLCBFPlxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGNyZWF0b3IgdGhhdCB0YWtlcyBtdWx0aXBsZSBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkXHJcbiAqIHRvIGEgYFByZXBhcmVBY3Rpb25gIG1ldGhvZCB0byBjcmVhdGUgdGhlIGZpbmFsIEFjdGlvbi5cclxuICogQHR5cGVQYXJhbSBBcmdzIGFyZ3VtZW50cyBmb3IgdGhlIGFjdGlvbiBjcmVhdG9yIGZ1bmN0aW9uXHJcbiAqIEB0eXBlUGFyYW0gUCBgcGF5bG9hZGAgdHlwZVxyXG4gKiBAdHlwZVBhcmFtIFQgYHR5cGVgIG5hbWVcclxuICogQHR5cGVQYXJhbSBFIG9wdGlvbmFsIGBlcnJvcmAgdHlwZVxyXG4gKiBAdHlwZVBhcmFtIE0gb3B0aW9uYWwgYG1ldGFgIHR5cGVcclxuICpcclxuICogQGluaGVyaXRkb2Mge3JlZHV4I0FjdGlvbkNyZWF0b3J9XHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQ8XHJcbiAgQXJncyBleHRlbmRzIHVua25vd25bXSxcclxuICBQLFxyXG4gIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsXHJcbiAgRSA9IG5ldmVyLFxyXG4gIE0gPSBuZXZlclxyXG4+IGV4dGVuZHMgQmFzZUFjdGlvbkNyZWF0b3I8UCwgVCwgTSwgRT4ge1xyXG4gIC8qKlxyXG4gICAqIENhbGxpbmcgdGhpcyB7QGxpbmsgcmVkdXgjQWN0aW9uQ3JlYXRvcn0gd2l0aCBgQXJnc2Agd2lsbCByZXR1cm5cclxuICAgKiBhbiBBY3Rpb24gd2l0aCBhIHBheWxvYWQgb2YgdHlwZSBgUGAgYW5kIChkZXBlbmRpbmcgb24gdGhlIGBQcmVwYXJlQWN0aW9uYFxyXG4gICAqIG1ldGhvZCB1c2VkKSBhIGBtZXRhYC0gYW5kIGBlcnJvcmAgcHJvcGVydHkgb2YgdHlwZXMgYE1gIGFuZCBgRWAgcmVzcGVjdGl2ZWx5LlxyXG4gICAqL1xyXG4gICguLi5hcmdzOiBBcmdzKTogUGF5bG9hZEFjdGlvbjxQLCBULCBNLCBFPlxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGNyZWF0b3Igb2YgdHlwZSBgVGAgdGhhdCB0YWtlcyBhbiBvcHRpb25hbCBwYXlsb2FkIG9mIHR5cGUgYFBgLlxyXG4gKlxyXG4gKiBAaW5oZXJpdGRvYyB7cmVkdXgjQWN0aW9uQ3JlYXRvcn1cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25DcmVhdG9yV2l0aE9wdGlvbmFsUGF5bG9hZDxQLCBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPlxyXG4gIGV4dGVuZHMgQmFzZUFjdGlvbkNyZWF0b3I8UCwgVD4ge1xyXG4gIC8qKlxyXG4gICAqIENhbGxpbmcgdGhpcyB7QGxpbmsgcmVkdXgjQWN0aW9uQ3JlYXRvcn0gd2l0aCBhbiBhcmd1bWVudCB3aWxsXHJcbiAgICogcmV0dXJuIGEge0BsaW5rIFBheWxvYWRBY3Rpb259IG9mIHR5cGUgYFRgIHdpdGggYSBwYXlsb2FkIG9mIGBQYC5cclxuICAgKiBDYWxsaW5nIGl0IHdpdGhvdXQgYW4gYXJndW1lbnQgd2lsbCByZXR1cm4gYSBQYXlsb2FkQWN0aW9uIHdpdGggYSBwYXlsb2FkIG9mIGB1bmRlZmluZWRgLlxyXG4gICAqL1xyXG4gIChwYXlsb2FkPzogUCk6IFBheWxvYWRBY3Rpb248UCwgVD5cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBjcmVhdG9yIG9mIHR5cGUgYFRgIHRoYXQgdGFrZXMgbm8gcGF5bG9hZC5cclxuICpcclxuICogQGluaGVyaXRkb2Mge3JlZHV4I0FjdGlvbkNyZWF0b3J9XHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ3JlYXRvcldpdGhvdXRQYXlsb2FkPFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+XHJcbiAgZXh0ZW5kcyBCYXNlQWN0aW9uQ3JlYXRvcjx1bmRlZmluZWQsIFQ+IHtcclxuICAvKipcclxuICAgKiBDYWxsaW5nIHRoaXMge0BsaW5rIHJlZHV4I0FjdGlvbkNyZWF0b3J9IHdpbGxcclxuICAgKiByZXR1cm4gYSB7QGxpbmsgUGF5bG9hZEFjdGlvbn0gb2YgdHlwZSBgVGAgd2l0aCBhIHBheWxvYWQgb2YgYHVuZGVmaW5lZGBcclxuICAgKi9cclxuICAobm9Bcmd1bWVudDogdm9pZCk6IFBheWxvYWRBY3Rpb248dW5kZWZpbmVkLCBUPlxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGNyZWF0b3Igb2YgdHlwZSBgVGAgdGhhdCByZXF1aXJlcyBhIHBheWxvYWQgb2YgdHlwZSBQLlxyXG4gKlxyXG4gKiBAaW5oZXJpdGRvYyB7cmVkdXgjQWN0aW9uQ3JlYXRvcn1cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25DcmVhdG9yV2l0aFBheWxvYWQ8UCwgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZz5cclxuICBleHRlbmRzIEJhc2VBY3Rpb25DcmVhdG9yPFAsIFQ+IHtcclxuICAvKipcclxuICAgKiBDYWxsaW5nIHRoaXMge0BsaW5rIHJlZHV4I0FjdGlvbkNyZWF0b3J9IHdpdGggYW4gYXJndW1lbnQgd2lsbFxyXG4gICAqIHJldHVybiBhIHtAbGluayBQYXlsb2FkQWN0aW9ufSBvZiB0eXBlIGBUYCB3aXRoIGEgcGF5bG9hZCBvZiBgUGBcclxuICAgKi9cclxuICAocGF5bG9hZDogUCk6IFBheWxvYWRBY3Rpb248UCwgVD5cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBjcmVhdG9yIG9mIHR5cGUgYFRgIHdob3NlIGBwYXlsb2FkYCB0eXBlIGNvdWxkIG5vdCBiZSBpbmZlcnJlZC4gQWNjZXB0cyBldmVyeXRoaW5nIGFzIGBwYXlsb2FkYC5cclxuICpcclxuICogQGluaGVyaXRkb2Mge3JlZHV4I0FjdGlvbkNyZWF0b3J9XHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ3JlYXRvcldpdGhOb25JbmZlcnJhYmxlUGF5bG9hZDxcclxuICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nXHJcbj4gZXh0ZW5kcyBCYXNlQWN0aW9uQ3JlYXRvcjx1bmtub3duLCBUPiB7XHJcbiAgLyoqXHJcbiAgICogQ2FsbGluZyB0aGlzIHtAbGluayByZWR1eCNBY3Rpb25DcmVhdG9yfSB3aXRoIGFuIGFyZ3VtZW50IHdpbGxcclxuICAgKiByZXR1cm4gYSB7QGxpbmsgUGF5bG9hZEFjdGlvbn0gb2YgdHlwZSBgVGAgd2l0aCBhIHBheWxvYWRcclxuICAgKiBvZiBleGFjdGx5IHRoZSB0eXBlIG9mIHRoZSBhcmd1bWVudC5cclxuICAgKi9cclxuICA8UFQgZXh0ZW5kcyB1bmtub3duPihwYXlsb2FkOiBQVCk6IFBheWxvYWRBY3Rpb248UFQsIFQ+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gY3JlYXRvciB0aGF0IHByb2R1Y2VzIGFjdGlvbnMgd2l0aCBhIGBwYXlsb2FkYCBhdHRyaWJ1dGUuXHJcbiAqXHJcbiAqIEB0eXBlUGFyYW0gUCB0aGUgYHBheWxvYWRgIHR5cGVcclxuICogQHR5cGVQYXJhbSBUIHRoZSBgdHlwZWAgb2YgdGhlIHJlc3VsdGluZyBhY3Rpb25cclxuICogQHR5cGVQYXJhbSBQQSBpZiB0aGUgcmVzdWx0aW5nIGFjdGlvbiBpcyBwcmVwcm9jZXNzZWQgYnkgYSBgcHJlcGFyZWAgbWV0aG9kLCB0aGUgc2lnbmF0dXJlIG9mIHNhaWQgbWV0aG9kLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBQYXlsb2FkQWN0aW9uQ3JlYXRvcjxcclxuICBQID0gdm9pZCxcclxuICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxyXG4gIFBBIGV4dGVuZHMgUHJlcGFyZUFjdGlvbjxQPiB8IHZvaWQgPSB2b2lkXHJcbj4gPSBJZlByZXBhcmVBY3Rpb25NZXRob2RQcm92aWRlZDxcclxuICBQQSxcclxuICBfQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQ8UEEsIFQ+LFxyXG4gIC8vIGVsc2VcclxuICBJc0FueTxcclxuICAgIFAsXHJcbiAgICBBY3Rpb25DcmVhdG9yV2l0aFBheWxvYWQ8YW55LCBUPixcclxuICAgIElzVW5rbm93bk9yTm9uSW5mZXJyYWJsZTxcclxuICAgICAgUCxcclxuICAgICAgQWN0aW9uQ3JlYXRvcldpdGhOb25JbmZlcnJhYmxlUGF5bG9hZDxUPixcclxuICAgICAgLy8gZWxzZVxyXG4gICAgICBJZlZvaWQ8XHJcbiAgICAgICAgUCxcclxuICAgICAgICBBY3Rpb25DcmVhdG9yV2l0aG91dFBheWxvYWQ8VD4sXHJcbiAgICAgICAgLy8gZWxzZVxyXG4gICAgICAgIElmTWF5YmVVbmRlZmluZWQ8XHJcbiAgICAgICAgICBQLFxyXG4gICAgICAgICAgQWN0aW9uQ3JlYXRvcldpdGhPcHRpb25hbFBheWxvYWQ8UCwgVD4sXHJcbiAgICAgICAgICAvLyBlbHNlXHJcbiAgICAgICAgICBBY3Rpb25DcmVhdG9yV2l0aFBheWxvYWQ8UCwgVD5cclxuICAgICAgICA+XHJcbiAgICAgID5cclxuICAgID5cclxuICA+XHJcbj5cclxuXHJcbi8qKlxyXG4gKiBBIHV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGFjdGlvbiBjcmVhdG9yIGZvciB0aGUgZ2l2ZW4gYWN0aW9uIHR5cGVcclxuICogc3RyaW5nLiBUaGUgYWN0aW9uIGNyZWF0b3IgYWNjZXB0cyBhIHNpbmdsZSBhcmd1bWVudCwgd2hpY2ggd2lsbCBiZSBpbmNsdWRlZFxyXG4gKiBpbiB0aGUgYWN0aW9uIG9iamVjdCBhcyBhIGZpZWxkIGNhbGxlZCBwYXlsb2FkLiBUaGUgYWN0aW9uIGNyZWF0b3IgZnVuY3Rpb25cclxuICogd2lsbCBhbHNvIGhhdmUgaXRzIHRvU3RyaW5nKCkgb3ZlcnJpZGRlbiBzbyB0aGF0IGl0IHJldHVybnMgdGhlIGFjdGlvbiB0eXBlLFxyXG4gKiBhbGxvd2luZyBpdCB0byBiZSB1c2VkIGluIHJlZHVjZXIgbG9naWMgdGhhdCBpcyBsb29raW5nIGZvciB0aGF0IGFjdGlvbiB0eXBlLlxyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZSBUaGUgYWN0aW9uIHR5cGUgdG8gdXNlIGZvciBjcmVhdGVkIGFjdGlvbnMuXHJcbiAqIEBwYXJhbSBwcmVwYXJlIChvcHRpb25hbCkgYSBtZXRob2QgdGhhdCB0YWtlcyBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB7IHBheWxvYWQgfSBvciB7IHBheWxvYWQsIG1ldGEgfS5cclxuICogICAgICAgICAgICAgICAgSWYgdGhpcyBpcyBnaXZlbiwgdGhlIHJlc3VsdGluZyBhY3Rpb24gY3JlYXRvciB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyB0byB0aGlzIG1ldGhvZCB0byBjYWxjdWxhdGUgcGF5bG9hZCAmIG1ldGEuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb248UCA9IHZvaWQsIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KFxyXG4gIHR5cGU6IFRcclxuKTogUGF5bG9hZEFjdGlvbkNyZWF0b3I8UCwgVD5cclxuXHJcbi8qKlxyXG4gKiBBIHV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGFjdGlvbiBjcmVhdG9yIGZvciB0aGUgZ2l2ZW4gYWN0aW9uIHR5cGVcclxuICogc3RyaW5nLiBUaGUgYWN0aW9uIGNyZWF0b3IgYWNjZXB0cyBhIHNpbmdsZSBhcmd1bWVudCwgd2hpY2ggd2lsbCBiZSBpbmNsdWRlZFxyXG4gKiBpbiB0aGUgYWN0aW9uIG9iamVjdCBhcyBhIGZpZWxkIGNhbGxlZCBwYXlsb2FkLiBUaGUgYWN0aW9uIGNyZWF0b3IgZnVuY3Rpb25cclxuICogd2lsbCBhbHNvIGhhdmUgaXRzIHRvU3RyaW5nKCkgb3ZlcnJpZGRlbiBzbyB0aGF0IGl0IHJldHVybnMgdGhlIGFjdGlvbiB0eXBlLFxyXG4gKiBhbGxvd2luZyBpdCB0byBiZSB1c2VkIGluIHJlZHVjZXIgbG9naWMgdGhhdCBpcyBsb29raW5nIGZvciB0aGF0IGFjdGlvbiB0eXBlLlxyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZSBUaGUgYWN0aW9uIHR5cGUgdG8gdXNlIGZvciBjcmVhdGVkIGFjdGlvbnMuXHJcbiAqIEBwYXJhbSBwcmVwYXJlIChvcHRpb25hbCkgYSBtZXRob2QgdGhhdCB0YWtlcyBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB7IHBheWxvYWQgfSBvciB7IHBheWxvYWQsIG1ldGEgfS5cclxuICogICAgICAgICAgICAgICAgSWYgdGhpcyBpcyBnaXZlbiwgdGhlIHJlc3VsdGluZyBhY3Rpb24gY3JlYXRvciB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyB0byB0aGlzIG1ldGhvZCB0byBjYWxjdWxhdGUgcGF5bG9hZCAmIG1ldGEuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb248XHJcbiAgUEEgZXh0ZW5kcyBQcmVwYXJlQWN0aW9uPGFueT4sXHJcbiAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZ1xyXG4+KFxyXG4gIHR5cGU6IFQsXHJcbiAgcHJlcGFyZUFjdGlvbjogUEFcclxuKTogUGF5bG9hZEFjdGlvbkNyZWF0b3I8UmV0dXJuVHlwZTxQQT5bJ3BheWxvYWQnXSwgVCwgUEE+XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGU6IHN0cmluZywgcHJlcGFyZUFjdGlvbj86IEZ1bmN0aW9uKTogYW55IHtcclxuICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICBpZiAocHJlcGFyZUFjdGlvbikge1xyXG4gICAgICBsZXQgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uKC4uLmFyZ3MpXHJcbiAgICAgIGlmICghcHJlcGFyZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0JylcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWQsXHJcbiAgICAgICAgLi4uKCdtZXRhJyBpbiBwcmVwYXJlZCAmJiB7IG1ldGE6IHByZXBhcmVkLm1ldGEgfSksXHJcbiAgICAgICAgLi4uKCdlcnJvcicgaW4gcHJlcGFyZWQgJiYgeyBlcnJvcjogcHJlcGFyZWQuZXJyb3IgfSksXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7IHR5cGUsIHBheWxvYWQ6IGFyZ3NbMF0gfVxyXG4gIH1cclxuXHJcbiAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9ICgpID0+IGAke3R5cGV9YFxyXG5cclxuICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlXHJcblxyXG4gIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSAoYWN0aW9uOiBBY3Rpb248dW5rbm93bj4pOiBhY3Rpb24gaXMgUGF5bG9hZEFjdGlvbiA9PlxyXG4gICAgYWN0aW9uLnR5cGUgPT09IHR5cGVcclxuXHJcbiAgcmV0dXJuIGFjdGlvbkNyZWF0b3JcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCB3aXRoIGEgYHR5cGVgIHByb3BlcnR5LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWN0aW9uKGFjdGlvbjogdW5rbm93bik6IGFjdGlvbiBpcyBBY3Rpb248dW5rbm93bj4ge1xyXG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgJ3R5cGUnIGluIGFjdGlvblxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIGFuIGFjdGlvbiB3aXRoIGEgc3RyaW5nIHR5cGUgYW5kIHZhbGlkIEZsdXggU3RhbmRhcmQgQWN0aW9uIGtleXMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNGU0EoYWN0aW9uOiB1bmtub3duKTogYWN0aW9uIGlzIHtcclxuICB0eXBlOiBzdHJpbmdcclxuICBwYXlsb2FkPzogdW5rbm93blxyXG4gIGVycm9yPzogdW5rbm93blxyXG4gIG1ldGE/OiB1bmtub3duXHJcbn0ge1xyXG4gIHJldHVybiAoXHJcbiAgICBpc0FjdGlvbihhY3Rpb24pICYmXHJcbiAgICB0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICdzdHJpbmcnICYmXHJcbiAgICBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpXHJcbiAgKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleTogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIFsndHlwZScsICdwYXlsb2FkJywgJ2Vycm9yJywgJ21ldGEnXS5pbmRleE9mKGtleSkgPiAtMVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYWN0aW9uIHR5cGUgb2YgdGhlIGFjdGlvbnMgY3JlYXRlZCBieSB0aGUgcGFzc2VkXHJcbiAqIGBjcmVhdGVBY3Rpb24oKWAtZ2VuZXJhdGVkIGFjdGlvbiBjcmVhdG9yIChhcmJpdHJhcnkgYWN0aW9uIGNyZWF0b3JzXHJcbiAqIGFyZSBub3Qgc3VwcG9ydGVkKS5cclxuICpcclxuICogQHBhcmFtIGFjdGlvbiBUaGUgYWN0aW9uIGNyZWF0b3Igd2hvc2UgYWN0aW9uIHR5cGUgdG8gZ2V0LlxyXG4gKiBAcmV0dXJucyBUaGUgYWN0aW9uIHR5cGUgdXNlZCBieSB0aGUgYWN0aW9uIGNyZWF0b3IuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlPFQgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gIGFjdGlvbkNyZWF0b3I6IFBheWxvYWRBY3Rpb25DcmVhdG9yPGFueSwgVD5cclxuKTogVCB7XHJcbiAgcmV0dXJuIGAke2FjdGlvbkNyZWF0b3J9YCBhcyBUXHJcbn1cclxuXHJcbi8vIGhlbHBlciB0eXBlcyBmb3IgbW9yZSByZWFkYWJsZSB0eXBpbmdzXHJcblxyXG50eXBlIElmUHJlcGFyZUFjdGlvbk1ldGhvZFByb3ZpZGVkPFxyXG4gIFBBIGV4dGVuZHMgUHJlcGFyZUFjdGlvbjxhbnk+IHwgdm9pZCxcclxuICBUcnVlLFxyXG4gIEZhbHNlXHJcbj4gPSBQQSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55ID8gVHJ1ZSA6IEZhbHNlXHJcbiIsImltcG9ydCB0eXBlIHsgRHJhZnQgfSBmcm9tICdpbW1lcidcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZSwgeyBpc0RyYWZ0LCBpc0RyYWZ0YWJsZSB9IGZyb20gJ2ltbWVyJ1xyXG5pbXBvcnQgdHlwZSB7IEFueUFjdGlvbiwgQWN0aW9uLCBSZWR1Y2VyIH0gZnJvbSAncmVkdXgnXHJcbmltcG9ydCB0eXBlIHsgQWN0aW9uUmVkdWNlck1hcEJ1aWxkZXIgfSBmcm9tICcuL21hcEJ1aWxkZXJzJ1xyXG5pbXBvcnQgeyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayB9IGZyb20gJy4vbWFwQnVpbGRlcnMnXHJcbmltcG9ydCB0eXBlIHsgTm9JbmZlciB9IGZyb20gJy4vdHNIZWxwZXJzJ1xyXG5pbXBvcnQgeyBmcmVlemVEcmFmdGFibGUgfSBmcm9tICcuL3V0aWxzJ1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgYSBtYXBwaW5nIGZyb20gYWN0aW9uIHR5cGVzIHRvIGNvcnJlc3BvbmRpbmcgYWN0aW9uIG9iamVjdCBzaGFwZXMuXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkIFRoaXMgc2hvdWxkIG5vdCBiZSB1c2VkIG1hbnVhbGx5IC0gaXQgaXMgb25seSB1c2VkIGZvciBpbnRlcm5hbFxyXG4gKiAgICAgICAgICAgICBpbmZlcmVuY2UgcHVycG9zZXMgYW5kIHNob3VsZCBub3QgaGF2ZSBhbnkgZnVydGhlciB2YWx1ZS5cclxuICogICAgICAgICAgICAgSXQgbWlnaHQgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25zPFQgZXh0ZW5kcyBrZXlvZiBhbnkgPSBzdHJpbmc+ID0gUmVjb3JkPFQsIEFjdGlvbj5cclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2UgYFR5cGVHdWFyZGAgaW5zdGVhZFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25NYXRjaGVyPEEgZXh0ZW5kcyBBbnlBY3Rpb24+IHtcclxuICAoYWN0aW9uOiBBbnlBY3Rpb24pOiBhY3Rpb24gaXMgQVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBY3Rpb25NYXRjaGVyRGVzY3JpcHRpb248UywgQSBleHRlbmRzIEFueUFjdGlvbj4gPSB7XHJcbiAgbWF0Y2hlcjogQWN0aW9uTWF0Y2hlcjxBPlxyXG4gIHJlZHVjZXI6IENhc2VSZWR1Y2VyPFMsIE5vSW5mZXI8QT4+XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJlYWRvbmx5QWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbjxTPiA9IFJlYWRvbmx5QXJyYXk8XHJcbiAgQWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uPFMsIGFueT5cclxuPlxyXG5cclxuZXhwb3J0IHR5cGUgQWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbjxTPiA9IEFycmF5PFxyXG4gIEFjdGlvbk1hdGNoZXJEZXNjcmlwdGlvbjxTLCBhbnk+XHJcbj5cclxuXHJcbi8qKlxyXG4gKiBBICpjYXNlIHJlZHVjZXIqIGlzIGEgcmVkdWNlciBmdW5jdGlvbiBmb3IgYSBzcGVjaWZpYyBhY3Rpb24gdHlwZS4gQ2FzZVxyXG4gKiByZWR1Y2VycyBjYW4gYmUgY29tcG9zZWQgdG8gZnVsbCByZWR1Y2VycyB1c2luZyBgY3JlYXRlUmVkdWNlcigpYC5cclxuICpcclxuICogVW5saWtlIGEgbm9ybWFsIFJlZHV4IHJlZHVjZXIsIGEgY2FzZSByZWR1Y2VyIGlzIG5ldmVyIGNhbGxlZCB3aXRoIGFuXHJcbiAqIGB1bmRlZmluZWRgIHN0YXRlIHRvIGRldGVybWluZSB0aGUgaW5pdGlhbCBzdGF0ZS4gSW5zdGVhZCwgdGhlIGluaXRpYWxcclxuICogc3RhdGUgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQgYXMgYW4gYXJndW1lbnQgdG8gYGNyZWF0ZVJlZHVjZXIoKWAuXHJcbiAqXHJcbiAqIEluIGFkZGl0aW9uLCBhIGNhc2UgcmVkdWNlciBjYW4gY2hvb3NlIHRvIG11dGF0ZSB0aGUgcGFzc2VkLWluIGBzdGF0ZWBcclxuICogdmFsdWUgZGlyZWN0bHkgaW5zdGVhZCBvZiByZXR1cm5pbmcgYSBuZXcgc3RhdGUuIFRoaXMgZG9lcyBub3QgYWN0dWFsbHlcclxuICogY2F1c2UgdGhlIHN0b3JlIHN0YXRlIHRvIGJlIG11dGF0ZWQgZGlyZWN0bHk7IGluc3RlYWQsIHRoYW5rcyB0b1xyXG4gKiBbaW1tZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9td2VzdHN0cmF0ZS9pbW1lciksIHRoZSBtdXRhdGlvbnMgYXJlXHJcbiAqIHRyYW5zbGF0ZWQgdG8gY29weSBvcGVyYXRpb25zIHRoYXQgcmVzdWx0IGluIGEgbmV3IHN0YXRlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDYXNlUmVkdWNlcjxTID0gYW55LCBBIGV4dGVuZHMgQWN0aW9uID0gQW55QWN0aW9uPiA9IChcclxuICBzdGF0ZTogRHJhZnQ8Uz4sXHJcbiAgYWN0aW9uOiBBXHJcbikgPT4gTm9JbmZlcjxTPiB8IHZvaWQgfCBEcmFmdDxOb0luZmVyPFM+PlxyXG5cclxuLyoqXHJcbiAqIEEgbWFwcGluZyBmcm9tIGFjdGlvbiB0eXBlcyB0byBjYXNlIHJlZHVjZXJzIGZvciBgY3JlYXRlUmVkdWNlcigpYC5cclxuICpcclxuICogQGRlcHJlY2F0ZWQgVGhpcyBzaG91bGQgbm90IGJlIHVzZWQgbWFudWFsbHkgLSBpdCBpcyBvbmx5IHVzZWRcclxuICogICAgICAgICAgICAgZm9yIGludGVybmFsIGluZmVyZW5jZSBwdXJwb3NlcyBhbmQgdXNpbmcgaXQgbWFudWFsbHlcclxuICogICAgICAgICAgICAgd291bGQgbGVhZCB0byB0eXBlIGVyYXN1cmUuXHJcbiAqICAgICAgICAgICAgIEl0IG1pZ2h0IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2FzZVJlZHVjZXJzPFMsIEFTIGV4dGVuZHMgQWN0aW9ucz4gPSB7XHJcbiAgW1QgaW4ga2V5b2YgQVNdOiBBU1tUXSBleHRlbmRzIEFjdGlvbiA/IENhc2VSZWR1Y2VyPFMsIEFTW1RdPiA6IHZvaWRcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTm90RnVuY3Rpb248VD4gPSBUIGV4dGVuZHMgRnVuY3Rpb24gPyBuZXZlciA6IFRcclxuXHJcbmZ1bmN0aW9uIGlzU3RhdGVGdW5jdGlvbjxTPih4OiB1bmtub3duKTogeCBpcyAoKSA9PiBTIHtcclxuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbidcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUmVkdWNlcldpdGhJbml0aWFsU3RhdGU8UyBleHRlbmRzIE5vdEZ1bmN0aW9uPGFueT4+ID0gUmVkdWNlcjxTPiAmIHtcclxuICBnZXRJbml0aWFsU3RhdGU6ICgpID0+IFNcclxufVxyXG5cclxubGV0IGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24gPSBmYWxzZVxyXG5cclxuLyoqXHJcbiAqIEEgdXRpbGl0eSBmdW5jdGlvbiB0aGF0IGFsbG93cyBkZWZpbmluZyBhIHJlZHVjZXIgYXMgYSBtYXBwaW5nIGZyb20gYWN0aW9uXHJcbiAqIHR5cGUgdG8gKmNhc2UgcmVkdWNlciogZnVuY3Rpb25zIHRoYXQgaGFuZGxlIHRoZXNlIGFjdGlvbiB0eXBlcy4gVGhlXHJcbiAqIHJlZHVjZXIncyBpbml0aWFsIHN0YXRlIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXHJcbiAqXHJcbiAqIEByZW1hcmtzXHJcbiAqIFRoZSBib2R5IG9mIGV2ZXJ5IGNhc2UgcmVkdWNlciBpcyBpbXBsaWNpdGx5IHdyYXBwZWQgd2l0aCBhIGNhbGwgdG9cclxuICogYHByb2R1Y2UoKWAgZnJvbSB0aGUgW2ltbWVyXShodHRwczovL2dpdGh1Yi5jb20vbXdlc3RzdHJhdGUvaW1tZXIpIGxpYnJhcnkuXHJcbiAqIFRoaXMgbWVhbnMgdGhhdCByYXRoZXIgdGhhbiByZXR1cm5pbmcgYSBuZXcgc3RhdGUgb2JqZWN0LCB5b3UgY2FuIGFsc29cclxuICogbXV0YXRlIHRoZSBwYXNzZWQtaW4gc3RhdGUgb2JqZWN0IGRpcmVjdGx5OyB0aGVzZSBtdXRhdGlvbnMgd2lsbCB0aGVuIGJlXHJcbiAqIGF1dG9tYXRpY2FsbHkgYW5kIGVmZmljaWVudGx5IHRyYW5zbGF0ZWQgaW50byBjb3BpZXMsIGdpdmluZyB5b3UgYm90aFxyXG4gKiBjb252ZW5pZW5jZSBhbmQgaW1tdXRhYmlsaXR5LlxyXG4gKlxyXG4gKiBAb3ZlcmxvYWRTdW1tYXJ5XHJcbiAqIFRoaXMgb3ZlcmxvYWQgYWNjZXB0cyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSBgYnVpbGRlcmAgb2JqZWN0IGFzIGl0cyBhcmd1bWVudC5cclxuICogVGhhdCBidWlsZGVyIHByb3ZpZGVzIGBhZGRDYXNlYCwgYGFkZE1hdGNoZXJgIGFuZCBgYWRkRGVmYXVsdENhc2VgIGZ1bmN0aW9ucyB0aGF0IG1heSBiZVxyXG4gKiBjYWxsZWQgdG8gZGVmaW5lIHdoYXQgYWN0aW9ucyB0aGlzIHJlZHVjZXIgd2lsbCBoYW5kbGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBpbml0aWFsU3RhdGUgLSBgU3RhdGUgfCAoKCkgPT4gU3RhdGUpYDogVGhlIGluaXRpYWwgc3RhdGUgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSByZWR1Y2VyIGlzIGNhbGxlZCB0aGUgZmlyc3QgdGltZS4gVGhpcyBtYXkgYWxzbyBiZSBhIFwibGF6eSBpbml0aWFsaXplclwiIGZ1bmN0aW9uLCB3aGljaCBzaG91bGQgcmV0dXJuIGFuIGluaXRpYWwgc3RhdGUgdmFsdWUgd2hlbiBjYWxsZWQuIFRoaXMgd2lsbCBiZSB1c2VkIHdoZW5ldmVyIHRoZSByZWR1Y2VyIGlzIGNhbGxlZCB3aXRoIGB1bmRlZmluZWRgIGFzIGl0cyBzdGF0ZSB2YWx1ZSwgYW5kIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGNhc2VzIGxpa2UgcmVhZGluZyBpbml0aWFsIHN0YXRlIGZyb20gYGxvY2FsU3RvcmFnZWAuXHJcbiAqIEBwYXJhbSBidWlsZGVyQ2FsbGJhY2sgLSBgKGJ1aWxkZXI6IEJ1aWxkZXIpID0+IHZvaWRgIEEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBhICpidWlsZGVyKiBvYmplY3QgdG8gZGVmaW5lXHJcbiAqICAgY2FzZSByZWR1Y2VycyB2aWEgY2FsbHMgdG8gYGJ1aWxkZXIuYWRkQ2FzZShhY3Rpb25DcmVhdG9yT3JUeXBlLCByZWR1Y2VyKWAuXHJcbiAqIEBleGFtcGxlXHJcbmBgYHRzXHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlQWN0aW9uLFxyXG4gIGNyZWF0ZVJlZHVjZXIsXHJcbiAgQW55QWN0aW9uLFxyXG4gIFBheWxvYWRBY3Rpb24sXHJcbn0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuXHJcbmNvbnN0IGluY3JlbWVudCA9IGNyZWF0ZUFjdGlvbjxudW1iZXI+KFwiaW5jcmVtZW50XCIpO1xyXG5jb25zdCBkZWNyZW1lbnQgPSBjcmVhdGVBY3Rpb248bnVtYmVyPihcImRlY3JlbWVudFwiKTtcclxuXHJcbmZ1bmN0aW9uIGlzQWN0aW9uV2l0aE51bWJlclBheWxvYWQoXHJcbiAgYWN0aW9uOiBBbnlBY3Rpb25cclxuKTogYWN0aW9uIGlzIFBheWxvYWRBY3Rpb248bnVtYmVyPiB7XHJcbiAgcmV0dXJuIHR5cGVvZiBhY3Rpb24ucGF5bG9hZCA9PT0gXCJudW1iZXJcIjtcclxufVxyXG5cclxuY29uc3QgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoXHJcbiAge1xyXG4gICAgY291bnRlcjogMCxcclxuICAgIHN1bU9mTnVtYmVyUGF5bG9hZHM6IDAsXHJcbiAgICB1bmhhbmRsZWRBY3Rpb25zOiAwLFxyXG4gIH0sXHJcbiAgKGJ1aWxkZXIpID0+IHtcclxuICAgIGJ1aWxkZXJcclxuICAgICAgLmFkZENhc2UoaW5jcmVtZW50LCAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIC8vIGFjdGlvbiBpcyBpbmZlcnJlZCBjb3JyZWN0bHkgaGVyZVxyXG4gICAgICAgIHN0YXRlLmNvdW50ZXIgKz0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIH0pXHJcbiAgICAgIC8vIFlvdSBjYW4gY2hhaW4gY2FsbHMsIG9yIGhhdmUgc2VwYXJhdGUgYGJ1aWxkZXIuYWRkQ2FzZSgpYCBsaW5lcyBlYWNoIHRpbWVcclxuICAgICAgLmFkZENhc2UoZGVjcmVtZW50LCAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIHN0YXRlLmNvdW50ZXIgLT0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIH0pXHJcbiAgICAgIC8vIFlvdSBjYW4gYXBwbHkgYSBcIm1hdGNoZXIgZnVuY3Rpb25cIiB0byBpbmNvbWluZyBhY3Rpb25zXHJcbiAgICAgIC5hZGRNYXRjaGVyKGlzQWN0aW9uV2l0aE51bWJlclBheWxvYWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7fSlcclxuICAgICAgLy8gYW5kIHByb3ZpZGUgYSBkZWZhdWx0IGNhc2UgaWYgbm8gb3RoZXIgaGFuZGxlcnMgbWF0Y2hlZFxyXG4gICAgICAuYWRkRGVmYXVsdENhc2UoKHN0YXRlLCBhY3Rpb24pID0+IHt9KTtcclxuICB9XHJcbik7XHJcbmBgYFxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVkdWNlcjxTIGV4dGVuZHMgTm90RnVuY3Rpb248YW55Pj4oXHJcbiAgaW5pdGlhbFN0YXRlOiBTIHwgKCgpID0+IFMpLFxyXG4gIGJ1aWxkZXJDYWxsYmFjazogKGJ1aWxkZXI6IEFjdGlvblJlZHVjZXJNYXBCdWlsZGVyPFM+KSA9PiB2b2lkXHJcbik6IFJlZHVjZXJXaXRoSW5pdGlhbFN0YXRlPFM+XHJcblxyXG4vKipcclxuICogQSB1dGlsaXR5IGZ1bmN0aW9uIHRoYXQgYWxsb3dzIGRlZmluaW5nIGEgcmVkdWNlciBhcyBhIG1hcHBpbmcgZnJvbSBhY3Rpb25cclxuICogdHlwZSB0byAqY2FzZSByZWR1Y2VyKiBmdW5jdGlvbnMgdGhhdCBoYW5kbGUgdGhlc2UgYWN0aW9uIHR5cGVzLiBUaGVcclxuICogcmVkdWNlcidzIGluaXRpYWwgc3RhdGUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudC5cclxuICpcclxuICogVGhlIGJvZHkgb2YgZXZlcnkgY2FzZSByZWR1Y2VyIGlzIGltcGxpY2l0bHkgd3JhcHBlZCB3aXRoIGEgY2FsbCB0b1xyXG4gKiBgcHJvZHVjZSgpYCBmcm9tIHRoZSBbaW1tZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9td2VzdHN0cmF0ZS9pbW1lcikgbGlicmFyeS5cclxuICogVGhpcyBtZWFucyB0aGF0IHJhdGhlciB0aGFuIHJldHVybmluZyBhIG5ldyBzdGF0ZSBvYmplY3QsIHlvdSBjYW4gYWxzb1xyXG4gKiBtdXRhdGUgdGhlIHBhc3NlZC1pbiBzdGF0ZSBvYmplY3QgZGlyZWN0bHk7IHRoZXNlIG11dGF0aW9ucyB3aWxsIHRoZW4gYmVcclxuICogYXV0b21hdGljYWxseSBhbmQgZWZmaWNpZW50bHkgdHJhbnNsYXRlZCBpbnRvIGNvcGllcywgZ2l2aW5nIHlvdSBib3RoXHJcbiAqIGNvbnZlbmllbmNlIGFuZCBpbW11dGFiaWxpdHkuXHJcbiAqIFxyXG4gKiBAb3ZlcmxvYWRTdW1tYXJ5XHJcbiAqIFRoaXMgb3ZlcmxvYWQgYWNjZXB0cyBhbiBvYmplY3Qgd2hlcmUgdGhlIGtleXMgYXJlIHN0cmluZyBhY3Rpb24gdHlwZXMsIGFuZCB0aGUgdmFsdWVzXHJcbiAqIGFyZSBjYXNlIHJlZHVjZXIgZnVuY3Rpb25zIHRvIGhhbmRsZSB0aG9zZSBhY3Rpb24gdHlwZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBpbml0aWFsU3RhdGUgLSBgU3RhdGUgfCAoKCkgPT4gU3RhdGUpYDogVGhlIGluaXRpYWwgc3RhdGUgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSByZWR1Y2VyIGlzIGNhbGxlZCB0aGUgZmlyc3QgdGltZS4gVGhpcyBtYXkgYWxzbyBiZSBhIFwibGF6eSBpbml0aWFsaXplclwiIGZ1bmN0aW9uLCB3aGljaCBzaG91bGQgcmV0dXJuIGFuIGluaXRpYWwgc3RhdGUgdmFsdWUgd2hlbiBjYWxsZWQuIFRoaXMgd2lsbCBiZSB1c2VkIHdoZW5ldmVyIHRoZSByZWR1Y2VyIGlzIGNhbGxlZCB3aXRoIGB1bmRlZmluZWRgIGFzIGl0cyBzdGF0ZSB2YWx1ZSwgYW5kIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGNhc2VzIGxpa2UgcmVhZGluZyBpbml0aWFsIHN0YXRlIGZyb20gYGxvY2FsU3RvcmFnZWAuXHJcbiAqIEBwYXJhbSBhY3Rpb25zTWFwIC0gQW4gb2JqZWN0IG1hcHBpbmcgZnJvbSBhY3Rpb24gdHlwZXMgdG8gX2Nhc2UgcmVkdWNlcnNfLCBlYWNoIG9mIHdoaWNoIGhhbmRsZXMgb25lIHNwZWNpZmljIGFjdGlvbiB0eXBlLlxyXG4gKiBAcGFyYW0gYWN0aW9uTWF0Y2hlcnMgLSBBbiBhcnJheSBvZiBtYXRjaGVyIGRlZmluaXRpb25zIGluIHRoZSBmb3JtIGB7bWF0Y2hlciwgcmVkdWNlcn1gLlxyXG4gKiAgIEFsbCBtYXRjaGluZyByZWR1Y2VycyB3aWxsIGJlIGV4ZWN1dGVkIGluIG9yZGVyLCBpbmRlcGVuZGVudGx5IGlmIGEgY2FzZSByZWR1Y2VyIG1hdGNoZWQgb3Igbm90LlxyXG4gKiBAcGFyYW0gZGVmYXVsdENhc2VSZWR1Y2VyIC0gQSBcImRlZmF1bHQgY2FzZVwiIHJlZHVjZXIgdGhhdCBpcyBleGVjdXRlZCBpZiBubyBjYXNlIHJlZHVjZXIgYW5kIG5vIG1hdGNoZXJcclxuICogICByZWR1Y2VyIHdhcyBleGVjdXRlZCBmb3IgdGhpcyBhY3Rpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbmBgYGpzXHJcbmNvbnN0IGNvdW50ZXJSZWR1Y2VyID0gY3JlYXRlUmVkdWNlcigwLCB7XHJcbiAgaW5jcmVtZW50OiAoc3RhdGUsIGFjdGlvbikgPT4gc3RhdGUgKyBhY3Rpb24ucGF5bG9hZCxcclxuICBkZWNyZW1lbnQ6IChzdGF0ZSwgYWN0aW9uKSA9PiBzdGF0ZSAtIGFjdGlvbi5wYXlsb2FkXHJcbn0pXHJcblxyXG4vLyBBbHRlcm5hdGVseSwgdXNlIGEgXCJsYXp5IGluaXRpYWxpemVyXCIgdG8gcHJvdmlkZSB0aGUgaW5pdGlhbCBzdGF0ZVxyXG4vLyAod29ya3Mgd2l0aCBlaXRoZXIgZm9ybSBvZiBjcmVhdGVSZWR1Y2VyKVxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiAwXHJcbmNvbnN0IGNvdW50ZXJSZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIHtcclxuICBpbmNyZW1lbnQ6IChzdGF0ZSwgYWN0aW9uKSA9PiBzdGF0ZSArIGFjdGlvbi5wYXlsb2FkLFxyXG4gIGRlY3JlbWVudDogKHN0YXRlLCBhY3Rpb24pID0+IHN0YXRlIC0gYWN0aW9uLnBheWxvYWRcclxufSlcclxuYGBgXHJcbiBcclxuICogQWN0aW9uIGNyZWF0b3JzIHRoYXQgd2VyZSBnZW5lcmF0ZWQgdXNpbmcgW2BjcmVhdGVBY3Rpb25gXSguL2NyZWF0ZUFjdGlvbikgbWF5IGJlIHVzZWQgZGlyZWN0bHkgYXMgdGhlIGtleXMgaGVyZSwgdXNpbmcgY29tcHV0ZWQgcHJvcGVydHkgc3ludGF4OlxyXG5cclxuYGBganNcclxuY29uc3QgaW5jcmVtZW50ID0gY3JlYXRlQWN0aW9uKCdpbmNyZW1lbnQnKVxyXG5jb25zdCBkZWNyZW1lbnQgPSBjcmVhdGVBY3Rpb24oJ2RlY3JlbWVudCcpXHJcblxyXG5jb25zdCBjb3VudGVyUmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoMCwge1xyXG4gIFtpbmNyZW1lbnRdOiAoc3RhdGUsIGFjdGlvbikgPT4gc3RhdGUgKyBhY3Rpb24ucGF5bG9hZCxcclxuICBbZGVjcmVtZW50LnR5cGVdOiAoc3RhdGUsIGFjdGlvbikgPT4gc3RhdGUgLSBhY3Rpb24ucGF5bG9hZFxyXG59KVxyXG5gYGBcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXI8XHJcbiAgUyBleHRlbmRzIE5vdEZ1bmN0aW9uPGFueT4sXHJcbiAgQ1IgZXh0ZW5kcyBDYXNlUmVkdWNlcnM8UywgYW55PiA9IENhc2VSZWR1Y2VyczxTLCBhbnk+XHJcbj4oXHJcbiAgaW5pdGlhbFN0YXRlOiBTIHwgKCgpID0+IFMpLFxyXG4gIGFjdGlvbnNNYXA6IENSLFxyXG4gIGFjdGlvbk1hdGNoZXJzPzogQWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbjxTPixcclxuICBkZWZhdWx0Q2FzZVJlZHVjZXI/OiBDYXNlUmVkdWNlcjxTPlxyXG4pOiBSZWR1Y2VyV2l0aEluaXRpYWxTdGF0ZTxTPlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXI8UyBleHRlbmRzIE5vdEZ1bmN0aW9uPGFueT4+KFxyXG4gIGluaXRpYWxTdGF0ZTogUyB8ICgoKSA9PiBTKSxcclxuICBtYXBPckJ1aWxkZXJDYWxsYmFjazpcclxuICAgIHwgQ2FzZVJlZHVjZXJzPFMsIGFueT5cclxuICAgIHwgKChidWlsZGVyOiBBY3Rpb25SZWR1Y2VyTWFwQnVpbGRlcjxTPikgPT4gdm9pZCksXHJcbiAgYWN0aW9uTWF0Y2hlcnM6IFJlYWRvbmx5QWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbjxTPiA9IFtdLFxyXG4gIGRlZmF1bHRDYXNlUmVkdWNlcj86IENhc2VSZWR1Y2VyPFM+XHJcbik6IFJlZHVjZXJXaXRoSW5pdGlhbFN0YXRlPFM+IHtcclxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgaWYgKHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dE9iamVjdE5vdGF0aW9uKSB7XHJcbiAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IHRydWVcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBcIlRoZSBvYmplY3Qgbm90YXRpb24gZm9yIGBjcmVhdGVSZWR1Y2VyYCBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJUSyAyLjAuIFBsZWFzZSB1c2UgdGhlICdidWlsZGVyIGNhbGxiYWNrJyBub3RhdGlvbiBpbnN0ZWFkOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9jcmVhdGVSZWR1Y2VyXCJcclxuICAgICAgICApXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBbYWN0aW9uc01hcCwgZmluYWxBY3Rpb25NYXRjaGVycywgZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdID1cclxuICAgIHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG1hcE9yQnVpbGRlckNhbGxiYWNrKVxyXG4gICAgICA6IFttYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl1cclxuXHJcbiAgLy8gRW5zdXJlIHRoZSBpbml0aWFsIHN0YXRlIGdldHMgZnJvemVuIGVpdGhlciB3YXkgKGlmIGRyYWZ0YWJsZSlcclxuICBsZXQgZ2V0SW5pdGlhbFN0YXRlOiAoKSA9PiBTXHJcbiAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICBnZXRJbml0aWFsU3RhdGUgPSAoKSA9PiBmcmVlemVEcmFmdGFibGUoaW5pdGlhbFN0YXRlKCkpXHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGZyb3plbkluaXRpYWxTdGF0ZSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpXHJcbiAgICBnZXRJbml0aWFsU3RhdGUgPSAoKSA9PiBmcm96ZW5Jbml0aWFsU3RhdGVcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKSwgYWN0aW9uOiBhbnkpOiBTIHtcclxuICAgIGxldCBjYXNlUmVkdWNlcnMgPSBbXHJcbiAgICAgIGFjdGlvbnNNYXBbYWN0aW9uLnR5cGVdLFxyXG4gICAgICAuLi5maW5hbEFjdGlvbk1hdGNoZXJzXHJcbiAgICAgICAgLmZpbHRlcigoeyBtYXRjaGVyIH0pID0+IG1hdGNoZXIoYWN0aW9uKSlcclxuICAgICAgICAubWFwKCh7IHJlZHVjZXIgfSkgPT4gcmVkdWNlciksXHJcbiAgICBdXHJcbiAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcigoY3IpID0+ICEhY3IpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNhc2VSZWR1Y2Vycy5yZWR1Y2UoKHByZXZpb3VzU3RhdGUsIGNhc2VSZWR1Y2VyKTogUyA9PiB7XHJcbiAgICAgIGlmIChjYXNlUmVkdWNlcikge1xyXG4gICAgICAgIGlmIChpc0RyYWZ0KHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAvLyBJZiBpdCdzIGFscmVhZHkgYSBkcmFmdCwgd2UgbXVzdCBhbHJlYWR5IGJlIGluc2lkZSBhIGBjcmVhdGVOZXh0U3RhdGVgIGNhbGwsXHJcbiAgICAgICAgICAvLyBsaWtlbHkgYmVjYXVzZSB0aGlzIGlzIGJlaW5nIHdyYXBwZWQgaW4gYGNyZWF0ZVJlZHVjZXJgLCBgY3JlYXRlU2xpY2VgLCBvciBuZXN0ZWRcclxuICAgICAgICAgIC8vIGluc2lkZSBhbiBleGlzdGluZyBkcmFmdC4gSXQncyBzYWZlIHRvIGp1c3QgcGFzcyB0aGUgZHJhZnQgdG8gdGhlIG11dGF0b3IuXHJcbiAgICAgICAgICBjb25zdCBkcmFmdCA9IHByZXZpb3VzU3RhdGUgYXMgRHJhZnQ8Uz4gLy8gV2UgY2FuIGFzc3VtZSB0aGlzIGlzIGFscmVhZHkgYSBkcmFmdFxyXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbilcclxuXHJcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGVcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0IGFzIFNcclxuICAgICAgICB9IGVsc2UgaWYgKCFpc0RyYWZ0YWJsZShwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgLy8gSWYgc3RhdGUgaXMgbm90IGRyYWZ0YWJsZSAoZXg6IGEgcHJpbWl0aXZlLCBzdWNoIGFzIDApLCB3ZSB3YW50IHRvIGRpcmVjdGx5XHJcbiAgICAgICAgICAvLyByZXR1cm4gdGhlIGNhc2VSZWR1Y2VyIGZ1bmMgYW5kIG5vdCB3cmFwIGl0IHdpdGggcHJvZHVjZS5cclxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUgYXMgYW55LCBhY3Rpb24pXHJcblxyXG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcclxuICAgICAgICAgICAgICAnQSBjYXNlIHJlZHVjZXIgb24gYSBub24tZHJhZnRhYmxlIHZhbHVlIG11c3Qgbm90IHJldHVybiB1bmRlZmluZWQnXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0IGFzIFNcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBjcmVhdGVOZXh0U3RhdGUoKSBwcm9kdWNlcyBhbiBJbW11dGFibGU8RHJhZnQ8Uz4+IHJhdGhlclxyXG4gICAgICAgICAgLy8gdGhhbiBhbiBJbW11dGFibGU8Uz4sIGFuZCBUeXBlU2NyaXB0IGNhbm5vdCBmaW5kIG91dCBob3cgdG8gcmVjb25jaWxlXHJcbiAgICAgICAgICAvLyB0aGVzZSB0d28gdHlwZXMuXHJcbiAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHByZXZpb3VzU3RhdGUsIChkcmFmdDogRHJhZnQ8Uz4pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGVcclxuICAgIH0sIHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgcmVkdWNlci5nZXRJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGVcclxuXHJcbiAgcmV0dXJuIHJlZHVjZXIgYXMgUmVkdWNlcldpdGhJbml0aWFsU3RhdGU8Uz5cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IEFjdGlvbiwgQW55QWN0aW9uIH0gZnJvbSAncmVkdXgnXHJcbmltcG9ydCB0eXBlIHtcclxuICBDYXNlUmVkdWNlcixcclxuICBDYXNlUmVkdWNlcnMsXHJcbiAgQWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbixcclxufSBmcm9tICcuL2NyZWF0ZVJlZHVjZXInXHJcbmltcG9ydCB0eXBlIHsgVHlwZUd1YXJkIH0gZnJvbSAnLi90c0hlbHBlcnMnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVkQWN0aW9uQ3JlYXRvcjxUeXBlIGV4dGVuZHMgc3RyaW5nPiB7XHJcbiAgKC4uLmFyZ3M6IGFueVtdKTogQWN0aW9uPFR5cGU+XHJcbiAgdHlwZTogVHlwZVxyXG59XHJcblxyXG4vKipcclxuICogQSBidWlsZGVyIGZvciBhbiBhY3Rpb24gPC0+IHJlZHVjZXIgbWFwLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvblJlZHVjZXJNYXBCdWlsZGVyPFN0YXRlPiB7XHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIGNhc2UgcmVkdWNlciB0byBoYW5kbGUgYSBzaW5nbGUgZXhhY3QgYWN0aW9uIHR5cGUuXHJcbiAgICogQHJlbWFya3NcclxuICAgKiBBbGwgY2FsbHMgdG8gYGJ1aWxkZXIuYWRkQ2FzZWAgbXVzdCBjb21lIGJlZm9yZSBhbnkgY2FsbHMgdG8gYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgb3IgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgLlxyXG4gICAqIEBwYXJhbSBhY3Rpb25DcmVhdG9yIC0gRWl0aGVyIGEgcGxhaW4gYWN0aW9uIHR5cGUgc3RyaW5nLCBvciBhbiBhY3Rpb24gY3JlYXRvciBnZW5lcmF0ZWQgYnkgW2BjcmVhdGVBY3Rpb25gXSguL2NyZWF0ZUFjdGlvbikgdGhhdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGFjdGlvbiB0eXBlLlxyXG4gICAqIEBwYXJhbSByZWR1Y2VyIC0gVGhlIGFjdHVhbCBjYXNlIHJlZHVjZXIgZnVuY3Rpb24uXHJcbiAgICovXHJcbiAgYWRkQ2FzZTxBY3Rpb25DcmVhdG9yIGV4dGVuZHMgVHlwZWRBY3Rpb25DcmVhdG9yPHN0cmluZz4+KFxyXG4gICAgYWN0aW9uQ3JlYXRvcjogQWN0aW9uQ3JlYXRvcixcclxuICAgIHJlZHVjZXI6IENhc2VSZWR1Y2VyPFN0YXRlLCBSZXR1cm5UeXBlPEFjdGlvbkNyZWF0b3I+PlxyXG4gICk6IEFjdGlvblJlZHVjZXJNYXBCdWlsZGVyPFN0YXRlPlxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYSBjYXNlIHJlZHVjZXIgdG8gaGFuZGxlIGEgc2luZ2xlIGV4YWN0IGFjdGlvbiB0eXBlLlxyXG4gICAqIEByZW1hcmtzXHJcbiAgICogQWxsIGNhbGxzIHRvIGBidWlsZGVyLmFkZENhc2VgIG11c3QgY29tZSBiZWZvcmUgYW55IGNhbGxzIHRvIGBidWlsZGVyLmFkZE1hdGNoZXJgIG9yIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYC5cclxuICAgKiBAcGFyYW0gYWN0aW9uQ3JlYXRvciAtIEVpdGhlciBhIHBsYWluIGFjdGlvbiB0eXBlIHN0cmluZywgb3IgYW4gYWN0aW9uIGNyZWF0b3IgZ2VuZXJhdGVkIGJ5IFtgY3JlYXRlQWN0aW9uYF0oLi9jcmVhdGVBY3Rpb24pIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBhY3Rpb24gdHlwZS5cclxuICAgKiBAcGFyYW0gcmVkdWNlciAtIFRoZSBhY3R1YWwgY2FzZSByZWR1Y2VyIGZ1bmN0aW9uLlxyXG4gICAqL1xyXG4gIGFkZENhc2U8VHlwZSBleHRlbmRzIHN0cmluZywgQSBleHRlbmRzIEFjdGlvbjxUeXBlPj4oXHJcbiAgICB0eXBlOiBUeXBlLFxyXG4gICAgcmVkdWNlcjogQ2FzZVJlZHVjZXI8U3RhdGUsIEE+XHJcbiAgKTogQWN0aW9uUmVkdWNlck1hcEJ1aWxkZXI8U3RhdGU+XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsbG93cyB5b3UgdG8gbWF0Y2ggeW91ciBpbmNvbWluZyBhY3Rpb25zIGFnYWluc3QgeW91ciBvd24gZmlsdGVyIGZ1bmN0aW9uIGluc3RlYWQgb2Ygb25seSB0aGUgYGFjdGlvbi50eXBlYCBwcm9wZXJ0eS5cclxuICAgKiBAcmVtYXJrc1xyXG4gICAqIElmIG11bHRpcGxlIG1hdGNoZXIgcmVkdWNlcnMgbWF0Y2gsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIG9yZGVyXHJcbiAgICogdGhleSB3ZXJlIGRlZmluZWQgaW4gLSBldmVuIGlmIGEgY2FzZSByZWR1Y2VyIGFscmVhZHkgbWF0Y2hlZC5cclxuICAgKiBBbGwgY2FsbHMgdG8gYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgbXVzdCBjb21lIGFmdGVyIGFueSBjYWxscyB0byBgYnVpbGRlci5hZGRDYXNlYCBhbmQgYmVmb3JlIGFueSBjYWxscyB0byBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAuXHJcbiAgICogQHBhcmFtIG1hdGNoZXIgLSBBIG1hdGNoZXIgZnVuY3Rpb24uIEluIFR5cGVTY3JpcHQsIHRoaXMgc2hvdWxkIGJlIGEgW3R5cGUgcHJlZGljYXRlXShodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9hZHZhbmNlZC10eXBlcy5odG1sI3VzaW5nLXR5cGUtcHJlZGljYXRlcylcclxuICAgKiAgIGZ1bmN0aW9uXHJcbiAgICogQHBhcmFtIHJlZHVjZXIgLSBUaGUgYWN0dWFsIGNhc2UgcmVkdWNlciBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbmBgYHRzXHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlQWN0aW9uLFxyXG4gIGNyZWF0ZVJlZHVjZXIsXHJcbiAgQXN5bmNUaHVuayxcclxuICBBbnlBY3Rpb24sXHJcbn0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuXHJcbnR5cGUgR2VuZXJpY0FzeW5jVGh1bmsgPSBBc3luY1RodW5rPHVua25vd24sIHVua25vd24sIGFueT47XHJcblxyXG50eXBlIFBlbmRpbmdBY3Rpb24gPSBSZXR1cm5UeXBlPEdlbmVyaWNBc3luY1RodW5rW1wicGVuZGluZ1wiXT47XHJcbnR5cGUgUmVqZWN0ZWRBY3Rpb24gPSBSZXR1cm5UeXBlPEdlbmVyaWNBc3luY1RodW5rW1wicmVqZWN0ZWRcIl0+O1xyXG50eXBlIEZ1bGZpbGxlZEFjdGlvbiA9IFJldHVyblR5cGU8R2VuZXJpY0FzeW5jVGh1bmtbXCJmdWxmaWxsZWRcIl0+O1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XHJcbmNvbnN0IHJlc2V0QWN0aW9uID0gY3JlYXRlQWN0aW9uKFwicmVzZXQtdHJhY2tlZC1sb2FkaW5nLXN0YXRlXCIpO1xyXG5cclxuZnVuY3Rpb24gaXNQZW5kaW5nQWN0aW9uKGFjdGlvbjogQW55QWN0aW9uKTogYWN0aW9uIGlzIFBlbmRpbmdBY3Rpb24ge1xyXG4gIHJldHVybiBhY3Rpb24udHlwZS5lbmRzV2l0aChcIi9wZW5kaW5nXCIpO1xyXG59XHJcblxyXG5jb25zdCByZWR1Y2VyID0gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIChidWlsZGVyKSA9PiB7XHJcbiAgYnVpbGRlclxyXG4gICAgLmFkZENhc2UocmVzZXRBY3Rpb24sICgpID0+IGluaXRpYWxTdGF0ZSlcclxuICAgIC8vIG1hdGNoZXIgY2FuIGJlIGRlZmluZWQgb3V0c2lkZSBhcyBhIHR5cGUgcHJlZGljYXRlIGZ1bmN0aW9uXHJcbiAgICAuYWRkTWF0Y2hlcihpc1BlbmRpbmdBY3Rpb24sIChzdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICAgIHN0YXRlW2FjdGlvbi5tZXRhLnJlcXVlc3RJZF0gPSBcInBlbmRpbmdcIjtcclxuICAgIH0pXHJcbiAgICAuYWRkTWF0Y2hlcihcclxuICAgICAgLy8gbWF0Y2hlciBjYW4gYmUgZGVmaW5lZCBpbmxpbmUgYXMgYSB0eXBlIHByZWRpY2F0ZSBmdW5jdGlvblxyXG4gICAgICAoYWN0aW9uKTogYWN0aW9uIGlzIFJlamVjdGVkQWN0aW9uID0+IGFjdGlvbi50eXBlLmVuZHNXaXRoKFwiL3JlamVjdGVkXCIpLFxyXG4gICAgICAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIHN0YXRlW2FjdGlvbi5tZXRhLnJlcXVlc3RJZF0gPSBcInJlamVjdGVkXCI7XHJcbiAgICAgIH1cclxuICAgIClcclxuICAgIC8vIG1hdGNoZXIgY2FuIGp1c3QgcmV0dXJuIGJvb2xlYW4gYW5kIHRoZSBtYXRjaGVyIGNhbiByZWNlaXZlIGEgZ2VuZXJpYyBhcmd1bWVudFxyXG4gICAgLmFkZE1hdGNoZXI8RnVsZmlsbGVkQWN0aW9uPihcclxuICAgICAgKGFjdGlvbikgPT4gYWN0aW9uLnR5cGUuZW5kc1dpdGgoXCIvZnVsZmlsbGVkXCIpLFxyXG4gICAgICAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIHN0YXRlW2FjdGlvbi5tZXRhLnJlcXVlc3RJZF0gPSBcImZ1bGZpbGxlZFwiO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG59KTtcclxuYGBgXHJcbiAgICovXHJcbiAgYWRkTWF0Y2hlcjxBPihcclxuICAgIG1hdGNoZXI6IFR5cGVHdWFyZDxBPiB8ICgoYWN0aW9uOiBhbnkpID0+IGJvb2xlYW4pLFxyXG4gICAgcmVkdWNlcjogQ2FzZVJlZHVjZXI8U3RhdGUsIEEgZXh0ZW5kcyBBbnlBY3Rpb24gPyBBIDogQSAmIEFueUFjdGlvbj5cclxuICApOiBPbWl0PEFjdGlvblJlZHVjZXJNYXBCdWlsZGVyPFN0YXRlPiwgJ2FkZENhc2UnPlxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgXCJkZWZhdWx0IGNhc2VcIiByZWR1Y2VyIHRoYXQgaXMgZXhlY3V0ZWQgaWYgbm8gY2FzZSByZWR1Y2VyIGFuZCBubyBtYXRjaGVyXHJcbiAgICogcmVkdWNlciB3YXMgZXhlY3V0ZWQgZm9yIHRoaXMgYWN0aW9uLlxyXG4gICAqIEBwYXJhbSByZWR1Y2VyIC0gVGhlIGZhbGxiYWNrIFwiZGVmYXVsdCBjYXNlXCIgcmVkdWNlciBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbmBgYHRzXHJcbmltcG9ydCB7IGNyZWF0ZVJlZHVjZXIgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7IG90aGVyQWN0aW9uczogMCB9XHJcbmNvbnN0IHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgYnVpbGRlciA9PiB7XHJcbiAgYnVpbGRlclxyXG4gICAgLy8gLmFkZENhc2UoLi4uKVxyXG4gICAgLy8gLmFkZE1hdGNoZXIoLi4uKVxyXG4gICAgLmFkZERlZmF1bHRDYXNlKChzdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICAgIHN0YXRlLm90aGVyQWN0aW9ucysrXHJcbiAgICB9KVxyXG59KVxyXG5gYGBcclxuICAgKi9cclxuICBhZGREZWZhdWx0Q2FzZShyZWR1Y2VyOiBDYXNlUmVkdWNlcjxTdGF0ZSwgQW55QWN0aW9uPik6IHt9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjazxTPihcclxuICBidWlsZGVyQ2FsbGJhY2s6IChidWlsZGVyOiBBY3Rpb25SZWR1Y2VyTWFwQnVpbGRlcjxTPikgPT4gdm9pZFxyXG4pOiBbXHJcbiAgQ2FzZVJlZHVjZXJzPFMsIGFueT4sXHJcbiAgQWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbjxTPixcclxuICBDYXNlUmVkdWNlcjxTLCBBbnlBY3Rpb24+IHwgdW5kZWZpbmVkXHJcbl0ge1xyXG4gIGNvbnN0IGFjdGlvbnNNYXA6IENhc2VSZWR1Y2VyczxTLCBhbnk+ID0ge31cclxuICBjb25zdCBhY3Rpb25NYXRjaGVyczogQWN0aW9uTWF0Y2hlckRlc2NyaXB0aW9uQ29sbGVjdGlvbjxTPiA9IFtdXHJcbiAgbGV0IGRlZmF1bHRDYXNlUmVkdWNlcjogQ2FzZVJlZHVjZXI8UywgQW55QWN0aW9uPiB8IHVuZGVmaW5lZFxyXG4gIGNvbnN0IGJ1aWxkZXIgPSB7XHJcbiAgICBhZGRDYXNlKFxyXG4gICAgICB0eXBlT3JBY3Rpb25DcmVhdG9yOiBzdHJpbmcgfCBUeXBlZEFjdGlvbkNyZWF0b3I8YW55PixcclxuICAgICAgcmVkdWNlcjogQ2FzZVJlZHVjZXI8Uz5cclxuICAgICkge1xyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgIHRvIGtlZXAgdGhlIGRlZmluaXRpb24gYnkgdGhlIHVzZXIgaW4gbGluZSB3aXRoIGFjdHVhbCBiZWhhdmlvciwgXHJcbiAgICAgICAgIHdlIGVuZm9yY2UgYGFkZENhc2VgIHRvIGFsd2F5cyBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGFkZE1hdGNoZXJgXHJcbiAgICAgICAgIGFzIG1hdGNoaW5nIGNhc2VzIHRha2UgcHJlY2VkZW5jZSBvdmVyIG1hdGNoZXJzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGFjdGlvbk1hdGNoZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgJ2BidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYCdcclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICAnYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCdcclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdHlwZSA9XHJcbiAgICAgICAgdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICA/IHR5cGVPckFjdGlvbkNyZWF0b3JcclxuICAgICAgICAgIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlXHJcbiAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAnYWRkQ2FzZSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZSdcclxuICAgICAgICApXHJcbiAgICAgIH1cclxuICAgICAgYWN0aW9uc01hcFt0eXBlXSA9IHJlZHVjZXJcclxuICAgICAgcmV0dXJuIGJ1aWxkZXJcclxuICAgIH0sXHJcbiAgICBhZGRNYXRjaGVyPEE+KFxyXG4gICAgICBtYXRjaGVyOiBUeXBlR3VhcmQ8QT4sXHJcbiAgICAgIHJlZHVjZXI6IENhc2VSZWR1Y2VyPFMsIEEgZXh0ZW5kcyBBbnlBY3Rpb24gPyBBIDogQSAmIEFueUFjdGlvbj5cclxuICAgICkge1xyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgJ2BidWlsZGVyLmFkZE1hdGNoZXJgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAnXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyLCByZWR1Y2VyIH0pXHJcbiAgICAgIHJldHVybiBidWlsZGVyXHJcbiAgICB9LFxyXG4gICAgYWRkRGVmYXVsdENhc2UocmVkdWNlcjogQ2FzZVJlZHVjZXI8UywgQW55QWN0aW9uPikge1xyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gcmVkdWNlclxyXG4gICAgICByZXR1cm4gYnVpbGRlclxyXG4gICAgfSxcclxuICB9XHJcbiAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpXHJcbiAgcmV0dXJuIFthY3Rpb25zTWFwLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgQW55QWN0aW9uLCBSZWR1Y2VyIH0gZnJvbSAncmVkdXgnXHJcbmltcG9ydCB7IGNyZWF0ZU5leHRTdGF0ZSB9IGZyb20gJy4nXHJcbmltcG9ydCB0eXBlIHtcclxuICBBY3Rpb25DcmVhdG9yV2l0aG91dFBheWxvYWQsXHJcbiAgUGF5bG9hZEFjdGlvbixcclxuICBQYXlsb2FkQWN0aW9uQ3JlYXRvcixcclxuICBQcmVwYXJlQWN0aW9uLFxyXG4gIF9BY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZCxcclxufSBmcm9tICcuL2NyZWF0ZUFjdGlvbidcclxuaW1wb3J0IHsgY3JlYXRlQWN0aW9uIH0gZnJvbSAnLi9jcmVhdGVBY3Rpb24nXHJcbmltcG9ydCB0eXBlIHtcclxuICBDYXNlUmVkdWNlcixcclxuICBDYXNlUmVkdWNlcnMsXHJcbiAgUmVkdWNlcldpdGhJbml0aWFsU3RhdGUsXHJcbn0gZnJvbSAnLi9jcmVhdGVSZWR1Y2VyJ1xyXG5pbXBvcnQgeyBjcmVhdGVSZWR1Y2VyLCBOb3RGdW5jdGlvbiB9IGZyb20gJy4vY3JlYXRlUmVkdWNlcidcclxuaW1wb3J0IHR5cGUgeyBBY3Rpb25SZWR1Y2VyTWFwQnVpbGRlciB9IGZyb20gJy4vbWFwQnVpbGRlcnMnXHJcbmltcG9ydCB7IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIH0gZnJvbSAnLi9tYXBCdWlsZGVycydcclxuaW1wb3J0IHR5cGUgeyBOb0luZmVyIH0gZnJvbSAnLi90c0hlbHBlcnMnXHJcbmltcG9ydCB7IGZyZWV6ZURyYWZ0YWJsZSB9IGZyb20gJy4vdXRpbHMnXHJcblxyXG5sZXQgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IGZhbHNlXHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGNyZWF0b3IgYXR0YWNoZWQgdG8gYSBzbGljZS5cclxuICpcclxuICogQGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBQYXlsb2FkQWN0aW9uQ3JlYXRvciBkaXJlY3RseVxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTbGljZUFjdGlvbkNyZWF0b3I8UD4gPSBQYXlsb2FkQWN0aW9uQ3JlYXRvcjxQPlxyXG5cclxuLyoqXHJcbiAqIFRoZSByZXR1cm4gdmFsdWUgb2YgYGNyZWF0ZVNsaWNlYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNsaWNlPFxyXG4gIFN0YXRlID0gYW55LFxyXG4gIENhc2VSZWR1Y2VycyBleHRlbmRzIFNsaWNlQ2FzZVJlZHVjZXJzPFN0YXRlPiA9IFNsaWNlQ2FzZVJlZHVjZXJzPFN0YXRlPixcclxuICBOYW1lIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nXHJcbj4ge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzbGljZSBuYW1lLlxyXG4gICAqL1xyXG4gIG5hbWU6IE5hbWVcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHNsaWNlJ3MgcmVkdWNlci5cclxuICAgKi9cclxuICByZWR1Y2VyOiBSZWR1Y2VyPFN0YXRlPlxyXG5cclxuICAvKipcclxuICAgKiBBY3Rpb24gY3JlYXRvcnMgZm9yIHRoZSB0eXBlcyBvZiBhY3Rpb25zIHRoYXQgYXJlIGhhbmRsZWQgYnkgdGhlIHNsaWNlXHJcbiAgICogcmVkdWNlci5cclxuICAgKi9cclxuICBhY3Rpb25zOiBDYXNlUmVkdWNlckFjdGlvbnM8Q2FzZVJlZHVjZXJzLCBOYW1lPlxyXG5cclxuICAvKipcclxuICAgKiBUaGUgaW5kaXZpZHVhbCBjYXNlIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgaW4gdGhlIGByZWR1Y2Vyc2AgcGFyYW1ldGVyLlxyXG4gICAqIFRoaXMgZW5hYmxlcyByZXVzZSBhbmQgdGVzdGluZyBpZiB0aGV5IHdlcmUgZGVmaW5lZCBpbmxpbmUgd2hlbiBjYWxsaW5nIGBjcmVhdGVTbGljZWAuXHJcbiAgICovXHJcbiAgY2FzZVJlZHVjZXJzOiBTbGljZURlZmluZWRDYXNlUmVkdWNlcnM8Q2FzZVJlZHVjZXJzPlxyXG5cclxuICAvKipcclxuICAgKiBQcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGluaXRpYWwgc3RhdGUgdmFsdWUgZ2l2ZW4gdG8gdGhlIHNsaWNlLlxyXG4gICAqIElmIGEgbGF6eSBzdGF0ZSBpbml0aWFsaXplciB3YXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgY2FsbGVkIGFuZCBhIGZyZXNoIHZhbHVlIHJldHVybmVkLlxyXG4gICAqL1xyXG4gIGdldEluaXRpYWxTdGF0ZTogKCkgPT4gU3RhdGVcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIGBjcmVhdGVTbGljZSgpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVTbGljZU9wdGlvbnM8XHJcbiAgU3RhdGUgPSBhbnksXHJcbiAgQ1IgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2VyczxTdGF0ZT4gPSBTbGljZUNhc2VSZWR1Y2VyczxTdGF0ZT4sXHJcbiAgTmFtZSBleHRlbmRzIHN0cmluZyA9IHN0cmluZ1xyXG4+IHtcclxuICAvKipcclxuICAgKiBUaGUgc2xpY2UncyBuYW1lLiBVc2VkIHRvIG5hbWVzcGFjZSB0aGUgZ2VuZXJhdGVkIGFjdGlvbiB0eXBlcy5cclxuICAgKi9cclxuICBuYW1lOiBOYW1lXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBpbml0aWFsIHN0YXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgcmVkdWNlciBpcyBjYWxsZWQgdGhlIGZpcnN0IHRpbWUuIFRoaXMgbWF5IGFsc28gYmUgYSBcImxhenkgaW5pdGlhbGl6ZXJcIiBmdW5jdGlvbiwgd2hpY2ggc2hvdWxkIHJldHVybiBhbiBpbml0aWFsIHN0YXRlIHZhbHVlIHdoZW4gY2FsbGVkLiBUaGlzIHdpbGwgYmUgdXNlZCB3aGVuZXZlciB0aGUgcmVkdWNlciBpcyBjYWxsZWQgd2l0aCBgdW5kZWZpbmVkYCBhcyBpdHMgc3RhdGUgdmFsdWUsIGFuZCBpcyBwcmltYXJpbHkgdXNlZnVsIGZvciBjYXNlcyBsaWtlIHJlYWRpbmcgaW5pdGlhbCBzdGF0ZSBmcm9tIGBsb2NhbFN0b3JhZ2VgLlxyXG4gICAqL1xyXG4gIGluaXRpYWxTdGF0ZTogU3RhdGUgfCAoKCkgPT4gU3RhdGUpXHJcblxyXG4gIC8qKlxyXG4gICAqIEEgbWFwcGluZyBmcm9tIGFjdGlvbiB0eXBlcyB0byBhY3Rpb24tdHlwZS1zcGVjaWZpYyAqY2FzZSByZWR1Y2VyKlxyXG4gICAqIGZ1bmN0aW9ucy4gRm9yIGV2ZXJ5IGFjdGlvbiB0eXBlLCBhIG1hdGNoaW5nIGFjdGlvbiBjcmVhdG9yIHdpbGwgYmVcclxuICAgKiBnZW5lcmF0ZWQgdXNpbmcgYGNyZWF0ZUFjdGlvbigpYC5cclxuICAgKi9cclxuICByZWR1Y2VyczogVmFsaWRhdGVTbGljZUNhc2VSZWR1Y2VyczxTdGF0ZSwgQ1I+XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBhICpidWlsZGVyKiBvYmplY3QgdG8gZGVmaW5lXHJcbiAgICogY2FzZSByZWR1Y2VycyB2aWEgY2FsbHMgdG8gYGJ1aWxkZXIuYWRkQ2FzZShhY3Rpb25DcmVhdG9yT3JUeXBlLCByZWR1Y2VyKWAuXHJcbiAgICogXHJcbiAgICogQWx0ZXJuYXRpdmVseSwgYSBtYXBwaW5nIGZyb20gYWN0aW9uIHR5cGVzIHRvIGFjdGlvbi10eXBlLXNwZWNpZmljICpjYXNlIHJlZHVjZXIqXHJcbiAgICogZnVuY3Rpb25zLiBUaGVzZSByZWR1Y2VycyBzaG91bGQgaGF2ZSBleGlzdGluZyBhY3Rpb24gdHlwZXMgdXNlZFxyXG4gICAqIGFzIHRoZSBrZXlzLCBhbmQgYWN0aW9uIGNyZWF0b3JzIHdpbGwgX25vdF8gYmUgZ2VuZXJhdGVkLlxyXG4gICAqIFxyXG4gICAqIEBleGFtcGxlXHJcbmBgYHRzXHJcbmltcG9ydCB7IGNyZWF0ZUFjdGlvbiwgY3JlYXRlU2xpY2UsIEFjdGlvbiwgQW55QWN0aW9uIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcclxuY29uc3QgaW5jcmVtZW50QnkgPSBjcmVhdGVBY3Rpb248bnVtYmVyPignaW5jcmVtZW50QnknKVxyXG5jb25zdCBkZWNyZW1lbnQgPSBjcmVhdGVBY3Rpb24oJ2RlY3JlbWVudCcpXHJcblxyXG5pbnRlcmZhY2UgUmVqZWN0ZWRBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xyXG4gIGVycm9yOiBFcnJvclxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1JlamVjdGVkQWN0aW9uKGFjdGlvbjogQW55QWN0aW9uKTogYWN0aW9uIGlzIFJlamVjdGVkQWN0aW9uIHtcclxuICByZXR1cm4gYWN0aW9uLnR5cGUuZW5kc1dpdGgoJ3JlamVjdGVkJylcclxufVxyXG5cclxuY3JlYXRlU2xpY2Uoe1xyXG4gIG5hbWU6ICdjb3VudGVyJyxcclxuICBpbml0aWFsU3RhdGU6IDAsXHJcbiAgcmVkdWNlcnM6IHt9LFxyXG4gIGV4dHJhUmVkdWNlcnM6IGJ1aWxkZXIgPT4ge1xyXG4gICAgYnVpbGRlclxyXG4gICAgICAuYWRkQ2FzZShpbmNyZW1lbnRCeSwgKHN0YXRlLCBhY3Rpb24pID0+IHtcclxuICAgICAgICAvLyBhY3Rpb24gaXMgaW5mZXJyZWQgY29ycmVjdGx5IGhlcmUgaWYgdXNpbmcgVFNcclxuICAgICAgfSlcclxuICAgICAgLy8gWW91IGNhbiBjaGFpbiBjYWxscywgb3IgaGF2ZSBzZXBhcmF0ZSBgYnVpbGRlci5hZGRDYXNlKClgIGxpbmVzIGVhY2ggdGltZVxyXG4gICAgICAuYWRkQ2FzZShkZWNyZW1lbnQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7fSlcclxuICAgICAgLy8gWW91IGNhbiBtYXRjaCBhIHJhbmdlIG9mIGFjdGlvbiB0eXBlc1xyXG4gICAgICAuYWRkTWF0Y2hlcihcclxuICAgICAgICBpc1JlamVjdGVkQWN0aW9uLFxyXG4gICAgICAgIC8vIGBhY3Rpb25gIHdpbGwgYmUgaW5mZXJyZWQgYXMgYSBSZWplY3RlZEFjdGlvbiBkdWUgdG8gaXNSZWplY3RlZEFjdGlvbiBiZWluZyBkZWZpbmVkIGFzIGEgdHlwZSBndWFyZFxyXG4gICAgICAgIChzdGF0ZSwgYWN0aW9uKSA9PiB7fVxyXG4gICAgICApXHJcbiAgICAgIC8vIGFuZCBwcm92aWRlIGEgZGVmYXVsdCBjYXNlIGlmIG5vIG90aGVyIGhhbmRsZXJzIG1hdGNoZWRcclxuICAgICAgLmFkZERlZmF1bHRDYXNlKChzdGF0ZSwgYWN0aW9uKSA9PiB7fSlcclxuICAgIH1cclxufSlcclxuYGBgXHJcbiAgICovXHJcbiAgZXh0cmFSZWR1Y2Vycz86XHJcbiAgICB8IENhc2VSZWR1Y2VyczxOb0luZmVyPFN0YXRlPiwgYW55PlxyXG4gICAgfCAoKGJ1aWxkZXI6IEFjdGlvblJlZHVjZXJNYXBCdWlsZGVyPE5vSW5mZXI8U3RhdGU+PikgPT4gdm9pZClcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgQ2FzZVJlZHVjZXIgd2l0aCBhIGBwcmVwYXJlYCBtZXRob2QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIENhc2VSZWR1Y2VyV2l0aFByZXBhcmU8U3RhdGUsIEFjdGlvbiBleHRlbmRzIFBheWxvYWRBY3Rpb24+ID0ge1xyXG4gIHJlZHVjZXI6IENhc2VSZWR1Y2VyPFN0YXRlLCBBY3Rpb24+XHJcbiAgcHJlcGFyZTogUHJlcGFyZUFjdGlvbjxBY3Rpb25bJ3BheWxvYWQnXT5cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSB0eXBlIGRlc2NyaWJpbmcgYSBzbGljZSdzIGByZWR1Y2Vyc2Agb3B0aW9uLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTbGljZUNhc2VSZWR1Y2VyczxTdGF0ZT4gPSB7XHJcbiAgW0s6IHN0cmluZ106XHJcbiAgICB8IENhc2VSZWR1Y2VyPFN0YXRlLCBQYXlsb2FkQWN0aW9uPGFueT4+XHJcbiAgICB8IENhc2VSZWR1Y2VyV2l0aFByZXBhcmU8U3RhdGUsIFBheWxvYWRBY3Rpb248YW55LCBzdHJpbmcsIGFueSwgYW55Pj5cclxufVxyXG5cclxudHlwZSBTbGljZUFjdGlvblR5cGU8XHJcbiAgU2xpY2VOYW1lIGV4dGVuZHMgc3RyaW5nLFxyXG4gIEFjdGlvbk5hbWUgZXh0ZW5kcyBrZXlvZiBhbnlcclxuPiA9IEFjdGlvbk5hbWUgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgPyBgJHtTbGljZU5hbWV9LyR7QWN0aW9uTmFtZX1gIDogc3RyaW5nXHJcblxyXG4vKipcclxuICogRGVyaXZlcyB0aGUgc2xpY2UncyBgYWN0aW9uc2AgcHJvcGVydHkgZnJvbSB0aGUgYHJlZHVjZXJzYCBvcHRpb25zXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIENhc2VSZWR1Y2VyQWN0aW9uczxcclxuICBDYXNlUmVkdWNlcnMgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2Vyczxhbnk+LFxyXG4gIFNsaWNlTmFtZSBleHRlbmRzIHN0cmluZ1xyXG4+ID0ge1xyXG4gIFtUeXBlIGluIGtleW9mIENhc2VSZWR1Y2Vyc106IENhc2VSZWR1Y2Vyc1tUeXBlXSBleHRlbmRzIHsgcHJlcGFyZTogYW55IH1cclxuICAgID8gQWN0aW9uQ3JlYXRvckZvckNhc2VSZWR1Y2VyV2l0aFByZXBhcmU8XHJcbiAgICAgICAgQ2FzZVJlZHVjZXJzW1R5cGVdLFxyXG4gICAgICAgIFNsaWNlQWN0aW9uVHlwZTxTbGljZU5hbWUsIFR5cGU+XHJcbiAgICAgID5cclxuICAgIDogQWN0aW9uQ3JlYXRvckZvckNhc2VSZWR1Y2VyPFxyXG4gICAgICAgIENhc2VSZWR1Y2Vyc1tUeXBlXSxcclxuICAgICAgICBTbGljZUFjdGlvblR5cGU8U2xpY2VOYW1lLCBUeXBlPlxyXG4gICAgICA+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYSBgUGF5bG9hZEFjdGlvbkNyZWF0b3JgIHR5cGUgZm9yIGEgcGFzc2VkIGBDYXNlUmVkdWNlcldpdGhQcmVwYXJlYFxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnR5cGUgQWN0aW9uQ3JlYXRvckZvckNhc2VSZWR1Y2VyV2l0aFByZXBhcmU8XHJcbiAgQ1IgZXh0ZW5kcyB7IHByZXBhcmU6IGFueSB9LFxyXG4gIFR5cGUgZXh0ZW5kcyBzdHJpbmdcclxuPiA9IF9BY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxDUlsncHJlcGFyZSddLCBUeXBlPlxyXG5cclxuLyoqXHJcbiAqIEdldCBhIGBQYXlsb2FkQWN0aW9uQ3JlYXRvcmAgdHlwZSBmb3IgYSBwYXNzZWQgYENhc2VSZWR1Y2VyYFxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnR5cGUgQWN0aW9uQ3JlYXRvckZvckNhc2VSZWR1Y2VyPENSLCBUeXBlIGV4dGVuZHMgc3RyaW5nPiA9IENSIGV4dGVuZHMgKFxyXG4gIHN0YXRlOiBhbnksXHJcbiAgYWN0aW9uOiBpbmZlciBBY3Rpb25cclxuKSA9PiBhbnlcclxuICA/IEFjdGlvbiBleHRlbmRzIHsgcGF5bG9hZDogaW5mZXIgUCB9XHJcbiAgICA/IFBheWxvYWRBY3Rpb25DcmVhdG9yPFAsIFR5cGU+XHJcbiAgICA6IEFjdGlvbkNyZWF0b3JXaXRob3V0UGF5bG9hZDxUeXBlPlxyXG4gIDogQWN0aW9uQ3JlYXRvcldpdGhvdXRQYXlsb2FkPFR5cGU+XHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgdGhlIENhc2VSZWR1Y2VycyBvdXQgb2YgYSBgcmVkdWNlcnNgIG9iamVjdCwgZXZlbiBpZiB0aGV5IGFyZVxyXG4gKiB0ZXN0ZWQgaW50byBhIGBDYXNlUmVkdWNlcldpdGhQcmVwYXJlYC5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG50eXBlIFNsaWNlRGVmaW5lZENhc2VSZWR1Y2VyczxDYXNlUmVkdWNlcnMgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2Vyczxhbnk+PiA9IHtcclxuICBbVHlwZSBpbiBrZXlvZiBDYXNlUmVkdWNlcnNdOiBDYXNlUmVkdWNlcnNbVHlwZV0gZXh0ZW5kcyB7XHJcbiAgICByZWR1Y2VyOiBpbmZlciBSZWR1Y2VyXHJcbiAgfVxyXG4gICAgPyBSZWR1Y2VyXHJcbiAgICA6IENhc2VSZWR1Y2Vyc1tUeXBlXVxyXG59XHJcblxyXG4vKipcclxuICogVXNlZCBvbiBhIFNsaWNlQ2FzZVJlZHVjZXJzIG9iamVjdC5cclxuICogRW5zdXJlcyB0aGF0IGlmIGEgQ2FzZVJlZHVjZXIgaXMgYSBgQ2FzZVJlZHVjZXJXaXRoUHJlcGFyZWAsIHRoYXRcclxuICogdGhlIGByZWR1Y2VyYCBhbmQgdGhlIGBwcmVwYXJlYCBmdW5jdGlvbiB1c2UgdGhlIHNhbWUgdHlwZSBvZiBgcGF5bG9hZGAuXHJcbiAqXHJcbiAqIE1pZ2h0IGRvIGFkZGl0aW9uYWwgc3VjaCBjaGVja3MgaW4gdGhlIGZ1dHVyZS5cclxuICpcclxuICogVGhpcyB0eXBlIGlzIG9ubHkgZXZlciB1c2VmdWwgaWYgeW91IHdhbnQgdG8gd3JpdGUgeW91ciBvd24gd3JhcHBlciBhcm91bmRcclxuICogYGNyZWF0ZVNsaWNlYC4gUGxlYXNlIGRvbid0IHVzZSBpdCBvdGhlcndpc2UhXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIFZhbGlkYXRlU2xpY2VDYXNlUmVkdWNlcnM8XHJcbiAgUyxcclxuICBBQ1IgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2VyczxTPlxyXG4+ID0gQUNSICZcclxuICB7XHJcbiAgICBbVCBpbiBrZXlvZiBBQ1JdOiBBQ1JbVF0gZXh0ZW5kcyB7XHJcbiAgICAgIHJlZHVjZXIoczogUywgYWN0aW9uPzogaW5mZXIgQSk6IGFueVxyXG4gICAgfVxyXG4gICAgICA/IHtcclxuICAgICAgICAgIHByZXBhcmUoLi4uYTogbmV2ZXJbXSk6IE9taXQ8QSwgJ3R5cGUnPlxyXG4gICAgICAgIH1cclxuICAgICAgOiB7fVxyXG4gIH1cclxuXHJcbmZ1bmN0aW9uIGdldFR5cGUoc2xpY2U6IHN0cmluZywgYWN0aW9uS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgJHtzbGljZX0vJHthY3Rpb25LZXl9YFxyXG59XHJcblxyXG4vKipcclxuICogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYW4gaW5pdGlhbCBzdGF0ZSwgYW4gb2JqZWN0IGZ1bGwgb2YgcmVkdWNlclxyXG4gKiBmdW5jdGlvbnMsIGFuZCBhIFwic2xpY2UgbmFtZVwiLCBhbmQgYXV0b21hdGljYWxseSBnZW5lcmF0ZXNcclxuICogYWN0aW9uIGNyZWF0b3JzIGFuZCBhY3Rpb24gdHlwZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZVxyXG4gKiByZWR1Y2VycyBhbmQgc3RhdGUuXHJcbiAqXHJcbiAqIFRoZSBgcmVkdWNlcmAgYXJndW1lbnQgaXMgcGFzc2VkIHRvIGBjcmVhdGVSZWR1Y2VyKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2xpY2U8XHJcbiAgU3RhdGUsXHJcbiAgQ2FzZVJlZHVjZXJzIGV4dGVuZHMgU2xpY2VDYXNlUmVkdWNlcnM8U3RhdGU+LFxyXG4gIE5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmdcclxuPihcclxuICBvcHRpb25zOiBDcmVhdGVTbGljZU9wdGlvbnM8U3RhdGUsIENhc2VSZWR1Y2VycywgTmFtZT5cclxuKTogU2xpY2U8U3RhdGUsIENhc2VSZWR1Y2VycywgTmFtZT4ge1xyXG4gIGNvbnN0IHsgbmFtZSB9ID0gb3B0aW9uc1xyXG4gIGlmICghbmFtZSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdgbmFtZWAgaXMgYSByZXF1aXJlZCBvcHRpb24gZm9yIGNyZWF0ZVNsaWNlJylcclxuICB9XHJcblxyXG4gIGlmIChcclxuICAgIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcclxuICApIHtcclxuICAgIGlmIChvcHRpb25zLmluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgJ1lvdSBtdXN0IHByb3ZpZGUgYW4gYGluaXRpYWxTdGF0ZWAgdmFsdWUgdGhhdCBpcyBub3QgYHVuZGVmaW5lZGAuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGBpbml0aWFsU3RhdGVgJ1xyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBpbml0aWFsU3RhdGUgPVxyXG4gICAgdHlwZW9mIG9wdGlvbnMuaW5pdGlhbFN0YXRlID09ICdmdW5jdGlvbidcclxuICAgICAgPyBvcHRpb25zLmluaXRpYWxTdGF0ZVxyXG4gICAgICA6IGZyZWV6ZURyYWZ0YWJsZShvcHRpb25zLmluaXRpYWxTdGF0ZSlcclxuXHJcbiAgY29uc3QgcmVkdWNlcnMgPSBvcHRpb25zLnJlZHVjZXJzIHx8IHt9XHJcblxyXG4gIGNvbnN0IHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKVxyXG5cclxuICBjb25zdCBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZTogUmVjb3JkPHN0cmluZywgQ2FzZVJlZHVjZXI+ID0ge31cclxuICBjb25zdCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZTogUmVjb3JkPHN0cmluZywgQ2FzZVJlZHVjZXI+ID0ge31cclxuICBjb25zdCBhY3Rpb25DcmVhdG9yczogUmVjb3JkPHN0cmluZywgRnVuY3Rpb24+ID0ge31cclxuXHJcbiAgcmVkdWNlck5hbWVzLmZvckVhY2goKHJlZHVjZXJOYW1lKSA9PiB7XHJcbiAgICBjb25zdCBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSA9IHJlZHVjZXJzW3JlZHVjZXJOYW1lXVxyXG4gICAgY29uc3QgdHlwZSA9IGdldFR5cGUobmFtZSwgcmVkdWNlck5hbWUpXHJcblxyXG4gICAgbGV0IGNhc2VSZWR1Y2VyOiBDYXNlUmVkdWNlcjxTdGF0ZSwgYW55PlxyXG4gICAgbGV0IHByZXBhcmVDYWxsYmFjazogUHJlcGFyZUFjdGlvbjxhbnk+IHwgdW5kZWZpbmVkXHJcblxyXG4gICAgaWYgKCdyZWR1Y2VyJyBpbiBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSkge1xyXG4gICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnJlZHVjZXJcclxuICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZVxyXG4gICAgfVxyXG5cclxuICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW3JlZHVjZXJOYW1lXSA9IGNhc2VSZWR1Y2VyXHJcbiAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IGNhc2VSZWR1Y2VyXHJcbiAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2tcclxuICAgICAgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKVxyXG4gICAgICA6IGNyZWF0ZUFjdGlvbih0eXBlKVxyXG4gIH0pXHJcblxyXG4gIGZ1bmN0aW9uIGJ1aWxkUmVkdWNlcigpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbikge1xyXG4gICAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IHRydWVcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlU2xpY2UuZXh0cmFSZWR1Y2Vyc2AgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSVEsgMi4wLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlU2xpY2VcIlxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgW1xyXG4gICAgICBleHRyYVJlZHVjZXJzID0ge30sXHJcbiAgICAgIGFjdGlvbk1hdGNoZXJzID0gW10sXHJcbiAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHVuZGVmaW5lZCxcclxuICAgIF0gPVxyXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhvcHRpb25zLmV4dHJhUmVkdWNlcnMpXHJcbiAgICAgICAgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXVxyXG5cclxuICAgIGNvbnN0IGZpbmFsQ2FzZVJlZHVjZXJzID0geyAuLi5leHRyYVJlZHVjZXJzLCAuLi5zbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCAoYnVpbGRlcikgPT4ge1xyXG4gICAgICBmb3IgKGxldCBrZXkgaW4gZmluYWxDYXNlUmVkdWNlcnMpIHtcclxuICAgICAgICBidWlsZGVyLmFkZENhc2Uoa2V5LCBmaW5hbENhc2VSZWR1Y2Vyc1trZXldIGFzIENhc2VSZWR1Y2VyPGFueT4pXHJcbiAgICAgIH1cclxuICAgICAgZm9yIChsZXQgbSBvZiBhY3Rpb25NYXRjaGVycykge1xyXG4gICAgICAgIGJ1aWxkZXIuYWRkTWF0Y2hlcihtLm1hdGNoZXIsIG0ucmVkdWNlcilcclxuICAgICAgfVxyXG4gICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgYnVpbGRlci5hZGREZWZhdWx0Q2FzZShkZWZhdWx0Q2FzZVJlZHVjZXIpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBsZXQgX3JlZHVjZXI6IFJlZHVjZXJXaXRoSW5pdGlhbFN0YXRlPFN0YXRlPlxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmFtZSxcclxuICAgIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBpZiAoIV9yZWR1Y2VyKSBfcmVkdWNlciA9IGJ1aWxkUmVkdWNlcigpXHJcblxyXG4gICAgICByZXR1cm4gX3JlZHVjZXIoc3RhdGUsIGFjdGlvbilcclxuICAgIH0sXHJcbiAgICBhY3Rpb25zOiBhY3Rpb25DcmVhdG9ycyBhcyBhbnksXHJcbiAgICBjYXNlUmVkdWNlcnM6IHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIGFzIGFueSxcclxuICAgIGdldEluaXRpYWxTdGF0ZSgpIHtcclxuICAgICAgaWYgKCFfcmVkdWNlcikgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKVxyXG5cclxuICAgICAgcmV0dXJuIF9yZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSgpXHJcbiAgICB9LFxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IEVudGl0eVN0YXRlIH0gZnJvbSAnLi9tb2RlbHMnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlPFY+KCk6IEVudGl0eVN0YXRlPFY+IHtcclxuICByZXR1cm4ge1xyXG4gICAgaWRzOiBbXSxcclxuICAgIGVudGl0aWVzOiB7fSxcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5PFY+KCkge1xyXG4gIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpOiBFbnRpdHlTdGF0ZTxWPlxyXG4gIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZTxTIGV4dGVuZHMgb2JqZWN0PihcclxuICAgIGFkZGl0aW9uYWxTdGF0ZTogU1xyXG4gICk6IEVudGl0eVN0YXRlPFY+ICYgU1xyXG4gIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZShhZGRpdGlvbmFsU3RhdGU6IGFueSA9IHt9KTogYW55IHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpXHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBnZXRJbml0aWFsU3RhdGUgfVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCdcclxuaW1wb3J0IHsgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgfSBmcm9tICcuLi9jcmVhdGVEcmFmdFNhZmVTZWxlY3RvcidcclxuaW1wb3J0IHR5cGUge1xyXG4gIEVudGl0eVN0YXRlLFxyXG4gIEVudGl0eVNlbGVjdG9ycyxcclxuICBEaWN0aW9uYXJ5LFxyXG4gIEVudGl0eUlkLFxyXG59IGZyb20gJy4vbW9kZWxzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3Rvcnk8VD4oKSB7XHJcbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKCk6IEVudGl0eVNlbGVjdG9yczxULCBFbnRpdHlTdGF0ZTxUPj5cclxuICBmdW5jdGlvbiBnZXRTZWxlY3RvcnM8Vj4oXHJcbiAgICBzZWxlY3RTdGF0ZTogKHN0YXRlOiBWKSA9PiBFbnRpdHlTdGF0ZTxUPlxyXG4gICk6IEVudGl0eVNlbGVjdG9yczxULCBWPlxyXG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9yczxWPihcclxuICAgIHNlbGVjdFN0YXRlPzogKHN0YXRlOiBWKSA9PiBFbnRpdHlTdGF0ZTxUPlxyXG4gICk6IEVudGl0eVNlbGVjdG9yczxULCBhbnk+IHtcclxuICAgIGNvbnN0IHNlbGVjdElkcyA9IChzdGF0ZTogRW50aXR5U3RhdGU8VD4pID0+IHN0YXRlLmlkc1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdEVudGl0aWVzID0gKHN0YXRlOiBFbnRpdHlTdGF0ZTxUPikgPT4gc3RhdGUuZW50aXRpZXNcclxuXHJcbiAgICBjb25zdCBzZWxlY3RBbGwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihcclxuICAgICAgc2VsZWN0SWRzLFxyXG4gICAgICBzZWxlY3RFbnRpdGllcyxcclxuICAgICAgKGlkcywgZW50aXRpZXMpOiBUW10gPT4gaWRzLm1hcCgoaWQpID0+IGVudGl0aWVzW2lkXSEpXHJcbiAgICApXHJcblxyXG4gICAgY29uc3Qgc2VsZWN0SWQgPSAoXzogdW5rbm93biwgaWQ6IEVudGl0eUlkKSA9PiBpZFxyXG5cclxuICAgIGNvbnN0IHNlbGVjdEJ5SWQgPSAoZW50aXRpZXM6IERpY3Rpb25hcnk8VD4sIGlkOiBFbnRpdHlJZCkgPT4gZW50aXRpZXNbaWRdXHJcblxyXG4gICAgY29uc3Qgc2VsZWN0VG90YWwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIChpZHMpID0+IGlkcy5sZW5ndGgpXHJcblxyXG4gICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNlbGVjdElkcyxcclxuICAgICAgICBzZWxlY3RFbnRpdGllcyxcclxuICAgICAgICBzZWxlY3RBbGwsXHJcbiAgICAgICAgc2VsZWN0VG90YWwsXHJcbiAgICAgICAgc2VsZWN0QnlJZDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IoXHJcbiAgICAgICAgICBzZWxlY3RFbnRpdGllcyxcclxuICAgICAgICAgIHNlbGVjdElkLFxyXG4gICAgICAgICAgc2VsZWN0QnlJZFxyXG4gICAgICAgICksXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihcclxuICAgICAgc2VsZWN0U3RhdGUgYXMgU2VsZWN0b3I8ViwgRW50aXR5U3RhdGU8VD4+LFxyXG4gICAgICBzZWxlY3RFbnRpdGllc1xyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXHJcbiAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXHJcbiAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXHJcbiAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxyXG4gICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihcclxuICAgICAgICBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXHJcbiAgICAgICAgc2VsZWN0SWQsXHJcbiAgICAgICAgc2VsZWN0QnlJZFxyXG4gICAgICApLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgZ2V0U2VsZWN0b3JzIH1cclxufVxyXG4iLCJpbXBvcnQgY3JlYXRlTmV4dFN0YXRlLCB7IGlzRHJhZnQgfSBmcm9tICdpbW1lcidcclxuaW1wb3J0IHR5cGUgeyBFbnRpdHlTdGF0ZSwgUHJldmVudEFueSB9IGZyb20gJy4vbW9kZWxzJ1xyXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRBY3Rpb24gfSBmcm9tICcuLi9jcmVhdGVBY3Rpb24nXHJcbmltcG9ydCB7IGlzRlNBIH0gZnJvbSAnLi4vY3JlYXRlQWN0aW9uJ1xyXG5pbXBvcnQgeyBJc0FueSB9IGZyb20gJy4uL3RzSGVscGVycydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3I8Vj4oXHJcbiAgbXV0YXRvcjogKHN0YXRlOiBFbnRpdHlTdGF0ZTxWPikgPT4gdm9pZFxyXG4pIHtcclxuICBjb25zdCBvcGVyYXRvciA9IGNyZWF0ZVN0YXRlT3BlcmF0b3IoKF86IHVuZGVmaW5lZCwgc3RhdGU6IEVudGl0eVN0YXRlPFY+KSA9PlxyXG4gICAgbXV0YXRvcihzdGF0ZSlcclxuICApXHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb248UyBleHRlbmRzIEVudGl0eVN0YXRlPFY+PihcclxuICAgIHN0YXRlOiBQcmV2ZW50QW55PFMsIFY+XHJcbiAgKTogUyB7XHJcbiAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUgYXMgUywgdW5kZWZpbmVkKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3I8ViwgUj4oXHJcbiAgbXV0YXRvcjogKGFyZzogUiwgc3RhdGU6IEVudGl0eVN0YXRlPFY+KSA9PiB2b2lkXHJcbikge1xyXG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb248UyBleHRlbmRzIEVudGl0eVN0YXRlPFY+PihcclxuICAgIHN0YXRlOiBTLFxyXG4gICAgYXJnOiBSIHwgUGF5bG9hZEFjdGlvbjxSPlxyXG4gICk6IFMge1xyXG4gICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoXHJcbiAgICAgIGFyZzogUiB8IFBheWxvYWRBY3Rpb248Uj5cclxuICAgICk6IGFyZyBpcyBQYXlsb2FkQWN0aW9uPFI+IHtcclxuICAgICAgcmV0dXJuIGlzRlNBKGFyZylcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBydW5NdXRhdG9yID0gKGRyYWZ0OiBFbnRpdHlTdGF0ZTxWPikgPT4ge1xyXG4gICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xyXG4gICAgICAgIG11dGF0b3IoYXJnLnBheWxvYWQsIGRyYWZ0KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG11dGF0b3IoYXJnLCBkcmFmdClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0RyYWZ0KHN0YXRlKSkge1xyXG4gICAgICAvLyB3ZSBtdXN0IGFscmVhZHkgYmUgaW5zaWRlIGEgYGNyZWF0ZU5leHRTdGF0ZWAgY2FsbCwgbGlrZWx5IGJlY2F1c2VcclxuICAgICAgLy8gdGhpcyBpcyBiZWluZyB3cmFwcGVkIGluIGBjcmVhdGVSZWR1Y2VyYCBvciBgY3JlYXRlU2xpY2VgLlxyXG4gICAgICAvLyBJdCdzIHNhZmUgdG8ganVzdCBwYXNzIHRoZSBkcmFmdCB0byB0aGUgbXV0YXRvci5cclxuICAgICAgcnVuTXV0YXRvcihzdGF0ZSlcclxuXHJcbiAgICAgIC8vIHNpbmNlIGl0J3MgYSBkcmFmdCwgd2UnbGwganVzdCByZXR1cm4gaXRcclxuICAgICAgcmV0dXJuIHN0YXRlXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBAdHMtaWdub3JlIGNyZWF0ZU5leHRTdGF0ZSgpIHByb2R1Y2VzIGFuIEltbXV0YWJsZTxEcmFmdDxTPj4gcmF0aGVyXHJcbiAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxyXG4gICAgICAvLyB0aGVzZSB0d28gdHlwZXMuXHJcbiAgICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUoc3RhdGUsIHJ1bk11dGF0b3IpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgRW50aXR5U3RhdGUsIElkU2VsZWN0b3IsIFVwZGF0ZSwgRW50aXR5SWQgfSBmcm9tICcuL21vZGVscydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RJZFZhbHVlPFQ+KGVudGl0eTogVCwgc2VsZWN0SWQ6IElkU2VsZWN0b3I8VD4pIHtcclxuICBjb25zdCBrZXkgPSBzZWxlY3RJZChlbnRpdHkpXHJcblxyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICdUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuJyxcclxuICAgICAgJ1lvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLicsXHJcbiAgICAgICdUaGUgZW50aXR5IHRoYXQgd2FzIHBhc3NlZDonLFxyXG4gICAgICBlbnRpdHksXHJcbiAgICAgICdUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjonLFxyXG4gICAgICBzZWxlY3RJZC50b1N0cmluZygpXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICByZXR1cm4ga2V5XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5PFQ+KFxyXG4gIGVudGl0aWVzOiByZWFkb25seSBUW10gfCBSZWNvcmQ8RW50aXR5SWQsIFQ+XHJcbik6IHJlYWRvbmx5IFRbXSB7XHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xyXG4gICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVudGl0aWVzXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzPFQ+KFxyXG4gIG5ld0VudGl0aWVzOiByZWFkb25seSBUW10gfCBSZWNvcmQ8RW50aXR5SWQsIFQ+LFxyXG4gIHNlbGVjdElkOiBJZFNlbGVjdG9yPFQ+LFxyXG4gIHN0YXRlOiBFbnRpdHlTdGF0ZTxUPlxyXG4pOiBbVFtdLCBVcGRhdGU8VD5bXV0ge1xyXG4gIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcylcclxuXHJcbiAgY29uc3QgYWRkZWQ6IFRbXSA9IFtdXHJcbiAgY29uc3QgdXBkYXRlZDogVXBkYXRlPFQ+W10gPSBbXVxyXG5cclxuICBmb3IgKGNvbnN0IGVudGl0eSBvZiBuZXdFbnRpdGllcykge1xyXG4gICAgY29uc3QgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpXHJcbiAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgdXBkYXRlZC5wdXNoKHsgaWQsIGNoYW5nZXM6IGVudGl0eSB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWRkZWQucHVzaChlbnRpdHkpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdXHJcbn1cclxuIiwiaW1wb3J0IHR5cGUge1xyXG4gIEVudGl0eVN0YXRlLFxyXG4gIEVudGl0eVN0YXRlQWRhcHRlcixcclxuICBJZFNlbGVjdG9yLFxyXG4gIFVwZGF0ZSxcclxuICBFbnRpdHlJZCxcclxufSBmcm9tICcuL21vZGVscydcclxuaW1wb3J0IHtcclxuICBjcmVhdGVTdGF0ZU9wZXJhdG9yLFxyXG4gIGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcixcclxufSBmcm9tICcuL3N0YXRlX2FkYXB0ZXInXHJcbmltcG9ydCB7XHJcbiAgc2VsZWN0SWRWYWx1ZSxcclxuICBlbnN1cmVFbnRpdGllc0FycmF5LFxyXG4gIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMsXHJcbn0gZnJvbSAnLi91dGlscydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcjxUPihcclxuICBzZWxlY3RJZDogSWRTZWxlY3RvcjxUPlxyXG4pOiBFbnRpdHlTdGF0ZUFkYXB0ZXI8VD4ge1xyXG4gIHR5cGUgUiA9IEVudGl0eVN0YXRlPFQ+XHJcblxyXG4gIGZ1bmN0aW9uIGFkZE9uZU11dGFibHkoZW50aXR5OiBULCBzdGF0ZTogUik6IHZvaWQge1xyXG4gICAgY29uc3Qga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKVxyXG5cclxuICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGUuaWRzLnB1c2goa2V5KVxyXG4gICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkoXHJcbiAgICBuZXdFbnRpdGllczogcmVhZG9ubHkgVFtdIHwgUmVjb3JkPEVudGl0eUlkLCBUPixcclxuICAgIHN0YXRlOiBSXHJcbiAgKTogdm9pZCB7XHJcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpXHJcblxyXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgbmV3RW50aXRpZXMpIHtcclxuICAgICAgYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHk6IFQsIHN0YXRlOiBSKTogdm9pZCB7XHJcbiAgICBjb25zdCBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpXHJcbiAgICBpZiAoIShrZXkgaW4gc3RhdGUuZW50aXRpZXMpKSB7XHJcbiAgICAgIHN0YXRlLmlkcy5wdXNoKGtleSlcclxuICAgIH1cclxuICAgIHN0YXRlLmVudGl0aWVzW2tleV0gPSBlbnRpdHlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KFxyXG4gICAgbmV3RW50aXRpZXM6IHJlYWRvbmx5IFRbXSB8IFJlY29yZDxFbnRpdHlJZCwgVD4sXHJcbiAgICBzdGF0ZTogUlxyXG4gICk6IHZvaWQge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKVxyXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgbmV3RW50aXRpZXMpIHtcclxuICAgICAgc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShcclxuICAgIG5ld0VudGl0aWVzOiByZWFkb25seSBUW10gfCBSZWNvcmQ8RW50aXR5SWQsIFQ+LFxyXG4gICAgc3RhdGU6IFJcclxuICApOiB2b2lkIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcylcclxuXHJcbiAgICBzdGF0ZS5pZHMgPSBbXVxyXG4gICAgc3RhdGUuZW50aXRpZXMgPSB7fVxyXG5cclxuICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5OiBFbnRpdHlJZCwgc3RhdGU6IFIpOiB2b2lkIHtcclxuICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZW1vdmVNYW55TXV0YWJseShrZXlzOiByZWFkb25seSBFbnRpdHlJZFtdLCBzdGF0ZTogUik6IHZvaWQge1xyXG4gICAgbGV0IGRpZE11dGF0ZSA9IGZhbHNlXHJcblxyXG4gICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldXHJcbiAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGlmIChkaWRNdXRhdGUpIHtcclxuICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcigoaWQpID0+IGlkIGluIHN0YXRlLmVudGl0aWVzKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlQWxsTXV0YWJseShzdGF0ZTogUik6IHZvaWQge1xyXG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xyXG4gICAgICBpZHM6IFtdLFxyXG4gICAgICBlbnRpdGllczoge30sXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGFrZU5ld0tleShcclxuICAgIGtleXM6IHsgW2lkOiBzdHJpbmddOiBFbnRpdHlJZCB9LFxyXG4gICAgdXBkYXRlOiBVcGRhdGU8VD4sXHJcbiAgICBzdGF0ZTogUlxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgb3JpZ2luYWwgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdXHJcbiAgICBjb25zdCB1cGRhdGVkOiBUID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwsIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgY29uc3QgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZClcclxuICAgIGNvbnN0IGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkXHJcblxyXG4gICAgaWYgKGhhc05ld0tleSkge1xyXG4gICAgICBrZXlzW3VwZGF0ZS5pZF0gPSBuZXdLZXlcclxuICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0ZS5lbnRpdGllc1tuZXdLZXldID0gdXBkYXRlZFxyXG5cclxuICAgIHJldHVybiBoYXNOZXdLZXlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlOiBVcGRhdGU8VD4sIHN0YXRlOiBSKTogdm9pZCB7XHJcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkoXHJcbiAgICB1cGRhdGVzOiBSZWFkb25seUFycmF5PFVwZGF0ZTxUPj4sXHJcbiAgICBzdGF0ZTogUlxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgbmV3S2V5czogeyBbaWQ6IHN0cmluZ106IEVudGl0eUlkIH0gPSB7fVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZXNQZXJFbnRpdHk6IHsgW2lkOiBzdHJpbmddOiBVcGRhdGU8VD4gfSA9IHt9XHJcblxyXG4gICAgdXBkYXRlcy5mb3JFYWNoKCh1cGRhdGUpID0+IHtcclxuICAgICAgLy8gT25seSBhcHBseSB1cGRhdGVzIHRvIGVudGl0aWVzIHRoYXQgY3VycmVudGx5IGV4aXN0XHJcbiAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgdXBkYXRlcyB0byBvbmUgZW50aXR5LCBtZXJnZSB0aGVtIHRvZ2V0aGVyXHJcbiAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgaWQ6IHVwZGF0ZS5pZCxcclxuICAgICAgICAgIC8vIFNwcmVhZHMgaWdub3JlIGZhbHN5IHZhbHVlcywgc28gdGhpcyB3b3JrcyBldmVuIGlmIHRoZXJlIGlzbid0XHJcbiAgICAgICAgICAvLyBhbiBleGlzdGluZyB1cGRhdGUgYWxyZWFkeSBhdCB0aGlzIGtleVxyXG4gICAgICAgICAgY2hhbmdlczoge1xyXG4gICAgICAgICAgICAuLi4odXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdXHJcbiAgICAgICAgICAgICAgPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlc1xyXG4gICAgICAgICAgICAgIDogbnVsbCksXHJcbiAgICAgICAgICAgIC4uLnVwZGF0ZS5jaGFuZ2VzLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgdXBkYXRlcyA9IE9iamVjdC52YWx1ZXModXBkYXRlc1BlckVudGl0eSlcclxuXHJcbiAgICBjb25zdCBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMFxyXG5cclxuICAgIGlmIChkaWRNdXRhdGVFbnRpdGllcykge1xyXG4gICAgICBjb25zdCBkaWRNdXRhdGVJZHMgPVxyXG4gICAgICAgIHVwZGF0ZXMuZmlsdGVyKCh1cGRhdGUpID0+IHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSkpLmxlbmd0aCA+XHJcbiAgICAgICAgMFxyXG5cclxuICAgICAgaWYgKGRpZE11dGF0ZUlkcykge1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eTogVCwgc3RhdGU6IFIpOiB2b2lkIHtcclxuICAgIHJldHVybiB1cHNlcnRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShcclxuICAgIG5ld0VudGl0aWVzOiByZWFkb25seSBUW10gfCBSZWNvcmQ8RW50aXR5SWQsIFQ+LFxyXG4gICAgc3RhdGU6IFJcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IFthZGRlZCwgdXBkYXRlZF0gPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzPFQ+KFxyXG4gICAgICBuZXdFbnRpdGllcyxcclxuICAgICAgc2VsZWN0SWQsXHJcbiAgICAgIHN0YXRlXHJcbiAgICApXHJcblxyXG4gICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpXHJcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpXHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXHJcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxyXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXHJcbiAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgIHJlbW92ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVPbmVNdXRhYmx5KSxcclxuICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpLFxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7XHJcbiAgRW50aXR5U3RhdGUsXHJcbiAgSWRTZWxlY3RvcixcclxuICBDb21wYXJlcixcclxuICBFbnRpdHlTdGF0ZUFkYXB0ZXIsXHJcbiAgVXBkYXRlLFxyXG4gIEVudGl0eUlkLFxyXG59IGZyb20gJy4vbW9kZWxzJ1xyXG5pbXBvcnQgeyBjcmVhdGVTdGF0ZU9wZXJhdG9yIH0gZnJvbSAnLi9zdGF0ZV9hZGFwdGVyJ1xyXG5pbXBvcnQgeyBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlciB9IGZyb20gJy4vdW5zb3J0ZWRfc3RhdGVfYWRhcHRlcidcclxuaW1wb3J0IHtcclxuICBzZWxlY3RJZFZhbHVlLFxyXG4gIGVuc3VyZUVudGl0aWVzQXJyYXksXHJcbiAgc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyxcclxufSBmcm9tICcuL3V0aWxzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcjxUPihcclxuICBzZWxlY3RJZDogSWRTZWxlY3RvcjxUPixcclxuICBzb3J0OiBDb21wYXJlcjxUPlxyXG4pOiBFbnRpdHlTdGF0ZUFkYXB0ZXI8VD4ge1xyXG4gIHR5cGUgUiA9IEVudGl0eVN0YXRlPFQ+XHJcblxyXG4gIGNvbnN0IHsgcmVtb3ZlT25lLCByZW1vdmVNYW55LCByZW1vdmVBbGwgfSA9XHJcbiAgICBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZClcclxuXHJcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHk6IFQsIHN0YXRlOiBSKTogdm9pZCB7XHJcbiAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkoXHJcbiAgICBuZXdFbnRpdGllczogcmVhZG9ubHkgVFtdIHwgUmVjb3JkPEVudGl0eUlkLCBUPixcclxuICAgIHN0YXRlOiBSXHJcbiAgKTogdm9pZCB7XHJcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpXHJcblxyXG4gICAgY29uc3QgbW9kZWxzID0gbmV3RW50aXRpZXMuZmlsdGVyKFxyXG4gICAgICAobW9kZWwpID0+ICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKVxyXG4gICAgKVxyXG5cclxuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgIG1lcmdlKG1vZGVscywgc3RhdGUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eTogVCwgc3RhdGU6IFIpOiB2b2lkIHtcclxuICAgIHJldHVybiBzZXRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShcclxuICAgIG5ld0VudGl0aWVzOiByZWFkb25seSBUW10gfCBSZWNvcmQ8RW50aXR5SWQsIFQ+LFxyXG4gICAgc3RhdGU6IFJcclxuICApOiB2b2lkIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcylcclxuICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShcclxuICAgIG5ld0VudGl0aWVzOiByZWFkb25seSBUW10gfCBSZWNvcmQ8RW50aXR5SWQsIFQ+LFxyXG4gICAgc3RhdGU6IFJcclxuICApOiB2b2lkIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcylcclxuICAgIHN0YXRlLmVudGl0aWVzID0ge31cclxuICAgIHN0YXRlLmlkcyA9IFtdXHJcblxyXG4gICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGU6IFVwZGF0ZTxUPiwgc3RhdGU6IFIpOiB2b2lkIHtcclxuICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseShcclxuICAgIHVwZGF0ZXM6IFJlYWRvbmx5QXJyYXk8VXBkYXRlPFQ+PixcclxuICAgIHN0YXRlOiBSXHJcbiAgKTogdm9pZCB7XHJcbiAgICBsZXQgYXBwbGllZFVwZGF0ZXMgPSBmYWxzZVxyXG5cclxuICAgIGZvciAobGV0IHVwZGF0ZSBvZiB1cGRhdGVzKSB7XHJcbiAgICAgIGNvbnN0IGVudGl0eSA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF1cclxuICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICBjb250aW51ZVxyXG4gICAgICB9XHJcblxyXG4gICAgICBhcHBsaWVkVXBkYXRlcyA9IHRydWVcclxuXHJcbiAgICAgIE9iamVjdC5hc3NpZ24oZW50aXR5LCB1cGRhdGUuY2hhbmdlcylcclxuICAgICAgY29uc3QgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpXHJcbiAgICAgIGlmICh1cGRhdGUuaWQgIT09IG5ld0lkKSB7XHJcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1tuZXdJZF0gPSBlbnRpdHlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcHBsaWVkVXBkYXRlcykge1xyXG4gICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwc2VydE9uZU11dGFibHkoZW50aXR5OiBULCBzdGF0ZTogUik6IHZvaWQge1xyXG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KFxyXG4gICAgbmV3RW50aXRpZXM6IHJlYWRvbmx5IFRbXSB8IFJlY29yZDxFbnRpdHlJZCwgVD4sXHJcbiAgICBzdGF0ZTogUlxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgW2FkZGVkLCB1cGRhdGVkXSA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXM8VD4oXHJcbiAgICAgIG5ld0VudGl0aWVzLFxyXG4gICAgICBzZWxlY3RJZCxcclxuICAgICAgc3RhdGVcclxuICAgIClcclxuXHJcbiAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSlcclxuICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGE6IHJlYWRvbmx5IHVua25vd25bXSwgYjogcmVhZG9ubHkgdW5rbm93bltdKSB7XHJcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcclxuICAgICAgICBjb250aW51ZVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1lcmdlKG1vZGVsczogcmVhZG9ubHkgVFtdLCBzdGF0ZTogUik6IHZvaWQge1xyXG4gICAgLy8gSW5zZXJ0L292ZXJ3cml0ZSBhbGwgbmV3L3VwZGF0ZWRcclxuICAgIG1vZGVscy5mb3JFYWNoKChtb2RlbCkgPT4ge1xyXG4gICAgICBzdGF0ZS5lbnRpdGllc1tzZWxlY3RJZChtb2RlbCldID0gbW9kZWxcclxuICAgIH0pXHJcblxyXG4gICAgcmVzb3J0RW50aXRpZXMoc3RhdGUpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXNvcnRFbnRpdGllcyhzdGF0ZTogUikge1xyXG4gICAgY29uc3QgYWxsRW50aXRpZXMgPSBPYmplY3QudmFsdWVzKHN0YXRlLmVudGl0aWVzKSBhcyBUW11cclxuICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydClcclxuXHJcbiAgICBjb25zdCBuZXdTb3J0ZWRJZHMgPSBhbGxFbnRpdGllcy5tYXAoc2VsZWN0SWQpXHJcbiAgICBjb25zdCB7IGlkcyB9ID0gc3RhdGVcclxuXHJcbiAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHNcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZW1vdmVPbmUsXHJcbiAgICByZW1vdmVNYW55LFxyXG4gICAgcmVtb3ZlQWxsLFxyXG4gICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXHJcbiAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHtcclxuICBFbnRpdHlEZWZpbml0aW9uLFxyXG4gIENvbXBhcmVyLFxyXG4gIElkU2VsZWN0b3IsXHJcbiAgRW50aXR5QWRhcHRlcixcclxufSBmcm9tICcuL21vZGVscydcclxuaW1wb3J0IHsgY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSB9IGZyb20gJy4vZW50aXR5X3N0YXRlJ1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5IH0gZnJvbSAnLi9zdGF0ZV9zZWxlY3RvcnMnXHJcbmltcG9ydCB7IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlciB9IGZyb20gJy4vc29ydGVkX3N0YXRlX2FkYXB0ZXInXHJcbmltcG9ydCB7IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyIH0gZnJvbSAnLi91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyJ1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnRpdHlBZGFwdGVyPFQ+KFxyXG4gIG9wdGlvbnM6IHtcclxuICAgIHNlbGVjdElkPzogSWRTZWxlY3RvcjxUPlxyXG4gICAgc29ydENvbXBhcmVyPzogZmFsc2UgfCBDb21wYXJlcjxUPlxyXG4gIH0gPSB7fVxyXG4pOiBFbnRpdHlBZGFwdGVyPFQ+IHtcclxuICBjb25zdCB7IHNlbGVjdElkLCBzb3J0Q29tcGFyZXIgfTogRW50aXR5RGVmaW5pdGlvbjxUPiA9IHtcclxuICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXHJcbiAgICBzZWxlY3RJZDogKGluc3RhbmNlOiBhbnkpID0+IGluc3RhbmNlLmlkLFxyXG4gICAgLi4ub3B0aW9ucyxcclxuICB9XHJcblxyXG4gIGNvbnN0IHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3Rvcnk8VD4oKVxyXG4gIGNvbnN0IHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5PFQ+KClcclxuICBjb25zdCBzdGF0ZUFkYXB0ZXIgPSBzb3J0Q29tcGFyZXJcclxuICAgID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpXHJcbiAgICA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgc2VsZWN0SWQsXHJcbiAgICBzb3J0Q29tcGFyZXIsXHJcbiAgICAuLi5zdGF0ZUZhY3RvcnksXHJcbiAgICAuLi5zZWxlY3RvcnNGYWN0b3J5LFxyXG4gICAgLi4uc3RhdGVBZGFwdGVyLFxyXG4gIH1cclxufVxyXG4iLCIvLyBCb3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9haS9uYW5vaWQvYmxvYi8zLjAuMi9ub24tc2VjdXJlL2luZGV4LmpzXHJcbi8vIFRoaXMgYWxwaGFiZXQgdXNlcyBgQS1aYS16MC05Xy1gIHN5bWJvbHMuIEEgZ2VuZXRpYyBhbGdvcml0aG0gaGVscGVkXHJcbi8vIG9wdGltaXplIHRoZSBnemlwIGNvbXByZXNzaW9uIGZvciB0aGlzIGFscGhhYmV0LlxyXG5sZXQgdXJsQWxwaGFiZXQgPVxyXG4gICdNb2R1bGVTeW1iaGFzT3duUHItMDEyMzQ1Njc4OUFCQ0RFRkdITlJWZmdjdGlVdnpfS3FZVEprTHhwWlhJalFXJ1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBsZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xyXG4gIGxldCBpZCA9ICcnXHJcbiAgLy8gQSBjb21wYWN0IGFsdGVybmF0aXZlIGZvciBgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwOyBpKyspYC5cclxuICBsZXQgaSA9IHNpemVcclxuICB3aGlsZSAoaS0tKSB7XHJcbiAgICAvLyBgfCAwYCBpcyBtb3JlIGNvbXBhY3QgYW5kIGZhc3RlciB0aGFuIGBNYXRoLmZsb29yKClgLlxyXG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiA2NCkgfCAwXVxyXG4gIH1cclxuICByZXR1cm4gaWRcclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IERpc3BhdGNoLCBBbnlBY3Rpb24gfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHR5cGUge1xyXG4gIFBheWxvYWRBY3Rpb24sXHJcbiAgQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQsXHJcbn0gZnJvbSAnLi9jcmVhdGVBY3Rpb24nXHJcbmltcG9ydCB7IGNyZWF0ZUFjdGlvbiB9IGZyb20gJy4vY3JlYXRlQWN0aW9uJ1xyXG5pbXBvcnQgdHlwZSB7IFRodW5rRGlzcGF0Y2ggfSBmcm9tICdyZWR1eC10aHVuaydcclxuaW1wb3J0IHR5cGUgeyBGYWxsYmFja0lmVW5rbm93biwgSWQsIElzQW55LCBJc1Vua25vd24gfSBmcm9tICcuL3RzSGVscGVycydcclxuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnLi9uYW5vaWQnXHJcblxyXG4vLyBAdHMtaWdub3JlIHdlIG5lZWQgdGhlIGltcG9ydCBvZiB0aGVzZSB0eXBlcyBkdWUgdG8gYSBidW5kbGluZyBpc3N1ZS5cclxudHlwZSBfS2VlcCA9IFBheWxvYWRBY3Rpb24gfCBBY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxhbnksIHVua25vd24+XHJcblxyXG5leHBvcnQgdHlwZSBCYXNlVGh1bmtBUEk8XHJcbiAgUyxcclxuICBFLFxyXG4gIEQgZXh0ZW5kcyBEaXNwYXRjaCA9IERpc3BhdGNoLFxyXG4gIFJlamVjdGVkVmFsdWUgPSB1bmRlZmluZWQsXHJcbiAgUmVqZWN0ZWRNZXRhID0gdW5rbm93bixcclxuICBGdWxmaWxsZWRNZXRhID0gdW5rbm93blxyXG4+ID0ge1xyXG4gIGRpc3BhdGNoOiBEXHJcbiAgZ2V0U3RhdGU6ICgpID0+IFNcclxuICBleHRyYTogRVxyXG4gIHJlcXVlc3RJZDogc3RyaW5nXHJcbiAgc2lnbmFsOiBBYm9ydFNpZ25hbFxyXG4gIGFib3J0OiAocmVhc29uPzogc3RyaW5nKSA9PiB2b2lkXHJcbiAgcmVqZWN0V2l0aFZhbHVlOiBJc1Vua25vd248XHJcbiAgICBSZWplY3RlZE1ldGEsXHJcbiAgICAodmFsdWU6IFJlamVjdGVkVmFsdWUpID0+IFJlamVjdFdpdGhWYWx1ZTxSZWplY3RlZFZhbHVlLCBSZWplY3RlZE1ldGE+LFxyXG4gICAgKFxyXG4gICAgICB2YWx1ZTogUmVqZWN0ZWRWYWx1ZSxcclxuICAgICAgbWV0YTogUmVqZWN0ZWRNZXRhXHJcbiAgICApID0+IFJlamVjdFdpdGhWYWx1ZTxSZWplY3RlZFZhbHVlLCBSZWplY3RlZE1ldGE+XHJcbiAgPlxyXG4gIGZ1bGZpbGxXaXRoVmFsdWU6IElzVW5rbm93bjxcclxuICAgIEZ1bGZpbGxlZE1ldGEsXHJcbiAgICA8RnVsZmlsbGVkVmFsdWU+KHZhbHVlOiBGdWxmaWxsZWRWYWx1ZSkgPT4gRnVsZmlsbGVkVmFsdWUsXHJcbiAgICA8RnVsZmlsbGVkVmFsdWU+KFxyXG4gICAgICB2YWx1ZTogRnVsZmlsbGVkVmFsdWUsXHJcbiAgICAgIG1ldGE6IEZ1bGZpbGxlZE1ldGFcclxuICAgICkgPT4gRnVsZmlsbFdpdGhNZXRhPEZ1bGZpbGxlZFZhbHVlLCBGdWxmaWxsZWRNZXRhPlxyXG4gID5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXplZEVycm9yIHtcclxuICBuYW1lPzogc3RyaW5nXHJcbiAgbWVzc2FnZT86IHN0cmluZ1xyXG4gIHN0YWNrPzogc3RyaW5nXHJcbiAgY29kZT86IHN0cmluZ1xyXG59XHJcblxyXG5jb25zdCBjb21tb25Qcm9wZXJ0aWVzOiBBcnJheTxrZXlvZiBTZXJpYWxpemVkRXJyb3I+ID0gW1xyXG4gICduYW1lJyxcclxuICAnbWVzc2FnZScsXHJcbiAgJ3N0YWNrJyxcclxuICAnY29kZScsXHJcbl1cclxuXHJcbmNsYXNzIFJlamVjdFdpdGhWYWx1ZTxQYXlsb2FkLCBSZWplY3RlZE1ldGE+IHtcclxuICAvKlxyXG4gIHR5cGUtb25seSBwcm9wZXJ0eSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIFJlamVjdFdpdGhWYWx1ZSBhbmQgRnVsZmlsbFdpdGhNZXRhXHJcbiAgZG9lcyBub3QgZXhpc3QgYXQgcnVudGltZVxyXG4gICovXHJcbiAgcHJpdmF0ZSByZWFkb25seSBfdHlwZSE6ICdSZWplY3RXaXRoVmFsdWUnXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGF5bG9hZDogUGF5bG9hZCxcclxuICAgIHB1YmxpYyByZWFkb25seSBtZXRhOiBSZWplY3RlZE1ldGFcclxuICApIHt9XHJcbn1cclxuXHJcbmNsYXNzIEZ1bGZpbGxXaXRoTWV0YTxQYXlsb2FkLCBGdWxmaWxsZWRNZXRhPiB7XHJcbiAgLypcclxuICB0eXBlLW9ubHkgcHJvcGVydHkgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBSZWplY3RXaXRoVmFsdWUgYW5kIEZ1bGZpbGxXaXRoTWV0YVxyXG4gIGRvZXMgbm90IGV4aXN0IGF0IHJ1bnRpbWVcclxuICAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX3R5cGUhOiAnRnVsZmlsbFdpdGhNZXRhJ1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHBheWxvYWQ6IFBheWxvYWQsXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWV0YTogRnVsZmlsbGVkTWV0YVxyXG4gICkge31cclxufVxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgYW4gZXJyb3IgaW50byBhIHBsYWluIG9iamVjdC5cclxuICogUmV3b3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NlcmlhbGl6ZS1lcnJvclxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbWluaVNlcmlhbGl6ZUVycm9yID0gKHZhbHVlOiBhbnkpOiBTZXJpYWxpemVkRXJyb3IgPT4ge1xyXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICBjb25zdCBzaW1wbGVFcnJvcjogU2VyaWFsaXplZEVycm9yID0ge31cclxuICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgY29tbW9uUHJvcGVydGllcykge1xyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBzaW1wbGVFcnJvcltwcm9wZXJ0eV0gPSB2YWx1ZVtwcm9wZXJ0eV1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaW1wbGVFcnJvclxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgbWVzc2FnZTogU3RyaW5nKHZhbHVlKSB9XHJcbn1cclxuXHJcbnR5cGUgQXN5bmNUaHVua0NvbmZpZyA9IHtcclxuICBzdGF0ZT86IHVua25vd25cclxuICBkaXNwYXRjaD86IERpc3BhdGNoXHJcbiAgZXh0cmE/OiB1bmtub3duXHJcbiAgcmVqZWN0VmFsdWU/OiB1bmtub3duXHJcbiAgc2VyaWFsaXplZEVycm9yVHlwZT86IHVua25vd25cclxuICBwZW5kaW5nTWV0YT86IHVua25vd25cclxuICBmdWxmaWxsZWRNZXRhPzogdW5rbm93blxyXG4gIHJlamVjdGVkTWV0YT86IHVua25vd25cclxufVxyXG5cclxudHlwZSBHZXRTdGF0ZTxUaHVua0FwaUNvbmZpZz4gPSBUaHVua0FwaUNvbmZpZyBleHRlbmRzIHtcclxuICBzdGF0ZTogaW5mZXIgU3RhdGVcclxufVxyXG4gID8gU3RhdGVcclxuICA6IHVua25vd25cclxudHlwZSBHZXRFeHRyYTxUaHVua0FwaUNvbmZpZz4gPSBUaHVua0FwaUNvbmZpZyBleHRlbmRzIHsgZXh0cmE6IGluZmVyIEV4dHJhIH1cclxuICA/IEV4dHJhXHJcbiAgOiB1bmtub3duXHJcbnR5cGUgR2V0RGlzcGF0Y2g8VGh1bmtBcGlDb25maWc+ID0gVGh1bmtBcGlDb25maWcgZXh0ZW5kcyB7XHJcbiAgZGlzcGF0Y2g6IGluZmVyIERpc3BhdGNoXHJcbn1cclxuICA/IEZhbGxiYWNrSWZVbmtub3duPFxyXG4gICAgICBEaXNwYXRjaCxcclxuICAgICAgVGh1bmtEaXNwYXRjaDxcclxuICAgICAgICBHZXRTdGF0ZTxUaHVua0FwaUNvbmZpZz4sXHJcbiAgICAgICAgR2V0RXh0cmE8VGh1bmtBcGlDb25maWc+LFxyXG4gICAgICAgIEFueUFjdGlvblxyXG4gICAgICA+XHJcbiAgICA+XHJcbiAgOiBUaHVua0Rpc3BhdGNoPEdldFN0YXRlPFRodW5rQXBpQ29uZmlnPiwgR2V0RXh0cmE8VGh1bmtBcGlDb25maWc+LCBBbnlBY3Rpb24+XHJcblxyXG50eXBlIEdldFRodW5rQVBJPFRodW5rQXBpQ29uZmlnPiA9IEJhc2VUaHVua0FQSTxcclxuICBHZXRTdGF0ZTxUaHVua0FwaUNvbmZpZz4sXHJcbiAgR2V0RXh0cmE8VGh1bmtBcGlDb25maWc+LFxyXG4gIEdldERpc3BhdGNoPFRodW5rQXBpQ29uZmlnPixcclxuICBHZXRSZWplY3RWYWx1ZTxUaHVua0FwaUNvbmZpZz4sXHJcbiAgR2V0UmVqZWN0ZWRNZXRhPFRodW5rQXBpQ29uZmlnPixcclxuICBHZXRGdWxmaWxsZWRNZXRhPFRodW5rQXBpQ29uZmlnPlxyXG4+XHJcblxyXG50eXBlIEdldFJlamVjdFZhbHVlPFRodW5rQXBpQ29uZmlnPiA9IFRodW5rQXBpQ29uZmlnIGV4dGVuZHMge1xyXG4gIHJlamVjdFZhbHVlOiBpbmZlciBSZWplY3RWYWx1ZVxyXG59XHJcbiAgPyBSZWplY3RWYWx1ZVxyXG4gIDogdW5rbm93blxyXG5cclxudHlwZSBHZXRQZW5kaW5nTWV0YTxUaHVua0FwaUNvbmZpZz4gPSBUaHVua0FwaUNvbmZpZyBleHRlbmRzIHtcclxuICBwZW5kaW5nTWV0YTogaW5mZXIgUGVuZGluZ01ldGFcclxufVxyXG4gID8gUGVuZGluZ01ldGFcclxuICA6IHVua25vd25cclxuXHJcbnR5cGUgR2V0RnVsZmlsbGVkTWV0YTxUaHVua0FwaUNvbmZpZz4gPSBUaHVua0FwaUNvbmZpZyBleHRlbmRzIHtcclxuICBmdWxmaWxsZWRNZXRhOiBpbmZlciBGdWxmaWxsZWRNZXRhXHJcbn1cclxuICA/IEZ1bGZpbGxlZE1ldGFcclxuICA6IHVua25vd25cclxuXHJcbnR5cGUgR2V0UmVqZWN0ZWRNZXRhPFRodW5rQXBpQ29uZmlnPiA9IFRodW5rQXBpQ29uZmlnIGV4dGVuZHMge1xyXG4gIHJlamVjdGVkTWV0YTogaW5mZXIgUmVqZWN0ZWRNZXRhXHJcbn1cclxuICA/IFJlamVjdGVkTWV0YVxyXG4gIDogdW5rbm93blxyXG5cclxudHlwZSBHZXRTZXJpYWxpemVkRXJyb3JUeXBlPFRodW5rQXBpQ29uZmlnPiA9IFRodW5rQXBpQ29uZmlnIGV4dGVuZHMge1xyXG4gIHNlcmlhbGl6ZWRFcnJvclR5cGU6IGluZmVyIEdldFNlcmlhbGl6ZWRFcnJvclR5cGVcclxufVxyXG4gID8gR2V0U2VyaWFsaXplZEVycm9yVHlwZVxyXG4gIDogU2VyaWFsaXplZEVycm9yXHJcblxyXG50eXBlIE1heWJlUHJvbWlzZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgKFQgZXh0ZW5kcyBhbnkgPyBQcm9taXNlPFQ+IDogbmV2ZXIpXHJcblxyXG4vKipcclxuICogQSB0eXBlIGRlc2NyaWJpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgYHBheWxvYWRDcmVhdG9yYCBhcmd1bWVudCB0byBgY3JlYXRlQXN5bmNUaHVua2AuXHJcbiAqIE1pZ2h0IGJlIHVzZWZ1bCBmb3Igd3JhcHBpbmcgYGNyZWF0ZUFzeW5jVGh1bmtgIGluIGN1c3RvbSBhYnN0cmFjdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIEFzeW5jVGh1bmtQYXlsb2FkQ3JlYXRvclJldHVyblZhbHVlPFxyXG4gIFJldHVybmVkLFxyXG4gIFRodW5rQXBpQ29uZmlnIGV4dGVuZHMgQXN5bmNUaHVua0NvbmZpZ1xyXG4+ID0gTWF5YmVQcm9taXNlPFxyXG4gIHwgSXNVbmtub3duPFxyXG4gICAgICBHZXRGdWxmaWxsZWRNZXRhPFRodW5rQXBpQ29uZmlnPixcclxuICAgICAgUmV0dXJuZWQsXHJcbiAgICAgIEZ1bGZpbGxXaXRoTWV0YTxSZXR1cm5lZCwgR2V0RnVsZmlsbGVkTWV0YTxUaHVua0FwaUNvbmZpZz4+XHJcbiAgICA+XHJcbiAgfCBSZWplY3RXaXRoVmFsdWU8XHJcbiAgICAgIEdldFJlamVjdFZhbHVlPFRodW5rQXBpQ29uZmlnPixcclxuICAgICAgR2V0UmVqZWN0ZWRNZXRhPFRodW5rQXBpQ29uZmlnPlxyXG4gICAgPlxyXG4+XHJcbi8qKlxyXG4gKiBBIHR5cGUgZGVzY3JpYmluZyB0aGUgYHBheWxvYWRDcmVhdG9yYCBhcmd1bWVudCB0byBgY3JlYXRlQXN5bmNUaHVua2AuXHJcbiAqIE1pZ2h0IGJlIHVzZWZ1bCBmb3Igd3JhcHBpbmcgYGNyZWF0ZUFzeW5jVGh1bmtgIGluIGN1c3RvbSBhYnN0cmFjdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIEFzeW5jVGh1bmtQYXlsb2FkQ3JlYXRvcjxcclxuICBSZXR1cm5lZCxcclxuICBUaHVua0FyZyA9IHZvaWQsXHJcbiAgVGh1bmtBcGlDb25maWcgZXh0ZW5kcyBBc3luY1RodW5rQ29uZmlnID0ge31cclxuPiA9IChcclxuICBhcmc6IFRodW5rQXJnLFxyXG4gIHRodW5rQVBJOiBHZXRUaHVua0FQSTxUaHVua0FwaUNvbmZpZz5cclxuKSA9PiBBc3luY1RodW5rUGF5bG9hZENyZWF0b3JSZXR1cm5WYWx1ZTxSZXR1cm5lZCwgVGh1bmtBcGlDb25maWc+XHJcblxyXG4vKipcclxuICogQSBUaHVua0FjdGlvbiBjcmVhdGVkIGJ5IGBjcmVhdGVBc3luY1RodW5rYC5cclxuICogRGlzcGF0Y2hpbmcgaXQgcmV0dXJucyBhIFByb21pc2UgZm9yIGVpdGhlciBhXHJcbiAqIGZ1bGZpbGxlZCBvciByZWplY3RlZCBhY3Rpb24uXHJcbiAqIEFsc28sIHRoZSByZXR1cm5lZCB2YWx1ZSBjb250YWlucyBhbiBgYWJvcnQoKWAgbWV0aG9kXHJcbiAqIHRoYXQgYWxsb3dzIHRoZSBhc3luY0FjdGlvbiB0byBiZSBjYW5jZWxsZWQgZnJvbSB0aGUgb3V0c2lkZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXN5bmNUaHVua0FjdGlvbjxcclxuICBSZXR1cm5lZCxcclxuICBUaHVua0FyZyxcclxuICBUaHVua0FwaUNvbmZpZyBleHRlbmRzIEFzeW5jVGh1bmtDb25maWdcclxuPiA9IChcclxuICBkaXNwYXRjaDogR2V0RGlzcGF0Y2g8VGh1bmtBcGlDb25maWc+LFxyXG4gIGdldFN0YXRlOiAoKSA9PiBHZXRTdGF0ZTxUaHVua0FwaUNvbmZpZz4sXHJcbiAgZXh0cmE6IEdldEV4dHJhPFRodW5rQXBpQ29uZmlnPlxyXG4pID0+IFByb21pc2U8XHJcbiAgfCBSZXR1cm5UeXBlPEFzeW5jVGh1bmtGdWxmaWxsZWRBY3Rpb25DcmVhdG9yPFJldHVybmVkLCBUaHVua0FyZz4+XHJcbiAgfCBSZXR1cm5UeXBlPEFzeW5jVGh1bmtSZWplY3RlZEFjdGlvbkNyZWF0b3I8VGh1bmtBcmcsIFRodW5rQXBpQ29uZmlnPj5cclxuPiAmIHtcclxuICBhYm9ydDogKHJlYXNvbj86IHN0cmluZykgPT4gdm9pZFxyXG4gIHJlcXVlc3RJZDogc3RyaW5nXHJcbiAgYXJnOiBUaHVua0FyZ1xyXG4gIHVud3JhcDogKCkgPT4gUHJvbWlzZTxSZXR1cm5lZD5cclxufVxyXG5cclxudHlwZSBBc3luY1RodW5rQWN0aW9uQ3JlYXRvcjxcclxuICBSZXR1cm5lZCxcclxuICBUaHVua0FyZyxcclxuICBUaHVua0FwaUNvbmZpZyBleHRlbmRzIEFzeW5jVGh1bmtDb25maWdcclxuPiA9IElzQW55PFxyXG4gIFRodW5rQXJnLFxyXG4gIC8vIGFueSBoYW5kbGluZ1xyXG4gIChhcmc6IFRodW5rQXJnKSA9PiBBc3luY1RodW5rQWN0aW9uPFJldHVybmVkLCBUaHVua0FyZywgVGh1bmtBcGlDb25maWc+LFxyXG4gIC8vIHVua25vd24gaGFuZGxpbmdcclxuICB1bmtub3duIGV4dGVuZHMgVGh1bmtBcmdcclxuICAgID8gKGFyZzogVGh1bmtBcmcpID0+IEFzeW5jVGh1bmtBY3Rpb248UmV0dXJuZWQsIFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz4gLy8gYXJndW1lbnQgbm90IHNwZWNpZmllZCBvciBzcGVjaWZpZWQgYXMgdm9pZCBvciB1bmRlZmluZWRcclxuICAgIDogW1RodW5rQXJnXSBleHRlbmRzIFt2b2lkXSB8IFt1bmRlZmluZWRdXHJcbiAgICA/ICgpID0+IEFzeW5jVGh1bmtBY3Rpb248UmV0dXJuZWQsIFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz4gLy8gYXJndW1lbnQgY29udGFpbnMgdm9pZFxyXG4gICAgOiBbdm9pZF0gZXh0ZW5kcyBbVGh1bmtBcmddIC8vIG1ha2Ugb3B0aW9uYWxcclxuICAgID8gKGFyZz86IFRodW5rQXJnKSA9PiBBc3luY1RodW5rQWN0aW9uPFJldHVybmVkLCBUaHVua0FyZywgVGh1bmtBcGlDb25maWc+IC8vIGFyZ3VtZW50IGNvbnRhaW5zIHVuZGVmaW5lZFxyXG4gICAgOiBbdW5kZWZpbmVkXSBleHRlbmRzIFtUaHVua0FyZ11cclxuICAgID8gV2l0aFN0cmljdE51bGxDaGVja3M8XHJcbiAgICAgICAgLy8gd2l0aCBzdHJpY3QgbnVsbENoZWNrczogbWFrZSBvcHRpb25hbFxyXG4gICAgICAgIChcclxuICAgICAgICAgIGFyZz86IFRodW5rQXJnXHJcbiAgICAgICAgKSA9PiBBc3luY1RodW5rQWN0aW9uPFJldHVybmVkLCBUaHVua0FyZywgVGh1bmtBcGlDb25maWc+LFxyXG4gICAgICAgIC8vIHdpdGhvdXQgc3RyaWN0IG51bGwgY2hlY2tzIHRoaXMgd2lsbCBtYXRjaCBldmVyeXRoaW5nLCBzbyBkb24ndCBtYWtlIGl0IG9wdGlvbmFsXHJcbiAgICAgICAgKGFyZzogVGh1bmtBcmcpID0+IEFzeW5jVGh1bmtBY3Rpb248UmV0dXJuZWQsIFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz5cclxuICAgICAgPiAvLyBkZWZhdWx0IGNhc2U6IG5vcm1hbCBhcmd1bWVudFxyXG4gICAgOiAoYXJnOiBUaHVua0FyZykgPT4gQXN5bmNUaHVua0FjdGlvbjxSZXR1cm5lZCwgVGh1bmtBcmcsIFRodW5rQXBpQ29uZmlnPlxyXG4+XHJcblxyXG4vKipcclxuICogT3B0aW9ucyBvYmplY3QgZm9yIGBjcmVhdGVBc3luY1RodW5rYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXN5bmNUaHVua09wdGlvbnM8XHJcbiAgVGh1bmtBcmcgPSB2b2lkLFxyXG4gIFRodW5rQXBpQ29uZmlnIGV4dGVuZHMgQXN5bmNUaHVua0NvbmZpZyA9IHt9XHJcbj4gPSB7XHJcbiAgLyoqXHJcbiAgICogQSBtZXRob2QgdG8gY29udHJvbCB3aGV0aGVyIHRoZSBhc3luY1RodW5rIHNob3VsZCBiZSBleGVjdXRlZC4gSGFzIGFjY2VzcyB0byB0aGVcclxuICAgKiBgYXJnYCwgYGFwaS5nZXRTdGF0ZSgpYCBhbmQgYGFwaS5leHRyYWAgYXJndW1lbnRzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMgYGZhbHNlYCBpZiBpdCBzaG91bGQgYmUgc2tpcHBlZFxyXG4gICAqL1xyXG4gIGNvbmRpdGlvbj8oXHJcbiAgICBhcmc6IFRodW5rQXJnLFxyXG4gICAgYXBpOiBQaWNrPEdldFRodW5rQVBJPFRodW5rQXBpQ29uZmlnPiwgJ2dldFN0YXRlJyB8ICdleHRyYSc+XHJcbiAgKTogTWF5YmVQcm9taXNlPGJvb2xlYW4gfCB1bmRlZmluZWQ+XHJcbiAgLyoqXHJcbiAgICogSWYgYGNvbmRpdGlvbmAgcmV0dXJucyBgZmFsc2VgLCB0aGUgYXN5bmNUaHVuayB3aWxsIGJlIHNraXBwZWQuXHJcbiAgICogVGhpcyBvcHRpb24gYWxsb3dzIHlvdSB0byBjb250cm9sIHdoZXRoZXIgYSBgcmVqZWN0ZWRgIGFjdGlvbiB3aXRoIGBtZXRhLmNvbmRpdGlvbiA9PSBmYWxzZWBcclxuICAgKiB3aWxsIGJlIGRpc3BhdGNoZWQgb3Igbm90LlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIGRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uPzogYm9vbGVhblxyXG5cclxuICBzZXJpYWxpemVFcnJvcj86ICh4OiB1bmtub3duKSA9PiBHZXRTZXJpYWxpemVkRXJyb3JUeXBlPFRodW5rQXBpQ29uZmlnPlxyXG5cclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIGdlbmVyYXRpbmcgdGhlIGByZXF1ZXN0SWRgIGZvciB0aGUgcmVxdWVzdCBzZXF1ZW5jZS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBuYW5vaWRgXHJcbiAgICovXHJcbiAgaWRHZW5lcmF0b3I/OiAoYXJnOiBUaHVua0FyZykgPT4gc3RyaW5nXHJcbn0gJiBJc1Vua25vd248XHJcbiAgR2V0UGVuZGluZ01ldGE8VGh1bmtBcGlDb25maWc+LFxyXG4gIHtcclxuICAgIC8qKlxyXG4gICAgICogQSBtZXRob2QgdG8gZ2VuZXJhdGUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGBtZXRhYCBvZiB0aGUgcGVuZGluZyBhY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogVXNpbmcgdGhpcyBvcHRpb25hbCBvdmVybG9hZCB3aWxsIG5vdCBtb2RpZnkgdGhlIHR5cGVzIGNvcnJlY3RseSwgdGhpcyBvdmVybG9hZCBpcyBvbmx5IGluIHBsYWNlIHRvIHN1cHBvcnQgSmF2YVNjcmlwdCB1c2Vycy5cclxuICAgICAqIFBsZWFzZSB1c2UgdGhlIGBUaHVua0FwaUNvbmZpZ2AgcGFyYW1ldGVyIGBwZW5kaW5nTWV0YWAgdG8gZ2V0IGFjY2VzcyB0byBhIGNvcnJlY3RseSB0eXBlZCBvdmVybG9hZFxyXG4gICAgICovXHJcbiAgICBnZXRQZW5kaW5nTWV0YT8oXHJcbiAgICAgIGJhc2U6IHtcclxuICAgICAgICBhcmc6IFRodW5rQXJnXHJcbiAgICAgICAgcmVxdWVzdElkOiBzdHJpbmdcclxuICAgICAgfSxcclxuICAgICAgYXBpOiBQaWNrPEdldFRodW5rQVBJPFRodW5rQXBpQ29uZmlnPiwgJ2dldFN0YXRlJyB8ICdleHRyYSc+XHJcbiAgICApOiBHZXRQZW5kaW5nTWV0YTxUaHVua0FwaUNvbmZpZz5cclxuICB9LFxyXG4gIHtcclxuICAgIC8qKlxyXG4gICAgICogQSBtZXRob2QgdG8gZ2VuZXJhdGUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGBtZXRhYCBvZiB0aGUgcGVuZGluZyBhY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGdldFBlbmRpbmdNZXRhKFxyXG4gICAgICBiYXNlOiB7XHJcbiAgICAgICAgYXJnOiBUaHVua0FyZ1xyXG4gICAgICAgIHJlcXVlc3RJZDogc3RyaW5nXHJcbiAgICAgIH0sXHJcbiAgICAgIGFwaTogUGljazxHZXRUaHVua0FQSTxUaHVua0FwaUNvbmZpZz4sICdnZXRTdGF0ZScgfCAnZXh0cmEnPlxyXG4gICAgKTogR2V0UGVuZGluZ01ldGE8VGh1bmtBcGlDb25maWc+XHJcbiAgfVxyXG4+XHJcblxyXG5leHBvcnQgdHlwZSBBc3luY1RodW5rUGVuZGluZ0FjdGlvbkNyZWF0b3I8XHJcbiAgVGh1bmtBcmcsXHJcbiAgVGh1bmtBcGlDb25maWcgPSB7fVxyXG4+ID0gQWN0aW9uQ3JlYXRvcldpdGhQcmVwYXJlZFBheWxvYWQ8XHJcbiAgW3N0cmluZywgVGh1bmtBcmcsIEdldFBlbmRpbmdNZXRhPFRodW5rQXBpQ29uZmlnPj9dLFxyXG4gIHVuZGVmaW5lZCxcclxuICBzdHJpbmcsXHJcbiAgbmV2ZXIsXHJcbiAge1xyXG4gICAgYXJnOiBUaHVua0FyZ1xyXG4gICAgcmVxdWVzdElkOiBzdHJpbmdcclxuICAgIHJlcXVlc3RTdGF0dXM6ICdwZW5kaW5nJ1xyXG4gIH0gJiBHZXRQZW5kaW5nTWV0YTxUaHVua0FwaUNvbmZpZz5cclxuPlxyXG5cclxuZXhwb3J0IHR5cGUgQXN5bmNUaHVua1JlamVjdGVkQWN0aW9uQ3JlYXRvcjxcclxuICBUaHVua0FyZyxcclxuICBUaHVua0FwaUNvbmZpZyA9IHt9XHJcbj4gPSBBY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxcclxuICBbXHJcbiAgICBFcnJvciB8IG51bGwsXHJcbiAgICBzdHJpbmcsXHJcbiAgICBUaHVua0FyZyxcclxuICAgIEdldFJlamVjdFZhbHVlPFRodW5rQXBpQ29uZmlnPj8sXHJcbiAgICBHZXRSZWplY3RlZE1ldGE8VGh1bmtBcGlDb25maWc+P1xyXG4gIF0sXHJcbiAgR2V0UmVqZWN0VmFsdWU8VGh1bmtBcGlDb25maWc+IHwgdW5kZWZpbmVkLFxyXG4gIHN0cmluZyxcclxuICBHZXRTZXJpYWxpemVkRXJyb3JUeXBlPFRodW5rQXBpQ29uZmlnPixcclxuICB7XHJcbiAgICBhcmc6IFRodW5rQXJnXHJcbiAgICByZXF1ZXN0SWQ6IHN0cmluZ1xyXG4gICAgcmVxdWVzdFN0YXR1czogJ3JlamVjdGVkJ1xyXG4gICAgYWJvcnRlZDogYm9vbGVhblxyXG4gICAgY29uZGl0aW9uOiBib29sZWFuXHJcbiAgfSAmIChcclxuICAgIHwgKHsgcmVqZWN0ZWRXaXRoVmFsdWU6IGZhbHNlIH0gJiB7XHJcbiAgICAgICAgW0sgaW4ga2V5b2YgR2V0UmVqZWN0ZWRNZXRhPFRodW5rQXBpQ29uZmlnPl0/OiB1bmRlZmluZWRcclxuICAgICAgfSlcclxuICAgIHwgKHsgcmVqZWN0ZWRXaXRoVmFsdWU6IHRydWUgfSAmIEdldFJlamVjdGVkTWV0YTxUaHVua0FwaUNvbmZpZz4pXHJcbiAgKVxyXG4+XHJcblxyXG5leHBvcnQgdHlwZSBBc3luY1RodW5rRnVsZmlsbGVkQWN0aW9uQ3JlYXRvcjxcclxuICBSZXR1cm5lZCxcclxuICBUaHVua0FyZyxcclxuICBUaHVua0FwaUNvbmZpZyA9IHt9XHJcbj4gPSBBY3Rpb25DcmVhdG9yV2l0aFByZXBhcmVkUGF5bG9hZDxcclxuICBbUmV0dXJuZWQsIHN0cmluZywgVGh1bmtBcmcsIEdldEZ1bGZpbGxlZE1ldGE8VGh1bmtBcGlDb25maWc+P10sXHJcbiAgUmV0dXJuZWQsXHJcbiAgc3RyaW5nLFxyXG4gIG5ldmVyLFxyXG4gIHtcclxuICAgIGFyZzogVGh1bmtBcmdcclxuICAgIHJlcXVlc3RJZDogc3RyaW5nXHJcbiAgICByZXF1ZXN0U3RhdHVzOiAnZnVsZmlsbGVkJ1xyXG4gIH0gJiBHZXRGdWxmaWxsZWRNZXRhPFRodW5rQXBpQ29uZmlnPlxyXG4+XHJcblxyXG4vKipcclxuICogQSB0eXBlIGRlc2NyaWJpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiBgY3JlYXRlQXN5bmNUaHVua2AuXHJcbiAqIE1pZ2h0IGJlIHVzZWZ1bCBmb3Igd3JhcHBpbmcgYGNyZWF0ZUFzeW5jVGh1bmtgIGluIGN1c3RvbSBhYnN0cmFjdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIEFzeW5jVGh1bms8XHJcbiAgUmV0dXJuZWQsXHJcbiAgVGh1bmtBcmcsXHJcbiAgVGh1bmtBcGlDb25maWcgZXh0ZW5kcyBBc3luY1RodW5rQ29uZmlnXHJcbj4gPSBBc3luY1RodW5rQWN0aW9uQ3JlYXRvcjxSZXR1cm5lZCwgVGh1bmtBcmcsIFRodW5rQXBpQ29uZmlnPiAmIHtcclxuICBwZW5kaW5nOiBBc3luY1RodW5rUGVuZGluZ0FjdGlvbkNyZWF0b3I8VGh1bmtBcmcsIFRodW5rQXBpQ29uZmlnPlxyXG4gIHJlamVjdGVkOiBBc3luY1RodW5rUmVqZWN0ZWRBY3Rpb25DcmVhdG9yPFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz5cclxuICBmdWxmaWxsZWQ6IEFzeW5jVGh1bmtGdWxmaWxsZWRBY3Rpb25DcmVhdG9yPFxyXG4gICAgUmV0dXJuZWQsXHJcbiAgICBUaHVua0FyZyxcclxuICAgIFRodW5rQXBpQ29uZmlnXHJcbiAgPlxyXG4gIHR5cGVQcmVmaXg6IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIE92ZXJyaWRlVGh1bmtBcGlDb25maWdzPE9sZENvbmZpZywgTmV3Q29uZmlnPiA9IElkPFxyXG4gIE5ld0NvbmZpZyAmIE9taXQ8T2xkQ29uZmlnLCBrZXlvZiBOZXdDb25maWc+XHJcbj5cclxuXHJcbnR5cGUgQ3JlYXRlQXN5bmNUaHVuazxDdXJyaWVkVGh1bmtBcGlDb25maWcgZXh0ZW5kcyBBc3luY1RodW5rQ29uZmlnPiA9IHtcclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB0eXBlUHJlZml4XHJcbiAgICogQHBhcmFtIHBheWxvYWRDcmVhdG9yXHJcbiAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICAvLyBzZXBhcmF0ZSBzaWduYXR1cmUgd2l0aG91dCBgQXN5bmNUaHVua0NvbmZpZ2AgZm9yIGJldHRlciBpbmZlcmVuY2VcclxuICA8UmV0dXJuZWQsIFRodW5rQXJnID0gdm9pZD4oXHJcbiAgICB0eXBlUHJlZml4OiBzdHJpbmcsXHJcbiAgICBwYXlsb2FkQ3JlYXRvcjogQXN5bmNUaHVua1BheWxvYWRDcmVhdG9yPFxyXG4gICAgICBSZXR1cm5lZCxcclxuICAgICAgVGh1bmtBcmcsXHJcbiAgICAgIEN1cnJpZWRUaHVua0FwaUNvbmZpZ1xyXG4gICAgPixcclxuICAgIG9wdGlvbnM/OiBBc3luY1RodW5rT3B0aW9uczxUaHVua0FyZywgQ3VycmllZFRodW5rQXBpQ29uZmlnPlxyXG4gICk6IEFzeW5jVGh1bms8UmV0dXJuZWQsIFRodW5rQXJnLCBDdXJyaWVkVGh1bmtBcGlDb25maWc+XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHR5cGVQcmVmaXhcclxuICAgKiBAcGFyYW0gcGF5bG9hZENyZWF0b3JcclxuICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIDxSZXR1cm5lZCwgVGh1bmtBcmcsIFRodW5rQXBpQ29uZmlnIGV4dGVuZHMgQXN5bmNUaHVua0NvbmZpZz4oXHJcbiAgICB0eXBlUHJlZml4OiBzdHJpbmcsXHJcbiAgICBwYXlsb2FkQ3JlYXRvcjogQXN5bmNUaHVua1BheWxvYWRDcmVhdG9yPFxyXG4gICAgICBSZXR1cm5lZCxcclxuICAgICAgVGh1bmtBcmcsXHJcbiAgICAgIE92ZXJyaWRlVGh1bmtBcGlDb25maWdzPEN1cnJpZWRUaHVua0FwaUNvbmZpZywgVGh1bmtBcGlDb25maWc+XHJcbiAgICA+LFxyXG4gICAgb3B0aW9ucz86IEFzeW5jVGh1bmtPcHRpb25zPFxyXG4gICAgICBUaHVua0FyZyxcclxuICAgICAgT3ZlcnJpZGVUaHVua0FwaUNvbmZpZ3M8Q3VycmllZFRodW5rQXBpQ29uZmlnLCBUaHVua0FwaUNvbmZpZz5cclxuICAgID5cclxuICApOiBBc3luY1RodW5rPFxyXG4gICAgUmV0dXJuZWQsXHJcbiAgICBUaHVua0FyZyxcclxuICAgIE92ZXJyaWRlVGh1bmtBcGlDb25maWdzPEN1cnJpZWRUaHVua0FwaUNvbmZpZywgVGh1bmtBcGlDb25maWc+XHJcbiAgPlxyXG5cclxuICB3aXRoVHlwZXM8VGh1bmtBcGlDb25maWcgZXh0ZW5kcyBBc3luY1RodW5rQ29uZmlnPigpOiBDcmVhdGVBc3luY1RodW5rPFxyXG4gICAgT3ZlcnJpZGVUaHVua0FwaUNvbmZpZ3M8Q3VycmllZFRodW5rQXBpQ29uZmlnLCBUaHVua0FwaUNvbmZpZz5cclxuICA+XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVBc3luY1RodW5rID0gKCgpID0+IHtcclxuICBmdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rPFxyXG4gICAgUmV0dXJuZWQsXHJcbiAgICBUaHVua0FyZyxcclxuICAgIFRodW5rQXBpQ29uZmlnIGV4dGVuZHMgQXN5bmNUaHVua0NvbmZpZ1xyXG4gID4oXHJcbiAgICB0eXBlUHJlZml4OiBzdHJpbmcsXHJcbiAgICBwYXlsb2FkQ3JlYXRvcjogQXN5bmNUaHVua1BheWxvYWRDcmVhdG9yPFxyXG4gICAgICBSZXR1cm5lZCxcclxuICAgICAgVGh1bmtBcmcsXHJcbiAgICAgIFRodW5rQXBpQ29uZmlnXHJcbiAgICA+LFxyXG4gICAgb3B0aW9ucz86IEFzeW5jVGh1bmtPcHRpb25zPFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz5cclxuICApOiBBc3luY1RodW5rPFJldHVybmVkLCBUaHVua0FyZywgVGh1bmtBcGlDb25maWc+IHtcclxuICAgIHR5cGUgUmVqZWN0ZWRWYWx1ZSA9IEdldFJlamVjdFZhbHVlPFRodW5rQXBpQ29uZmlnPlxyXG4gICAgdHlwZSBQZW5kaW5nTWV0YSA9IEdldFBlbmRpbmdNZXRhPFRodW5rQXBpQ29uZmlnPlxyXG4gICAgdHlwZSBGdWxmaWxsZWRNZXRhID0gR2V0RnVsZmlsbGVkTWV0YTxUaHVua0FwaUNvbmZpZz5cclxuICAgIHR5cGUgUmVqZWN0ZWRNZXRhID0gR2V0UmVqZWN0ZWRNZXRhPFRodW5rQXBpQ29uZmlnPlxyXG5cclxuICAgIGNvbnN0IGZ1bGZpbGxlZDogQXN5bmNUaHVua0Z1bGZpbGxlZEFjdGlvbkNyZWF0b3I8XHJcbiAgICAgIFJldHVybmVkLFxyXG4gICAgICBUaHVua0FyZyxcclxuICAgICAgVGh1bmtBcGlDb25maWdcclxuICAgID4gPSBjcmVhdGVBY3Rpb24oXHJcbiAgICAgIHR5cGVQcmVmaXggKyAnL2Z1bGZpbGxlZCcsXHJcbiAgICAgIChcclxuICAgICAgICBwYXlsb2FkOiBSZXR1cm5lZCxcclxuICAgICAgICByZXF1ZXN0SWQ6IHN0cmluZyxcclxuICAgICAgICBhcmc6IFRodW5rQXJnLFxyXG4gICAgICAgIG1ldGE/OiBGdWxmaWxsZWRNZXRhXHJcbiAgICAgICkgPT4gKHtcclxuICAgICAgICBwYXlsb2FkLFxyXG4gICAgICAgIG1ldGE6IHtcclxuICAgICAgICAgIC4uLigobWV0YSBhcyBhbnkpIHx8IHt9KSxcclxuICAgICAgICAgIGFyZyxcclxuICAgICAgICAgIHJlcXVlc3RJZCxcclxuICAgICAgICAgIHJlcXVlc3RTdGF0dXM6ICdmdWxmaWxsZWQnIGFzIGNvbnN0LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pXHJcbiAgICApXHJcblxyXG4gICAgY29uc3QgcGVuZGluZzogQXN5bmNUaHVua1BlbmRpbmdBY3Rpb25DcmVhdG9yPFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz4gPVxyXG4gICAgICBjcmVhdGVBY3Rpb24oXHJcbiAgICAgICAgdHlwZVByZWZpeCArICcvcGVuZGluZycsXHJcbiAgICAgICAgKHJlcXVlc3RJZDogc3RyaW5nLCBhcmc6IFRodW5rQXJnLCBtZXRhPzogUGVuZGluZ01ldGEpID0+ICh7XHJcbiAgICAgICAgICBwYXlsb2FkOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICBtZXRhOiB7XHJcbiAgICAgICAgICAgIC4uLigobWV0YSBhcyBhbnkpIHx8IHt9KSxcclxuICAgICAgICAgICAgYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6ICdwZW5kaW5nJyBhcyBjb25zdCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG5cclxuICAgIGNvbnN0IHJlamVjdGVkOiBBc3luY1RodW5rUmVqZWN0ZWRBY3Rpb25DcmVhdG9yPFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz4gPVxyXG4gICAgICBjcmVhdGVBY3Rpb24oXHJcbiAgICAgICAgdHlwZVByZWZpeCArICcvcmVqZWN0ZWQnLFxyXG4gICAgICAgIChcclxuICAgICAgICAgIGVycm9yOiBFcnJvciB8IG51bGwsXHJcbiAgICAgICAgICByZXF1ZXN0SWQ6IHN0cmluZyxcclxuICAgICAgICAgIGFyZzogVGh1bmtBcmcsXHJcbiAgICAgICAgICBwYXlsb2FkPzogUmVqZWN0ZWRWYWx1ZSxcclxuICAgICAgICAgIG1ldGE/OiBSZWplY3RlZE1ldGFcclxuICAgICAgICApID0+ICh7XHJcbiAgICAgICAgICBwYXlsb2FkLFxyXG4gICAgICAgICAgZXJyb3I6ICgob3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZUVycm9yKSB8fCBtaW5pU2VyaWFsaXplRXJyb3IpKFxyXG4gICAgICAgICAgICBlcnJvciB8fCAnUmVqZWN0ZWQnXHJcbiAgICAgICAgICApIGFzIEdldFNlcmlhbGl6ZWRFcnJvclR5cGU8VGh1bmtBcGlDb25maWc+LFxyXG4gICAgICAgICAgbWV0YToge1xyXG4gICAgICAgICAgICAuLi4oKG1ldGEgYXMgYW55KSB8fCB7fSksXHJcbiAgICAgICAgICAgIGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkLFxyXG4gICAgICAgICAgICByZWplY3RlZFdpdGhWYWx1ZTogISFwYXlsb2FkLFxyXG4gICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiAncmVqZWN0ZWQnIGFzIGNvbnN0LFxyXG4gICAgICAgICAgICBhYm9ydGVkOiBlcnJvcj8ubmFtZSA9PT0gJ0Fib3J0RXJyb3InLFxyXG4gICAgICAgICAgICBjb25kaXRpb246IGVycm9yPy5uYW1lID09PSAnQ29uZGl0aW9uRXJyb3InLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgICApXHJcblxyXG4gICAgbGV0IGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZVxyXG5cclxuICAgIGNvbnN0IEFDID1cclxuICAgICAgdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICA/IEFib3J0Q29udHJvbGxlclxyXG4gICAgICAgIDogY2xhc3MgaW1wbGVtZW50cyBBYm9ydENvbnRyb2xsZXIge1xyXG4gICAgICAgICAgICBzaWduYWwgPSB7XHJcbiAgICAgICAgICAgICAgYWJvcnRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxyXG4gICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIG9uYWJvcnQoKSB7fSxcclxuICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXHJcbiAgICAgICAgICAgICAgcmVhc29uOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgdGhyb3dJZkFib3J0ZWQoKSB7fSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhYm9ydCgpIHtcclxuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXllZFdhcm5pbmcgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcclxuICAgICAgICAgICAgICAgICAgICBgVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcclxuSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBBYm9ydENvbnRyb2xsZXIgdG8gcmVhY3QgdG8gXFxgYWJvcnRcXGAgZXZlbnRzLCBwbGVhc2UgY29uc2lkZXIgaW1wb3J0aW5nIGEgcG9seWZpbGwgbGlrZSAnYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsL2Rpc3QvYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsLW9ubHknLmBcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoXHJcbiAgICAgIGFyZzogVGh1bmtBcmdcclxuICAgICk6IEFzeW5jVGh1bmtBY3Rpb248UmV0dXJuZWQsIFRodW5rQXJnLCBUaHVua0FwaUNvbmZpZz4ge1xyXG4gICAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmEpID0+IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSBvcHRpb25zPy5pZEdlbmVyYXRvclxyXG4gICAgICAgICAgPyBvcHRpb25zLmlkR2VuZXJhdG9yKGFyZylcclxuICAgICAgICAgIDogbmFub2lkKClcclxuXHJcbiAgICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKClcclxuICAgICAgICBsZXQgYWJvcnRSZWFzb246IHN0cmluZyB8IHVuZGVmaW5lZFxyXG5cclxuICAgICAgICBsZXQgc3RhcnRlZCA9IGZhbHNlXHJcbiAgICAgICAgZnVuY3Rpb24gYWJvcnQocmVhc29uPzogc3RyaW5nKSB7XHJcbiAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvblxyXG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSAoYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgbGV0IGZpbmFsQWN0aW9uOiBSZXR1cm5UeXBlPHR5cGVvZiBmdWxmaWxsZWQgfCB0eXBlb2YgcmVqZWN0ZWQ+XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uUmVzdWx0ID0gb3B0aW9ucz8uY29uZGl0aW9uPy4oYXJnLCB7IGdldFN0YXRlLCBleHRyYSB9KVxyXG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZShjb25kaXRpb25SZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gYXdhaXQgY29uZGl0aW9uUmVzdWx0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb25SZXN1bHQgPT09IGZhbHNlIHx8IGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXHJcbiAgICAgICAgICAgICAgdGhyb3cge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0NvbmRpdGlvbkVycm9yJyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLicsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICBjb25zdCBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlPG5ldmVyPigoXywgcmVqZWN0KSA9PlxyXG4gICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PlxyXG4gICAgICAgICAgICAgICAgcmVqZWN0KHtcclxuICAgICAgICAgICAgICAgICAgbmFtZTogJ0Fib3J0RXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCAnQWJvcnRlZCcsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBkaXNwYXRjaChcclxuICAgICAgICAgICAgICBwZW5kaW5nKFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgYXJnLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucz8uZ2V0UGVuZGluZ01ldGE/LihcclxuICAgICAgICAgICAgICAgICAgeyByZXF1ZXN0SWQsIGFyZyB9LFxyXG4gICAgICAgICAgICAgICAgICB7IGdldFN0YXRlLCBleHRyYSB9XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgIGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgIGFib3J0LFxyXG4gICAgICAgICAgICAgICAgICByZWplY3RXaXRoVmFsdWU6ICgoXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFJlamVjdGVkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YT86IFJlamVjdGVkTWV0YVxyXG4gICAgICAgICAgICAgICAgICApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSwgbWV0YSlcclxuICAgICAgICAgICAgICAgICAgfSkgYXMgYW55LFxyXG4gICAgICAgICAgICAgICAgICBmdWxmaWxsV2l0aFZhbHVlOiAoKHZhbHVlOiB1bmtub3duLCBtZXRhPzogRnVsZmlsbGVkTWV0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKVxyXG4gICAgICAgICAgICAgICAgICB9KSBhcyBhbnksXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEZ1bGZpbGxXaXRoTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdC5wYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgcmVzdWx0Lm1ldGEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdCBhcyBhbnksIHJlcXVlc3RJZCwgYXJnKVxyXG4gICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGZpbmFsQWN0aW9uID1cclxuICAgICAgICAgICAgICBlcnIgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWVcclxuICAgICAgICAgICAgICAgID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVyci5wYXlsb2FkLCBlcnIubWV0YSlcclxuICAgICAgICAgICAgICAgIDogcmVqZWN0ZWQoZXJyIGFzIGFueSwgcmVxdWVzdElkLCBhcmcpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBXZSBkaXNwYXRjaCB0aGUgcmVzdWx0IGFjdGlvbiBfYWZ0ZXJfIHRoZSBjYXRjaCwgdG8gYXZvaWQgaGF2aW5nIGFueSBlcnJvcnNcclxuICAgICAgICAgIC8vIGhlcmUgZ2V0IHN3YWxsb3dlZCBieSB0aGUgdHJ5L2NhdGNoIGJsb2NrLFxyXG4gICAgICAgICAgLy8gcGVyIGh0dHBzOi8vdHdpdHRlci5jb20vZGFuX2FicmFtb3Yvc3RhdHVzLzc3MDkxNDIyMTYzODk0MjcyMFxyXG4gICAgICAgICAgLy8gYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWR1eGpzL3JlZHV4LXRvb2xraXQvYmxvYi9lODVlYjE3YjM5YTIxMThkODU5ZjdiNzc0NmUwZjNmZWU1MjNlMDg5L2RvY3MvdHV0b3JpYWxzL2FkdmFuY2VkLXR1dG9yaWFsLm1kI2FzeW5jLWVycm9yLWhhbmRsaW5nLWxvZ2ljLWluLXRodW5rc1xyXG5cclxuICAgICAgICAgIGNvbnN0IHNraXBEaXNwYXRjaCA9XHJcbiAgICAgICAgICAgIG9wdGlvbnMgJiZcclxuICAgICAgICAgICAgIW9wdGlvbnMuZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24gJiZcclxuICAgICAgICAgICAgcmVqZWN0ZWQubWF0Y2goZmluYWxBY3Rpb24pICYmXHJcbiAgICAgICAgICAgIChmaW5hbEFjdGlvbiBhcyBhbnkpLm1ldGEuY29uZGl0aW9uXHJcblxyXG4gICAgICAgICAgaWYgKCFza2lwRGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgZGlzcGF0Y2goZmluYWxBY3Rpb24pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZmluYWxBY3Rpb25cclxuICAgICAgICB9KSgpXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZSBhcyBQcm9taXNlPGFueT4sIHtcclxuICAgICAgICAgIGFib3J0LFxyXG4gICAgICAgICAgcmVxdWVzdElkLFxyXG4gICAgICAgICAgYXJnLFxyXG4gICAgICAgICAgdW53cmFwKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuPGFueT4odW53cmFwUmVzdWx0KVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXHJcbiAgICAgIGFjdGlvbkNyZWF0b3IgYXMgQXN5bmNUaHVua0FjdGlvbkNyZWF0b3I8XHJcbiAgICAgICAgUmV0dXJuZWQsXHJcbiAgICAgICAgVGh1bmtBcmcsXHJcbiAgICAgICAgVGh1bmtBcGlDb25maWdcclxuICAgICAgPixcclxuICAgICAge1xyXG4gICAgICAgIHBlbmRpbmcsXHJcbiAgICAgICAgcmVqZWN0ZWQsXHJcbiAgICAgICAgZnVsZmlsbGVkLFxyXG4gICAgICAgIHR5cGVQcmVmaXgsXHJcbiAgICAgIH1cclxuICAgIClcclxuICB9XHJcbiAgY3JlYXRlQXN5bmNUaHVuay53aXRoVHlwZXMgPSAoKSA9PiBjcmVhdGVBc3luY1RodW5rXHJcblxyXG4gIHJldHVybiBjcmVhdGVBc3luY1RodW5rIGFzIENyZWF0ZUFzeW5jVGh1bms8QXN5bmNUaHVua0NvbmZpZz5cclxufSkoKVxyXG5cclxuaW50ZXJmYWNlIFVud3JhcHBhYmxlQWN0aW9uIHtcclxuICBwYXlsb2FkOiBhbnlcclxuICBtZXRhPzogYW55XHJcbiAgZXJyb3I/OiBhbnlcclxufVxyXG5cclxudHlwZSBVbndyYXBwZWRBY3Rpb25QYXlsb2FkPFQgZXh0ZW5kcyBVbndyYXBwYWJsZUFjdGlvbj4gPSBFeGNsdWRlPFxyXG4gIFQsXHJcbiAgeyBlcnJvcjogYW55IH1cclxuPlsncGF5bG9hZCddXHJcblxyXG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcFJlc3VsdDxSIGV4dGVuZHMgVW53cmFwcGFibGVBY3Rpb24+KFxyXG4gIGFjdGlvbjogUlxyXG4pOiBVbndyYXBwZWRBY3Rpb25QYXlsb2FkPFI+IHtcclxuICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcclxuICAgIHRocm93IGFjdGlvbi5wYXlsb2FkXHJcbiAgfVxyXG4gIGlmIChhY3Rpb24uZXJyb3IpIHtcclxuICAgIHRocm93IGFjdGlvbi5lcnJvclxyXG4gIH1cclxuICByZXR1cm4gYWN0aW9uLnBheWxvYWRcclxufVxyXG5cclxudHlwZSBXaXRoU3RyaWN0TnVsbENoZWNrczxUcnVlLCBGYWxzZT4gPSB1bmRlZmluZWQgZXh0ZW5kcyBib29sZWFuXHJcbiAgPyBGYWxzZVxyXG4gIDogVHJ1ZVxyXG5cclxuZnVuY3Rpb24gaXNUaGVuYWJsZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgUHJvbWlzZUxpa2U8YW55PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIHZhbHVlICE9PSBudWxsICYmXHJcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXHJcbiAgICB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE1pZGRsZXdhcmUsIFN0b3JlRW5oYW5jZXIgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHR5cGUgeyBFbmhhbmNlckFycmF5LCBNaWRkbGV3YXJlQXJyYXkgfSBmcm9tICcuL3V0aWxzJ1xyXG5cclxuLyoqXHJcbiAqIHJldHVybiBUcnVlIGlmIFQgaXMgYGFueWAsIG90aGVyd2lzZSByZXR1cm4gRmFsc2VcclxuICogdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9vbmhvY2hvL3RzZGVmXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSXNBbnk8VCwgVHJ1ZSwgRmFsc2UgPSBuZXZlcj4gPVxyXG4gIC8vIHRlc3QgaWYgd2UgYXJlIGdvaW5nIHRoZSBsZWZ0IEFORCByaWdodCBwYXRoIGluIHRoZSBjb25kaXRpb25cclxuICB0cnVlIHwgZmFsc2UgZXh0ZW5kcyAoVCBleHRlbmRzIG5ldmVyID8gdHJ1ZSA6IGZhbHNlKSA/IFRydWUgOiBGYWxzZVxyXG5cclxuLyoqXHJcbiAqIHJldHVybiBUcnVlIGlmIFQgaXMgYHVua25vd25gLCBvdGhlcndpc2UgcmV0dXJuIEZhbHNlXHJcbiAqIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvb25ob2Noby90c2RlZlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCB0eXBlIElzVW5rbm93bjxULCBUcnVlLCBGYWxzZSA9IG5ldmVyPiA9IHVua25vd24gZXh0ZW5kcyBUXHJcbiAgPyBJc0FueTxULCBGYWxzZSwgVHJ1ZT5cclxuICA6IEZhbHNlXHJcblxyXG5leHBvcnQgdHlwZSBGYWxsYmFja0lmVW5rbm93bjxULCBGYWxsYmFjaz4gPSBJc1Vua25vd248VCwgRmFsbGJhY2ssIFQ+XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBJZk1heWJlVW5kZWZpbmVkPFAsIFRydWUsIEZhbHNlPiA9IFt1bmRlZmluZWRdIGV4dGVuZHMgW1BdXHJcbiAgPyBUcnVlXHJcbiAgOiBGYWxzZVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSWZWb2lkPFAsIFRydWUsIEZhbHNlPiA9IFt2b2lkXSBleHRlbmRzIFtQXSA/IFRydWUgOiBGYWxzZVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSXNFbXB0eU9iajxULCBUcnVlLCBGYWxzZSA9IG5ldmVyPiA9IFQgZXh0ZW5kcyBhbnlcclxuICA/IGtleW9mIFQgZXh0ZW5kcyBuZXZlclxyXG4gICAgPyBJc1Vua25vd248VCwgRmFsc2UsIElmTWF5YmVVbmRlZmluZWQ8VCwgRmFsc2UsIElmVm9pZDxULCBGYWxzZSwgVHJ1ZT4+PlxyXG4gICAgOiBGYWxzZVxyXG4gIDogbmV2ZXJcclxuXHJcbi8qKlxyXG4gKiByZXR1cm5zIFRydWUgaWYgVFMgdmVyc2lvbiBpcyBhYm92ZSAzLjUsIEZhbHNlIGlmIGJlbG93LlxyXG4gKiB1c2VzIGZlYXR1cmUgZGV0ZWN0aW9uIHRvIGRldGVjdCBUUyB2ZXJzaW9uID49IDMuNVxyXG4gKiAqIHZlcnNpb25zIGJlbG93IDMuNSB3aWxsIHJldHVybiBge31gIGZvciB1bnJlc29sdmFibGUgaW50ZXJmZXJlbmNlXHJcbiAqICogdmVyc2lvbnMgYWJvdmUgd2lsbCByZXR1cm4gYHVua25vd25gXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXRMZWFzdFRTMzU8VHJ1ZSwgRmFsc2U+ID0gW1RydWUsIEZhbHNlXVtJc1Vua25vd248XHJcbiAgUmV0dXJuVHlwZTw8VD4oKSA9PiBUPixcclxuICAwLFxyXG4gIDFcclxuPl1cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCB0eXBlIElzVW5rbm93bk9yTm9uSW5mZXJyYWJsZTxULCBUcnVlLCBGYWxzZT4gPSBBdExlYXN0VFMzNTxcclxuICBJc1Vua25vd248VCwgVHJ1ZSwgRmFsc2U+LFxyXG4gIElzRW1wdHlPYmo8VCwgVHJ1ZSwgSXNVbmtub3duPFQsIFRydWUsIEZhbHNlPj5cclxuPlxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgYSBVbmlvbiB0eXBlIGAoQXxCKWAgdG8gYW4gaW50ZXJzZWN0aW9uIHR5cGUgYChBJkIpYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVW5pb25Ub0ludGVyc2VjdGlvbjxVPiA9IChcclxuICBVIGV4dGVuZHMgYW55ID8gKGs6IFUpID0+IHZvaWQgOiBuZXZlclxyXG4pIGV4dGVuZHMgKGs6IGluZmVyIEkpID0+IHZvaWRcclxuICA/IElcclxuICA6IG5ldmVyXHJcblxyXG4vLyBBcHBlYXJzIHRvIGhhdmUgYSBjb252ZW5pZW50IHNpZGUgZWZmZWN0IG9mIGlnbm9yaW5nIGBuZXZlcmAgZXZlbiBpZiB0aGF0J3Mgbm90IHdoYXQgeW91IHNwZWNpZmllZFxyXG5leHBvcnQgdHlwZSBFeGNsdWRlRnJvbVR1cGxlPFQsIEUsIEFjYyBleHRlbmRzIHVua25vd25bXSA9IFtdPiA9IFQgZXh0ZW5kcyBbXHJcbiAgaW5mZXIgSGVhZCxcclxuICAuLi5pbmZlciBUYWlsXHJcbl1cclxuICA/IEV4Y2x1ZGVGcm9tVHVwbGU8VGFpbCwgRSwgWy4uLkFjYywgLi4uKFtIZWFkXSBleHRlbmRzIFtFXSA/IFtdIDogW0hlYWRdKV0+XHJcbiAgOiBBY2NcclxuXHJcbnR5cGUgRXh0cmFjdERpc3BhdGNoRnJvbU1pZGRsZXdhcmVUdXBsZTxcclxuICBNaWRkbGV3YXJlVHVwbGUgZXh0ZW5kcyBhbnlbXSxcclxuICBBY2MgZXh0ZW5kcyB7fVxyXG4+ID0gTWlkZGxld2FyZVR1cGxlIGV4dGVuZHMgW2luZmVyIEhlYWQsIC4uLmluZmVyIFRhaWxdXHJcbiAgPyBFeHRyYWN0RGlzcGF0Y2hGcm9tTWlkZGxld2FyZVR1cGxlPFxyXG4gICAgICBUYWlsLFxyXG4gICAgICBBY2MgJiAoSGVhZCBleHRlbmRzIE1pZGRsZXdhcmU8aW5mZXIgRD4gPyBJc0FueTxELCB7fSwgRD4gOiB7fSlcclxuICAgID5cclxuICA6IEFjY1xyXG5cclxuZXhwb3J0IHR5cGUgRXh0cmFjdERpc3BhdGNoRXh0ZW5zaW9uczxNPiA9IE0gZXh0ZW5kcyBNaWRkbGV3YXJlQXJyYXk8XHJcbiAgaW5mZXIgTWlkZGxld2FyZVR1cGxlXHJcbj5cclxuICA/IEV4dHJhY3REaXNwYXRjaEZyb21NaWRkbGV3YXJlVHVwbGU8TWlkZGxld2FyZVR1cGxlLCB7fT5cclxuICA6IE0gZXh0ZW5kcyBSZWFkb25seUFycmF5PE1pZGRsZXdhcmU+XHJcbiAgPyBFeHRyYWN0RGlzcGF0Y2hGcm9tTWlkZGxld2FyZVR1cGxlPFsuLi5NXSwge30+XHJcbiAgOiBuZXZlclxyXG5cclxudHlwZSBFeHRyYWN0U3RvcmVFeHRlbnNpb25zRnJvbUVuaGFuY2VyVHVwbGU8XHJcbiAgRW5oYW5jZXJUdXBsZSBleHRlbmRzIGFueVtdLFxyXG4gIEFjYyBleHRlbmRzIHt9XHJcbj4gPSBFbmhhbmNlclR1cGxlIGV4dGVuZHMgW2luZmVyIEhlYWQsIC4uLmluZmVyIFRhaWxdXHJcbiAgPyBFeHRyYWN0U3RvcmVFeHRlbnNpb25zRnJvbUVuaGFuY2VyVHVwbGU8XHJcbiAgICAgIFRhaWwsXHJcbiAgICAgIEFjYyAmIChIZWFkIGV4dGVuZHMgU3RvcmVFbmhhbmNlcjxpbmZlciBFeHQ+ID8gSXNBbnk8RXh0LCB7fSwgRXh0PiA6IHt9KVxyXG4gICAgPlxyXG4gIDogQWNjXHJcblxyXG5leHBvcnQgdHlwZSBFeHRyYWN0U3RvcmVFeHRlbnNpb25zPEU+ID0gRSBleHRlbmRzIEVuaGFuY2VyQXJyYXk8XHJcbiAgaW5mZXIgRW5oYW5jZXJUdXBsZVxyXG4+XHJcbiAgPyBFeHRyYWN0U3RvcmVFeHRlbnNpb25zRnJvbUVuaGFuY2VyVHVwbGU8RW5oYW5jZXJUdXBsZSwge30+XHJcbiAgOiBFIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxTdG9yZUVuaGFuY2VyPlxyXG4gID8gVW5pb25Ub0ludGVyc2VjdGlvbjxcclxuICAgICAgRVtudW1iZXJdIGV4dGVuZHMgU3RvcmVFbmhhbmNlcjxpbmZlciBFeHQ+XHJcbiAgICAgICAgPyBFeHQgZXh0ZW5kcyB7fVxyXG4gICAgICAgICAgPyBJc0FueTxFeHQsIHt9LCBFeHQ+XHJcbiAgICAgICAgICA6IHt9XHJcbiAgICAgICAgOiB7fVxyXG4gICAgPlxyXG4gIDogbmV2ZXJcclxuXHJcbnR5cGUgRXh0cmFjdFN0YXRlRXh0ZW5zaW9uc0Zyb21FbmhhbmNlclR1cGxlPFxyXG4gIEVuaGFuY2VyVHVwbGUgZXh0ZW5kcyBhbnlbXSxcclxuICBBY2MgZXh0ZW5kcyB7fVxyXG4+ID0gRW5oYW5jZXJUdXBsZSBleHRlbmRzIFtpbmZlciBIZWFkLCAuLi5pbmZlciBUYWlsXVxyXG4gID8gRXh0cmFjdFN0YXRlRXh0ZW5zaW9uc0Zyb21FbmhhbmNlclR1cGxlPFxyXG4gICAgICBUYWlsLFxyXG4gICAgICBBY2MgJlxyXG4gICAgICAgIChIZWFkIGV4dGVuZHMgU3RvcmVFbmhhbmNlcjxhbnksIGluZmVyIFN0YXRlRXh0PlxyXG4gICAgICAgICAgPyBJc0FueTxTdGF0ZUV4dCwge30sIFN0YXRlRXh0PlxyXG4gICAgICAgICAgOiB7fSlcclxuICAgID5cclxuICA6IEFjY1xyXG5cclxuZXhwb3J0IHR5cGUgRXh0cmFjdFN0YXRlRXh0ZW5zaW9uczxFPiA9IEUgZXh0ZW5kcyBFbmhhbmNlckFycmF5PFxyXG4gIGluZmVyIEVuaGFuY2VyVHVwbGVcclxuPlxyXG4gID8gRXh0cmFjdFN0YXRlRXh0ZW5zaW9uc0Zyb21FbmhhbmNlclR1cGxlPEVuaGFuY2VyVHVwbGUsIHt9PlxyXG4gIDogRSBleHRlbmRzIFJlYWRvbmx5QXJyYXk8U3RvcmVFbmhhbmNlcj5cclxuICA/IFVuaW9uVG9JbnRlcnNlY3Rpb248XHJcbiAgICAgIEVbbnVtYmVyXSBleHRlbmRzIFN0b3JlRW5oYW5jZXI8YW55LCBpbmZlciBTdGF0ZUV4dD5cclxuICAgICAgICA/IFN0YXRlRXh0IGV4dGVuZHMge31cclxuICAgICAgICAgID8gSXNBbnk8U3RhdGVFeHQsIHt9LCBTdGF0ZUV4dD5cclxuICAgICAgICAgIDoge31cclxuICAgICAgICA6IHt9XHJcbiAgICA+XHJcbiAgOiBuZXZlclxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciB0eXBlLiBQYXNzZXMgVCBvdXQgYWdhaW4sIGJ1dCBib3hlcyBpdCBpbiBhIHdheSB0aGF0IGl0IGNhbm5vdFxyXG4gKiBcIndpZGVuXCIgdGhlIHR5cGUgYnkgYWNjaWRlbnQgaWYgaXQgaXMgYSBnZW5lcmljIHRoYXQgc2hvdWxkIGJlIGluZmVycmVkXHJcbiAqIGZyb20gZWxzZXdoZXJlLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCB0eXBlIE5vSW5mZXI8VD4gPSBbVF1bVCBleHRlbmRzIGFueSA/IDAgOiBuZXZlcl1cclxuXHJcbmV4cG9ydCB0eXBlIE9taXQ8VCwgSyBleHRlbmRzIGtleW9mIGFueT4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVHdWFyZDxUPiB7XHJcbiAgKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBUXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGFzTWF0Y2hGdW5jdGlvbjxUPiB7XHJcbiAgbWF0Y2g6IFR5cGVHdWFyZDxUPlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaGFzTWF0Y2hGdW5jdGlvbiA9IDxUPihcclxuICB2OiBNYXRjaGVyPFQ+XHJcbik6IHYgaXMgSGFzTWF0Y2hGdW5jdGlvbjxUPiA9PiB7XHJcbiAgcmV0dXJuIHYgJiYgdHlwZW9mICh2IGFzIEhhc01hdGNoRnVuY3Rpb248VD4pLm1hdGNoID09PSAnZnVuY3Rpb24nXHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCB0eXBlIE1hdGNoZXI8VD4gPSBIYXNNYXRjaEZ1bmN0aW9uPFQ+IHwgVHlwZUd1YXJkPFQ+XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25Gcm9tTWF0Y2hlcjxNIGV4dGVuZHMgTWF0Y2hlcjxhbnk+PiA9IE0gZXh0ZW5kcyBNYXRjaGVyPFxyXG4gIGluZmVyIFRcclxuPlxyXG4gID8gVFxyXG4gIDogbmV2ZXJcclxuXHJcbmV4cG9ydCB0eXBlIElkPFQ+ID0geyBbSyBpbiBrZXlvZiBUXTogVFtLXSB9ICYge31cclxuIiwiaW1wb3J0IHR5cGUge1xyXG4gIEFjdGlvbkZyb21NYXRjaGVyLFxyXG4gIE1hdGNoZXIsXHJcbiAgVW5pb25Ub0ludGVyc2VjdGlvbixcclxufSBmcm9tICcuL3RzSGVscGVycydcclxuaW1wb3J0IHsgaGFzTWF0Y2hGdW5jdGlvbiB9IGZyb20gJy4vdHNIZWxwZXJzJ1xyXG5pbXBvcnQgdHlwZSB7XHJcbiAgQXN5bmNUaHVuayxcclxuICBBc3luY1RodW5rRnVsZmlsbGVkQWN0aW9uQ3JlYXRvcixcclxuICBBc3luY1RodW5rUGVuZGluZ0FjdGlvbkNyZWF0b3IsXHJcbiAgQXN5bmNUaHVua1JlamVjdGVkQWN0aW9uQ3JlYXRvcixcclxufSBmcm9tICcuL2NyZWF0ZUFzeW5jVGh1bmsnXHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25NYXRjaGluZ0FueU9mPE1hdGNoZXJzIGV4dGVuZHMgWy4uLk1hdGNoZXI8YW55PltdXT4gPVxyXG4gIEFjdGlvbkZyb21NYXRjaGVyPE1hdGNoZXJzW251bWJlcl0+XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBBY3Rpb25NYXRjaGluZ0FsbE9mPE1hdGNoZXJzIGV4dGVuZHMgWy4uLk1hdGNoZXI8YW55PltdXT4gPVxyXG4gIFVuaW9uVG9JbnRlcnNlY3Rpb248QWN0aW9uTWF0Y2hpbmdBbnlPZjxNYXRjaGVycz4+XHJcblxyXG5jb25zdCBtYXRjaGVzID0gKG1hdGNoZXI6IE1hdGNoZXI8YW55PiwgYWN0aW9uOiBhbnkpID0+IHtcclxuICBpZiAoaGFzTWF0Y2hGdW5jdGlvbihtYXRjaGVyKSkge1xyXG4gICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiBtYXRjaGVzIGFueSBvbmUgb2YgdGhlIHN1cHBsaWVkIHR5cGUgZ3VhcmRzIG9yIGFjdGlvblxyXG4gKiBjcmVhdG9ycy5cclxuICpcclxuICogQHBhcmFtIG1hdGNoZXJzIFRoZSB0eXBlIGd1YXJkcyBvciBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQW55T2Y8TWF0Y2hlcnMgZXh0ZW5kcyBbLi4uTWF0Y2hlcjxhbnk+W11dPihcclxuICAuLi5tYXRjaGVyczogTWF0Y2hlcnNcclxuKSB7XHJcbiAgcmV0dXJuIChhY3Rpb246IGFueSk6IGFjdGlvbiBpcyBBY3Rpb25NYXRjaGluZ0FueU9mPE1hdGNoZXJzPiA9PiB7XHJcbiAgICByZXR1cm4gbWF0Y2hlcnMuc29tZSgobWF0Y2hlcikgPT4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2hlY2tcclxuICogd2hldGhlciBhbiBhY3Rpb24gbWF0Y2hlcyBhbGwgb2YgdGhlIHN1cHBsaWVkIHR5cGUgZ3VhcmRzIG9yIGFjdGlvblxyXG4gKiBjcmVhdG9ycy5cclxuICpcclxuICogQHBhcmFtIG1hdGNoZXJzIFRoZSB0eXBlIGd1YXJkcyBvciBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWxsT2Y8TWF0Y2hlcnMgZXh0ZW5kcyBbLi4uTWF0Y2hlcjxhbnk+W11dPihcclxuICAuLi5tYXRjaGVyczogTWF0Y2hlcnNcclxuKSB7XHJcbiAgcmV0dXJuIChhY3Rpb246IGFueSk6IGFjdGlvbiBpcyBBY3Rpb25NYXRjaGluZ0FsbE9mPE1hdGNoZXJzPiA9PiB7XHJcbiAgICByZXR1cm4gbWF0Y2hlcnMuZXZlcnkoKG1hdGNoZXIpID0+IG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKSlcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gYWN0aW9uIEEgcmVkdXggYWN0aW9uXHJcbiAqIEBwYXJhbSB2YWxpZFN0YXR1cyBBbiBhcnJheSBvZiB2YWxpZCBtZXRhLnJlcXVlc3RTdGF0dXMgdmFsdWVzXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKFxyXG4gIGFjdGlvbjogYW55LFxyXG4gIHZhbGlkU3RhdHVzOiByZWFkb25seSBzdHJpbmdbXVxyXG4pIHtcclxuICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpIHJldHVybiBmYWxzZVxyXG5cclxuICBjb25zdCBoYXNWYWxpZFJlcXVlc3RJZCA9IHR5cGVvZiBhY3Rpb24ubWV0YS5yZXF1ZXN0SWQgPT09ICdzdHJpbmcnXHJcbiAgY29uc3QgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzID1cclxuICAgIHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMVxyXG5cclxuICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGE6IFthbnldIHwgQW55QXN5bmNUaHVua1tdKTogYSBpcyBBbnlBc3luY1RodW5rW10ge1xyXG4gIHJldHVybiAoXHJcbiAgICB0eXBlb2YgYVswXSA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgJ3BlbmRpbmcnIGluIGFbMF0gJiZcclxuICAgICdmdWxmaWxsZWQnIGluIGFbMF0gJiZcclxuICAgICdyZWplY3RlZCcgaW4gYVswXVxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVW5rbm93bkFzeW5jVGh1bmtQZW5kaW5nQWN0aW9uID0gUmV0dXJuVHlwZTxcclxuICBBc3luY1RodW5rUGVuZGluZ0FjdGlvbkNyZWF0b3I8dW5rbm93bj5cclxuPlxyXG5cclxuZXhwb3J0IHR5cGUgUGVuZGluZ0FjdGlvbkZyb21Bc3luY1RodW5rPFQgZXh0ZW5kcyBBbnlBc3luY1RodW5rPiA9XHJcbiAgQWN0aW9uRnJvbU1hdGNoZXI8VFsncGVuZGluZyddPlxyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2hlY2tcclxuICogd2hldGhlciBhbiBhY3Rpb24gd2FzIGNyZWF0ZWQgYnkgYW4gYXN5bmMgdGh1bmsgYWN0aW9uIGNyZWF0b3IsIGFuZCB0aGF0XHJcbiAqIHRoZSBhY3Rpb24gaXMgcGVuZGluZy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGVuZGluZygpOiAoXHJcbiAgYWN0aW9uOiBhbnlcclxuKSA9PiBhY3Rpb24gaXMgVW5rbm93bkFzeW5jVGh1bmtQZW5kaW5nQWN0aW9uXHJcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIGJlbG9uZ3MgdG8gb25lIG9mIHRoZSBwcm92aWRlZCBhc3luYyB0aHVuayBhY3Rpb24gY3JlYXRvcnMsXHJcbiAqIGFuZCB0aGF0IHRoZSBhY3Rpb24gaXMgcGVuZGluZy5cclxuICpcclxuICogQHBhcmFtIGFzeW5jVGh1bmtzIChvcHRpb25hbCkgVGhlIGFzeW5jIHRodW5rIGFjdGlvbiBjcmVhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNQZW5kaW5nPFxyXG4gIEFzeW5jVGh1bmtzIGV4dGVuZHMgW0FueUFzeW5jVGh1bmssIC4uLkFueUFzeW5jVGh1bmtbXV1cclxuPihcclxuICAuLi5hc3luY1RodW5rczogQXN5bmNUaHVua3NcclxuKTogKGFjdGlvbjogYW55KSA9PiBhY3Rpb24gaXMgUGVuZGluZ0FjdGlvbkZyb21Bc3luY1RodW5rPEFzeW5jVGh1bmtzW251bWJlcl0+XHJcbi8qKlxyXG4gKiBUZXN0cyBpZiBgYWN0aW9uYCBpcyBhIHBlbmRpbmcgdGh1bmsgYWN0aW9uXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BlbmRpbmcoYWN0aW9uOiBhbnkpOiBhY3Rpb24gaXMgVW5rbm93bkFzeW5jVGh1bmtQZW5kaW5nQWN0aW9uXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BlbmRpbmc8XHJcbiAgQXN5bmNUaHVua3MgZXh0ZW5kcyBbQW55QXN5bmNUaHVuaywgLi4uQW55QXN5bmNUaHVua1tdXVxyXG4+KC4uLmFzeW5jVGh1bmtzOiBBc3luY1RodW5rcyB8IFthbnldKSB7XHJcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIChhY3Rpb246IGFueSkgPT4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ3BlbmRpbmcnXSlcclxuICB9XHJcblxyXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgYWN0aW9uOiBhbnlcclxuICApOiBhY3Rpb24gaXMgUGVuZGluZ0FjdGlvbkZyb21Bc3luY1RodW5rPEFzeW5jVGh1bmtzW251bWJlcl0+ID0+IHtcclxuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xyXG4gICAgY29uc3QgbWF0Y2hlcnM6IFtNYXRjaGVyPGFueT4sIC4uLk1hdGNoZXI8YW55PltdXSA9IGFzeW5jVGh1bmtzLm1hcChcclxuICAgICAgKGFzeW5jVGh1bmspID0+IGFzeW5jVGh1bmsucGVuZGluZ1xyXG4gICAgKSBhcyBhbnlcclxuXHJcbiAgICBjb25zdCBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mKC4uLm1hdGNoZXJzKVxyXG5cclxuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVW5rbm93bkFzeW5jVGh1bmtSZWplY3RlZEFjdGlvbiA9IFJldHVyblR5cGU8XHJcbiAgQXN5bmNUaHVua1JlamVjdGVkQWN0aW9uQ3JlYXRvcjx1bmtub3duLCB1bmtub3duPlxyXG4+XHJcblxyXG5leHBvcnQgdHlwZSBSZWplY3RlZEFjdGlvbkZyb21Bc3luY1RodW5rPFQgZXh0ZW5kcyBBbnlBc3luY1RodW5rPiA9XHJcbiAgQWN0aW9uRnJvbU1hdGNoZXI8VFsncmVqZWN0ZWQnXT5cclxuXHJcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIHdhcyBjcmVhdGVkIGJ5IGFuIGFzeW5jIHRodW5rIGFjdGlvbiBjcmVhdG9yLCBhbmQgdGhhdFxyXG4gKiB0aGUgYWN0aW9uIGlzIHJlamVjdGVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNSZWplY3RlZCgpOiAoXHJcbiAgYWN0aW9uOiBhbnlcclxuKSA9PiBhY3Rpb24gaXMgVW5rbm93bkFzeW5jVGh1bmtSZWplY3RlZEFjdGlvblxyXG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiBiZWxvbmdzIHRvIG9uZSBvZiB0aGUgcHJvdmlkZWQgYXN5bmMgdGh1bmsgYWN0aW9uIGNyZWF0b3JzLFxyXG4gKiBhbmQgdGhhdCB0aGUgYWN0aW9uIGlzIHJlamVjdGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXN5bmNUaHVua3MgKG9wdGlvbmFsKSBUaGUgYXN5bmMgdGh1bmsgYWN0aW9uIGNyZWF0b3JzIHRvIG1hdGNoIGFnYWluc3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1JlamVjdGVkPFxyXG4gIEFzeW5jVGh1bmtzIGV4dGVuZHMgW0FueUFzeW5jVGh1bmssIC4uLkFueUFzeW5jVGh1bmtbXV1cclxuPihcclxuICAuLi5hc3luY1RodW5rczogQXN5bmNUaHVua3NcclxuKTogKGFjdGlvbjogYW55KSA9PiBhY3Rpb24gaXMgUmVqZWN0ZWRBY3Rpb25Gcm9tQXN5bmNUaHVuazxBc3luY1RodW5rc1tudW1iZXJdPlxyXG4vKipcclxuICogVGVzdHMgaWYgYGFjdGlvbmAgaXMgYSByZWplY3RlZCB0aHVuayBhY3Rpb25cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVqZWN0ZWQoXHJcbiAgYWN0aW9uOiBhbnlcclxuKTogYWN0aW9uIGlzIFVua25vd25Bc3luY1RodW5rUmVqZWN0ZWRBY3Rpb25cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVqZWN0ZWQ8XHJcbiAgQXN5bmNUaHVua3MgZXh0ZW5kcyBbQW55QXN5bmNUaHVuaywgLi4uQW55QXN5bmNUaHVua1tdXVxyXG4+KC4uLmFzeW5jVGh1bmtzOiBBc3luY1RodW5rcyB8IFthbnldKSB7XHJcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIChhY3Rpb246IGFueSkgPT4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbJ3JlamVjdGVkJ10pXHJcbiAgfVxyXG5cclxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgcmV0dXJuIGlzUmVqZWN0ZWQoKShhc3luY1RodW5rc1swXSlcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICBhY3Rpb246IGFueVxyXG4gICk6IGFjdGlvbiBpcyBSZWplY3RlZEFjdGlvbkZyb21Bc3luY1RodW5rPEFzeW5jVGh1bmtzW251bWJlcl0+ID0+IHtcclxuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xyXG4gICAgY29uc3QgbWF0Y2hlcnM6IFtNYXRjaGVyPGFueT4sIC4uLk1hdGNoZXI8YW55PltdXSA9IGFzeW5jVGh1bmtzLm1hcChcclxuICAgICAgKGFzeW5jVGh1bmspID0+IGFzeW5jVGh1bmsucmVqZWN0ZWRcclxuICAgICkgYXMgYW55XHJcblxyXG4gICAgY29uc3QgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZiguLi5tYXRjaGVycylcclxuXHJcbiAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbilcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFVua25vd25Bc3luY1RodW5rUmVqZWN0ZWRXaXRoVmFsdWVBY3Rpb24gPSBSZXR1cm5UeXBlPFxyXG4gIEFzeW5jVGh1bmtSZWplY3RlZEFjdGlvbkNyZWF0b3I8dW5rbm93biwgdW5rbm93bj5cclxuPlxyXG5cclxuZXhwb3J0IHR5cGUgUmVqZWN0ZWRXaXRoVmFsdWVBY3Rpb25Gcm9tQXN5bmNUaHVuazxUIGV4dGVuZHMgQW55QXN5bmNUaHVuaz4gPVxyXG4gIEFjdGlvbkZyb21NYXRjaGVyPFRbJ3JlamVjdGVkJ10+ICZcclxuICAgIChUIGV4dGVuZHMgQXN5bmNUaHVuazxhbnksIGFueSwgeyByZWplY3RWYWx1ZTogaW5mZXIgUmVqZWN0ZWRWYWx1ZSB9PlxyXG4gICAgICA/IHsgcGF5bG9hZDogUmVqZWN0ZWRWYWx1ZSB9XHJcbiAgICAgIDogdW5rbm93bilcclxuXHJcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIHdhcyBjcmVhdGVkIGJ5IGFuIGFzeW5jIHRodW5rIGFjdGlvbiBjcmVhdG9yLCBhbmQgdGhhdFxyXG4gKiB0aGUgYWN0aW9uIGlzIHJlamVjdGVkIHdpdGggdmFsdWUuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1JlamVjdGVkV2l0aFZhbHVlKCk6IChcclxuICBhY3Rpb246IGFueVxyXG4pID0+IGFjdGlvbiBpcyBVbmtub3duQXN5bmNUaHVua1JlamVjdGVkQWN0aW9uXHJcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIGJlbG9uZ3MgdG8gb25lIG9mIHRoZSBwcm92aWRlZCBhc3luYyB0aHVuayBhY3Rpb24gY3JlYXRvcnMsXHJcbiAqIGFuZCB0aGF0IHRoZSBhY3Rpb24gaXMgcmVqZWN0ZWQgd2l0aCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGFzeW5jVGh1bmtzIChvcHRpb25hbCkgVGhlIGFzeW5jIHRodW5rIGFjdGlvbiBjcmVhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZTxcclxuICBBc3luY1RodW5rcyBleHRlbmRzIFtBbnlBc3luY1RodW5rLCAuLi5BbnlBc3luY1RodW5rW11dXHJcbj4oXHJcbiAgLi4uYXN5bmNUaHVua3M6IEFzeW5jVGh1bmtzXHJcbik6IChcclxuICBhY3Rpb246IGFueVxyXG4pID0+IGFjdGlvbiBpcyBSZWplY3RlZFdpdGhWYWx1ZUFjdGlvbkZyb21Bc3luY1RodW5rPEFzeW5jVGh1bmtzW251bWJlcl0+XHJcbi8qKlxyXG4gKiBUZXN0cyBpZiBgYWN0aW9uYCBpcyBhIHJlamVjdGVkIHRodW5rIGFjdGlvbiB3aXRoIHZhbHVlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1JlamVjdGVkV2l0aFZhbHVlKFxyXG4gIGFjdGlvbjogYW55XHJcbik6IGFjdGlvbiBpcyBVbmtub3duQXN5bmNUaHVua1JlamVjdGVkQWN0aW9uXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1JlamVjdGVkV2l0aFZhbHVlPFxyXG4gIEFzeW5jVGh1bmtzIGV4dGVuZHMgW0FueUFzeW5jVGh1bmssIC4uLkFueUFzeW5jVGh1bmtbXV1cclxuPiguLi5hc3luY1RodW5rczogQXN5bmNUaHVua3MgfCBbYW55XSkge1xyXG4gIGNvbnN0IGhhc0ZsYWcgPSAoYWN0aW9uOiBhbnkpOiBhY3Rpb24gaXMgYW55ID0+IHtcclxuICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWVcclxuICB9XHJcblxyXG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiAoYWN0aW9uOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkKC4uLmFzeW5jVGh1bmtzKSwgaGFzRmxhZylcclxuXHJcbiAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgIHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlKCkoYXN5bmNUaHVua3NbMF0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgYWN0aW9uOiBhbnlcclxuICApOiBhY3Rpb24gaXMgUmVqZWN0ZWRBY3Rpb25Gcm9tQXN5bmNUaHVuazxBc3luY1RodW5rc1tudW1iZXJdPiA9PiB7XHJcbiAgICBjb25zdCBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQoLi4uYXN5bmNUaHVua3MpLCBoYXNGbGFnKVxyXG5cclxuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVW5rbm93bkFzeW5jVGh1bmtGdWxmaWxsZWRBY3Rpb24gPSBSZXR1cm5UeXBlPFxyXG4gIEFzeW5jVGh1bmtGdWxmaWxsZWRBY3Rpb25DcmVhdG9yPHVua25vd24sIHVua25vd24+XHJcbj5cclxuXHJcbmV4cG9ydCB0eXBlIEZ1bGZpbGxlZEFjdGlvbkZyb21Bc3luY1RodW5rPFQgZXh0ZW5kcyBBbnlBc3luY1RodW5rPiA9XHJcbiAgQWN0aW9uRnJvbU1hdGNoZXI8VFsnZnVsZmlsbGVkJ10+XHJcblxyXG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiB3YXMgY3JlYXRlZCBieSBhbiBhc3luYyB0aHVuayBhY3Rpb24gY3JlYXRvciwgYW5kIHRoYXRcclxuICogdGhlIGFjdGlvbiBpcyBmdWxmaWxsZWQuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bGZpbGxlZCgpOiAoXHJcbiAgYWN0aW9uOiBhbnlcclxuKSA9PiBhY3Rpb24gaXMgVW5rbm93bkFzeW5jVGh1bmtGdWxmaWxsZWRBY3Rpb25cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2hlY2tcclxuICogd2hldGhlciBhbiBhY3Rpb24gYmVsb25ncyB0byBvbmUgb2YgdGhlIHByb3ZpZGVkIGFzeW5jIHRodW5rIGFjdGlvbiBjcmVhdG9ycyxcclxuICogYW5kIHRoYXQgdGhlIGFjdGlvbiBpcyBmdWxmaWxsZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhc3luY1RodW5rcyAob3B0aW9uYWwpIFRoZSBhc3luYyB0aHVuayBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVsZmlsbGVkPFxyXG4gIEFzeW5jVGh1bmtzIGV4dGVuZHMgW0FueUFzeW5jVGh1bmssIC4uLkFueUFzeW5jVGh1bmtbXV1cclxuPihcclxuICAuLi5hc3luY1RodW5rczogQXN5bmNUaHVua3NcclxuKTogKGFjdGlvbjogYW55KSA9PiBhY3Rpb24gaXMgRnVsZmlsbGVkQWN0aW9uRnJvbUFzeW5jVGh1bms8QXN5bmNUaHVua3NbbnVtYmVyXT5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIGBhY3Rpb25gIGlzIGEgZnVsZmlsbGVkIHRodW5rIGFjdGlvblxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNGdWxmaWxsZWQoXHJcbiAgYWN0aW9uOiBhbnlcclxuKTogYWN0aW9uIGlzIFVua25vd25Bc3luY1RodW5rRnVsZmlsbGVkQWN0aW9uXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bGZpbGxlZDxcclxuICBBc3luY1RodW5rcyBleHRlbmRzIFtBbnlBc3luY1RodW5rLCAuLi5BbnlBc3luY1RodW5rW11dXHJcbj4oLi4uYXN5bmNUaHVua3M6IEFzeW5jVGh1bmtzIHwgW2FueV0pIHtcclxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gKGFjdGlvbjogYW55KSA9PiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsnZnVsZmlsbGVkJ10pXHJcbiAgfVxyXG5cclxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgcmV0dXJuIGlzRnVsZmlsbGVkKCkoYXN5bmNUaHVua3NbMF0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgYWN0aW9uOiBhbnlcclxuICApOiBhY3Rpb24gaXMgRnVsZmlsbGVkQWN0aW9uRnJvbUFzeW5jVGh1bms8QXN5bmNUaHVua3NbbnVtYmVyXT4gPT4ge1xyXG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXHJcbiAgICBjb25zdCBtYXRjaGVyczogW01hdGNoZXI8YW55PiwgLi4uTWF0Y2hlcjxhbnk+W11dID0gYXN5bmNUaHVua3MubWFwKFxyXG4gICAgICAoYXN5bmNUaHVuaykgPT4gYXN5bmNUaHVuay5mdWxmaWxsZWRcclxuICAgICkgYXMgYW55XHJcblxyXG4gICAgY29uc3QgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZiguLi5tYXRjaGVycylcclxuXHJcbiAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbilcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFVua25vd25Bc3luY1RodW5rQWN0aW9uID1cclxuICB8IFVua25vd25Bc3luY1RodW5rUGVuZGluZ0FjdGlvblxyXG4gIHwgVW5rbm93bkFzeW5jVGh1bmtSZWplY3RlZEFjdGlvblxyXG4gIHwgVW5rbm93bkFzeW5jVGh1bmtGdWxmaWxsZWRBY3Rpb25cclxuXHJcbmV4cG9ydCB0eXBlIEFueUFzeW5jVGh1bmsgPSB7XHJcbiAgcGVuZGluZzogeyBtYXRjaDogKGFjdGlvbjogYW55KSA9PiBhY3Rpb24gaXMgYW55IH1cclxuICBmdWxmaWxsZWQ6IHsgbWF0Y2g6IChhY3Rpb246IGFueSkgPT4gYWN0aW9uIGlzIGFueSB9XHJcbiAgcmVqZWN0ZWQ6IHsgbWF0Y2g6IChhY3Rpb246IGFueSkgPT4gYWN0aW9uIGlzIGFueSB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFjdGlvbnNGcm9tQXN5bmNUaHVuazxUIGV4dGVuZHMgQW55QXN5bmNUaHVuaz4gPVxyXG4gIHwgQWN0aW9uRnJvbU1hdGNoZXI8VFsncGVuZGluZyddPlxyXG4gIHwgQWN0aW9uRnJvbU1hdGNoZXI8VFsnZnVsZmlsbGVkJ10+XHJcbiAgfCBBY3Rpb25Gcm9tTWF0Y2hlcjxUWydyZWplY3RlZCddPlxyXG5cclxuLyoqXHJcbiAqIEEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2hlY2tcclxuICogd2hldGhlciBhbiBhY3Rpb24gd2FzIGNyZWF0ZWQgYnkgYW4gYXN5bmMgdGh1bmsgYWN0aW9uIGNyZWF0b3IuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jVGh1bmtBY3Rpb24oKTogKFxyXG4gIGFjdGlvbjogYW55XHJcbikgPT4gYWN0aW9uIGlzIFVua25vd25Bc3luY1RodW5rQWN0aW9uXHJcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIGJlbG9uZ3MgdG8gb25lIG9mIHRoZSBwcm92aWRlZCBhc3luYyB0aHVuayBhY3Rpb24gY3JlYXRvcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhc3luY1RodW5rcyAob3B0aW9uYWwpIFRoZSBhc3luYyB0aHVuayBhY3Rpb24gY3JlYXRvcnMgdG8gbWF0Y2ggYWdhaW5zdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbjxcclxuICBBc3luY1RodW5rcyBleHRlbmRzIFtBbnlBc3luY1RodW5rLCAuLi5BbnlBc3luY1RodW5rW11dXHJcbj4oXHJcbiAgLi4uYXN5bmNUaHVua3M6IEFzeW5jVGh1bmtzXHJcbik6IChhY3Rpb246IGFueSkgPT4gYWN0aW9uIGlzIEFjdGlvbnNGcm9tQXN5bmNUaHVuazxBc3luY1RodW5rc1tudW1iZXJdPlxyXG4vKipcclxuICogVGVzdHMgaWYgYGFjdGlvbmAgaXMgYSB0aHVuayBhY3Rpb25cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbihcclxuICBhY3Rpb246IGFueVxyXG4pOiBhY3Rpb24gaXMgVW5rbm93bkFzeW5jVGh1bmtBY3Rpb25cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbjxcclxuICBBc3luY1RodW5rcyBleHRlbmRzIFtBbnlBc3luY1RodW5rLCAuLi5BbnlBc3luY1RodW5rW11dXHJcbj4oLi4uYXN5bmNUaHVua3M6IEFzeW5jVGh1bmtzIHwgW2FueV0pIHtcclxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gKGFjdGlvbjogYW55KSA9PlxyXG4gICAgICBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncGVuZGluZycsICdmdWxmaWxsZWQnLCAncmVqZWN0ZWQnXSlcclxuICB9XHJcblxyXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgYWN0aW9uOiBhbnlcclxuICApOiBhY3Rpb24gaXMgQWN0aW9uc0Zyb21Bc3luY1RodW5rPEFzeW5jVGh1bmtzW251bWJlcl0+ID0+IHtcclxuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xyXG4gICAgY29uc3QgbWF0Y2hlcnM6IFtNYXRjaGVyPGFueT4sIC4uLk1hdGNoZXI8YW55PltdXSA9IFtdIGFzIGFueVxyXG5cclxuICAgIGZvciAoY29uc3QgYXN5bmNUaHVuayBvZiBhc3luY1RodW5rcykge1xyXG4gICAgICBtYXRjaGVycy5wdXNoKFxyXG4gICAgICAgIGFzeW5jVGh1bmsucGVuZGluZyxcclxuICAgICAgICBhc3luY1RodW5rLnJlamVjdGVkLFxyXG4gICAgICAgIGFzeW5jVGh1bmsuZnVsZmlsbGVkXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mKC4uLm1hdGNoZXJzKVxyXG5cclxuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IEFib3J0U2lnbmFsV2l0aFJlYXNvbiB9IGZyb20gJy4vdHlwZXMnXHJcblxyXG5leHBvcnQgY29uc3QgYXNzZXJ0RnVuY3Rpb246IChcclxuICBmdW5jOiB1bmtub3duLFxyXG4gIGV4cGVjdGVkOiBzdHJpbmdcclxuKSA9PiBhc3NlcnRzIGZ1bmMgaXMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93biA9IChcclxuICBmdW5jOiB1bmtub3duLFxyXG4gIGV4cGVjdGVkOiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2V4cGVjdGVkfSBpcyBub3QgYSBmdW5jdGlvbmApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHt9XHJcblxyXG5leHBvcnQgY29uc3QgY2F0Y2hSZWplY3Rpb24gPSA8VD4oXHJcbiAgcHJvbWlzZTogUHJvbWlzZTxUPixcclxuICBvbkVycm9yID0gbm9vcFxyXG4pOiBQcm9taXNlPFQ+ID0+IHtcclxuICBwcm9taXNlLmNhdGNoKG9uRXJyb3IpXHJcblxyXG4gIHJldHVybiBwcm9taXNlXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRBYm9ydFNpZ25hbExpc3RlbmVyID0gKFxyXG4gIGFib3J0U2lnbmFsOiBBYm9ydFNpZ25hbCxcclxuICBjYWxsYmFjazogKGV2dDogRXZlbnQpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pXHJcbiAgcmV0dXJuICgpID0+IGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgY2FsbGJhY2spXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxscyBgYWJvcnRDb250cm9sbGVyLmFib3J0KHJlYXNvbilgIGFuZCBwYXRjaGVzIGBzaWduYWwucmVhc29uYC5cclxuICogaWYgaXQgaXMgbm90IHN1cHBvcnRlZC5cclxuICpcclxuICogQXQgdGhlIHRpbWUgb2Ygd3JpdGluZyBgc2lnbmFsLnJlYXNvbmAgaXMgYXZhaWxhYmxlIGluIEZGIGNocm9tZSwgZWRnZSBub2RlIDE3IGFuZCBkZW5vLlxyXG4gKiBAcGFyYW0gYWJvcnRDb250cm9sbGVyXHJcbiAqIEBwYXJhbSByZWFzb25cclxuICogQHJldHVybnNcclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQWJvcnRTaWduYWwvcmVhc29uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiA9IDxUPihcclxuICBhYm9ydENvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcixcclxuICByZWFzb246IFRcclxuKTogdm9pZCA9PiB7XHJcbiAgdHlwZSBDb25zdW1lcjxUPiA9ICh2YWw6IFQpID0+IHZvaWRcclxuXHJcbiAgY29uc3Qgc2lnbmFsID0gYWJvcnRDb250cm9sbGVyLnNpZ25hbCBhcyBBYm9ydFNpZ25hbFdpdGhSZWFzb248VD5cclxuXHJcbiAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcblxyXG4gIC8vIFBhdGNoIGByZWFzb25gIGlmIG5lY2Vzc2FyeS5cclxuICAvLyAtIFdlIHVzZSBkZWZpbmVQcm9wZXJ0eSBoZXJlIGJlY2F1c2UgcmVhc29uIGlzIGEgZ2V0dGVyIG9mIGBBYm9ydFNpZ25hbC5fX3Byb3RvX19gLlxyXG4gIC8vIC0gV2UgbmVlZCB0byBwYXRjaCAncmVhc29uJyBiZWZvcmUgY2FsbGluZyBgLmFib3J0KClgIGJlY2F1c2UgbGlzdGVuZXJzIHRvIHRoZSAnYWJvcnQnXHJcbiAgLy8gZXZlbnQgYXJlIGFyZSBub3RpZmllZCBpbW1lZGlhdGVseS5cclxuICBpZiAoISgncmVhc29uJyBpbiBzaWduYWwpKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2lnbmFsLCAncmVhc29uJywge1xyXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICB2YWx1ZTogcmVhc29uLFxyXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIDsoYWJvcnRDb250cm9sbGVyLmFib3J0IGFzIENvbnN1bWVyPHR5cGVvZiByZWFzb24+KShyZWFzb24pXHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBTZXJpYWxpemVkRXJyb3IgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xyXG5cclxuY29uc3QgdGFzayA9ICd0YXNrJ1xyXG5jb25zdCBsaXN0ZW5lciA9ICdsaXN0ZW5lcidcclxuY29uc3QgY29tcGxldGVkID0gJ2NvbXBsZXRlZCdcclxuY29uc3QgY2FuY2VsbGVkID0gJ2NhbmNlbGxlZCdcclxuXHJcbi8qIFRhc2tBYm9ydEVycm9yIGVycm9yIGNvZGVzICAqL1xyXG5leHBvcnQgY29uc3QgdGFza0NhbmNlbGxlZCA9IGB0YXNrLSR7Y2FuY2VsbGVkfWAgYXMgY29uc3RcclxuZXhwb3J0IGNvbnN0IHRhc2tDb21wbGV0ZWQgPSBgdGFzay0ke2NvbXBsZXRlZH1gIGFzIGNvbnN0XHJcbmV4cG9ydCBjb25zdCBsaXN0ZW5lckNhbmNlbGxlZCA9IGAke2xpc3RlbmVyfS0ke2NhbmNlbGxlZH1gIGFzIGNvbnN0XHJcbmV4cG9ydCBjb25zdCBsaXN0ZW5lckNvbXBsZXRlZCA9IGAke2xpc3RlbmVyfS0ke2NvbXBsZXRlZH1gIGFzIGNvbnN0XHJcblxyXG5leHBvcnQgY2xhc3MgVGFza0Fib3J0RXJyb3IgaW1wbGVtZW50cyBTZXJpYWxpemVkRXJyb3Ige1xyXG4gIG5hbWUgPSAnVGFza0Fib3J0RXJyb3InXHJcbiAgbWVzc2FnZTogc3RyaW5nXHJcbiAgY29uc3RydWN0b3IocHVibGljIGNvZGU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5tZXNzYWdlID0gYCR7dGFza30gJHtjYW5jZWxsZWR9IChyZWFzb246ICR7Y29kZX0pYFxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUYXNrQWJvcnRFcnJvciB9IGZyb20gJy4vZXhjZXB0aW9ucydcclxuaW1wb3J0IHR5cGUgeyBBYm9ydFNpZ25hbFdpdGhSZWFzb24sIFRhc2tSZXN1bHQgfSBmcm9tICcuL3R5cGVzJ1xyXG5pbXBvcnQgeyBhZGRBYm9ydFNpZ25hbExpc3RlbmVyLCBjYXRjaFJlamVjdGlvbiwgbm9vcCB9IGZyb20gJy4vdXRpbHMnXHJcblxyXG4vKipcclxuICogU3luY2hyb25vdXNseSByYWlzZXMge0BsaW5rIFRhc2tBYm9ydEVycm9yfSBpZiB0aGUgdGFzayB0aWVkIHRvIHRoZSBpbnB1dCBgc2lnbmFsYCBoYXMgYmVlbiBjYW5jZWxsZWQuXHJcbiAqIEBwYXJhbSBzaWduYWxcclxuICogQHBhcmFtIHJlYXNvblxyXG4gKiBAc2VlIHtUYXNrQWJvcnRFcnJvcn1cclxuICovXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUFjdGl2ZSA9IChzaWduYWw6IEFib3J0U2lnbmFsKTogdm9pZCA9PiB7XHJcbiAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICB0aHJvdyBuZXcgVGFza0Fib3J0RXJyb3IoKHNpZ25hbCBhcyBBYm9ydFNpZ25hbFdpdGhSZWFzb248c3RyaW5nPikucmVhc29uKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhY2UgYmV0d2VlbiB0aGUgcHJvbWlzZShzKSBhbmQgdGhlIEFib3J0U2lnbmFsXHJcbiAqIFRoaXMgYXZvaWRzIGBQcm9taXNlLnJhY2UoKWAtcmVsYXRlZCBtZW1vcnkgbGVha3M6XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMTc0NjkjaXNzdWVjb21tZW50LTM0OTc5NDkwOVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VXaXRoU2lnbmFsPFQ+KFxyXG4gIHNpZ25hbDogQWJvcnRTaWduYWxXaXRoUmVhc29uPHN0cmluZz4sXHJcbiAgcHJvbWlzZTogUHJvbWlzZTxUPlxyXG4pOiBQcm9taXNlPFQ+IHtcclxuICBsZXQgY2xlYW51cCA9IG5vb3BcclxuICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgY29uc3Qgbm90aWZ5UmVqZWN0aW9uID0gKCkgPT4gcmVqZWN0KG5ldyBUYXNrQWJvcnRFcnJvcihzaWduYWwucmVhc29uKSlcclxuXHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgbm90aWZ5UmVqZWN0aW9uKClcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW51cCA9IGFkZEFib3J0U2lnbmFsTGlzdGVuZXIoc2lnbmFsLCBub3RpZnlSZWplY3Rpb24pXHJcbiAgICBwcm9taXNlLmZpbmFsbHkoKCkgPT4gY2xlYW51cCgpKS50aGVuKHJlc29sdmUsIHJlamVjdClcclxuICB9KS5maW5hbGx5KCgpID0+IHtcclxuICAgIC8vIGFmdGVyIHRoaXMgcG9pbnQsIHJlcGxhY2UgYGNsZWFudXBgIHdpdGggYSBub29wLCBzbyB0aGVyZSBpcyBubyByZWZlcmVuY2UgdG8gYHNpZ25hbGAgYW55IG1vcmVcclxuICAgIGNsZWFudXAgPSBub29wXHJcbiAgfSlcclxufVxyXG5cclxuLyoqXHJcbiAqIFJ1bnMgYSB0YXNrIGFuZCByZXR1cm5zIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB7QGxpbmsgVGFza1Jlc3VsdH0uXHJcbiAqIFNlY29uZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBgY2xlYW5VcGAgZnVuY3Rpb24gdGhhdCBhbHdheXMgcnVucyBhZnRlciB0YXNrLlxyXG4gKlxyXG4gKiAqKk5vdGU6KiogYHJ1blRhc2tgIHJ1bnMgdGhlIGV4ZWN1dG9yIGluIHRoZSBuZXh0IG1pY3JvdGFzay5cclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBydW5UYXNrID0gYXN5bmMgPFQ+KFxyXG4gIHRhc2s6ICgpID0+IFByb21pc2U8VD4sXHJcbiAgY2xlYW5VcD86ICgpID0+IHZvaWRcclxuKTogUHJvbWlzZTxUYXNrUmVzdWx0PFQ+PiA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHRhc2soKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhdHVzOiAnb2snLFxyXG4gICAgICB2YWx1ZSxcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGF0dXM6IGVycm9yIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IgPyAnY2FuY2VsbGVkJyA6ICdyZWplY3RlZCcsXHJcbiAgICAgIGVycm9yLFxyXG4gICAgfVxyXG4gIH0gZmluYWxseSB7XHJcbiAgICBjbGVhblVwPy4oKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdpdmVuIGFuIGlucHV0IGBBYm9ydFNpZ25hbGAgYW5kIGEgcHJvbWlzZSByZXR1cm5zIGFub3RoZXIgcHJvbWlzZSB0aGF0IHJlc29sdmVzXHJcbiAqIGFzIHNvb24gdGhlIGlucHV0IHByb21pc2UgaXMgcHJvdmlkZWQgb3IgcmVqZWN0cyBhcyBzb29uIGFzXHJcbiAqIGBBYm9ydFNpZ25hbC5hYm9ydGAgaXMgYHRydWVgLlxyXG4gKiBAcGFyYW0gc2lnbmFsXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY3JlYXRlUGF1c2UgPSA8VD4oc2lnbmFsOiBBYm9ydFNpZ25hbCkgPT4ge1xyXG4gIHJldHVybiAocHJvbWlzZTogUHJvbWlzZTxUPik6IFByb21pc2U8VD4gPT4ge1xyXG4gICAgcmV0dXJuIGNhdGNoUmVqZWN0aW9uKFxyXG4gICAgICByYWNlV2l0aFNpZ25hbChzaWduYWwsIHByb21pc2UpLnRoZW4oKG91dHB1dCkgPT4ge1xyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbClcclxuICAgICAgICByZXR1cm4gb3V0cHV0XHJcbiAgICAgIH0pXHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2l2ZW4gYW4gaW5wdXQgYEFib3J0U2lnbmFsYCBhbmQgYHRpbWVvdXRNc2AgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlc1xyXG4gKiBhZnRlciBgdGltZW91dE1zYCBvciByZWplY3RzIGFzIHNvb24gYXMgYEFib3J0U2lnbmFsLmFib3J0YCBpcyBgdHJ1ZWAuXHJcbiAqIEBwYXJhbSBzaWduYWxcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVEZWxheSA9IChzaWduYWw6IEFib3J0U2lnbmFsKSA9PiB7XHJcbiAgY29uc3QgcGF1c2UgPSBjcmVhdGVQYXVzZTx2b2lkPihzaWduYWwpXHJcbiAgcmV0dXJuICh0aW1lb3V0TXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcykpKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IERpc3BhdGNoLCBBbnlBY3Rpb24sIE1pZGRsZXdhcmVBUEkgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHR5cGUgeyBUaHVua0Rpc3BhdGNoIH0gZnJvbSAncmVkdXgtdGh1bmsnXHJcbmltcG9ydCB7IGNyZWF0ZUFjdGlvbiwgaXNBY3Rpb24gfSBmcm9tICcuLi9jcmVhdGVBY3Rpb24nXHJcbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gJy4uL25hbm9pZCdcclxuXHJcbmltcG9ydCB0eXBlIHtcclxuICBMaXN0ZW5lck1pZGRsZXdhcmUsXHJcbiAgTGlzdGVuZXJNaWRkbGV3YXJlSW5zdGFuY2UsXHJcbiAgQWRkTGlzdGVuZXJPdmVybG9hZHMsXHJcbiAgQW55TGlzdGVuZXJQcmVkaWNhdGUsXHJcbiAgQ3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlT3B0aW9ucyxcclxuICBUeXBlZEFkZExpc3RlbmVyLFxyXG4gIFR5cGVkQ3JlYXRlTGlzdGVuZXJFbnRyeSxcclxuICBGYWxsYmFja0FkZExpc3RlbmVyT3B0aW9ucyxcclxuICBMaXN0ZW5lckVudHJ5LFxyXG4gIExpc3RlbmVyRXJyb3JIYW5kbGVyLFxyXG4gIFVuc3Vic2NyaWJlTGlzdGVuZXIsXHJcbiAgVGFrZVBhdHRlcm4sXHJcbiAgTGlzdGVuZXJFcnJvckluZm8sXHJcbiAgRm9ya2VkVGFza0V4ZWN1dG9yLFxyXG4gIEZvcmtlZFRhc2ssXHJcbiAgVHlwZWRSZW1vdmVMaXN0ZW5lcixcclxuICBUYXNrUmVzdWx0LFxyXG4gIEFib3J0U2lnbmFsV2l0aFJlYXNvbixcclxuICBVbnN1YnNjcmliZUxpc3RlbmVyT3B0aW9ucyxcclxufSBmcm9tICcuL3R5cGVzJ1xyXG5pbXBvcnQge1xyXG4gIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24sXHJcbiAgYWRkQWJvcnRTaWduYWxMaXN0ZW5lcixcclxuICBhc3NlcnRGdW5jdGlvbixcclxuICBjYXRjaFJlamVjdGlvbixcclxufSBmcm9tICcuL3V0aWxzJ1xyXG5pbXBvcnQge1xyXG4gIGxpc3RlbmVyQ2FuY2VsbGVkLFxyXG4gIGxpc3RlbmVyQ29tcGxldGVkLFxyXG4gIFRhc2tBYm9ydEVycm9yLFxyXG4gIHRhc2tDYW5jZWxsZWQsXHJcbiAgdGFza0NvbXBsZXRlZCxcclxufSBmcm9tICcuL2V4Y2VwdGlvbnMnXHJcbmltcG9ydCB7XHJcbiAgcnVuVGFzayxcclxuICB2YWxpZGF0ZUFjdGl2ZSxcclxuICBjcmVhdGVQYXVzZSxcclxuICBjcmVhdGVEZWxheSxcclxuICByYWNlV2l0aFNpZ25hbCxcclxufSBmcm9tICcuL3Rhc2snXHJcbmV4cG9ydCB7IFRhc2tBYm9ydEVycm9yIH0gZnJvbSAnLi9leGNlcHRpb25zJ1xyXG5leHBvcnQgdHlwZSB7XHJcbiAgTGlzdGVuZXJFZmZlY3QsXHJcbiAgTGlzdGVuZXJNaWRkbGV3YXJlLFxyXG4gIExpc3RlbmVyRWZmZWN0QVBJLFxyXG4gIExpc3RlbmVyTWlkZGxld2FyZUluc3RhbmNlLFxyXG4gIENyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZU9wdGlvbnMsXHJcbiAgTGlzdGVuZXJFcnJvckhhbmRsZXIsXHJcbiAgVHlwZWRTdGFydExpc3RlbmluZyxcclxuICBUeXBlZEFkZExpc3RlbmVyLFxyXG4gIFR5cGVkU3RvcExpc3RlbmluZyxcclxuICBUeXBlZFJlbW92ZUxpc3RlbmVyLFxyXG4gIFVuc3Vic2NyaWJlTGlzdGVuZXIsXHJcbiAgVW5zdWJzY3JpYmVMaXN0ZW5lck9wdGlvbnMsXHJcbiAgRm9ya2VkVGFza0V4ZWN1dG9yLFxyXG4gIEZvcmtlZFRhc2ssXHJcbiAgRm9ya2VkVGFza0FQSSxcclxuICBBc3luY1Rhc2tFeGVjdXRvcixcclxuICBTeW5jVGFza0V4ZWN1dG9yLFxyXG4gIFRhc2tDYW5jZWxsZWQsXHJcbiAgVGFza1JlamVjdGVkLFxyXG4gIFRhc2tSZXNvbHZlZCxcclxuICBUYXNrUmVzdWx0LFxyXG59IGZyb20gJy4vdHlwZXMnXHJcblxyXG4vL092ZXJseS1hZ2dyZXNzaXZlIGJ5dGUtc2hhdmluZ1xyXG5jb25zdCB7IGFzc2lnbiB9ID0gT2JqZWN0XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IElOVEVSTkFMX05JTF9UT0tFTiA9IHt9IGFzIGNvbnN0XHJcblxyXG5jb25zdCBhbG0gPSAnbGlzdGVuZXJNaWRkbGV3YXJlJyBhcyBjb25zdFxyXG5cclxuY29uc3QgY3JlYXRlRm9yayA9IChwYXJlbnRBYm9ydFNpZ25hbDogQWJvcnRTaWduYWxXaXRoUmVhc29uPHVua25vd24+KSA9PiB7XHJcbiAgY29uc3QgbGlua0NvbnRyb2xsZXJzID0gKGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcikgPT5cclxuICAgIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsICgpID0+XHJcbiAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKVxyXG4gICAgKVxyXG5cclxuICByZXR1cm4gPFQ+KHRhc2tFeGVjdXRvcjogRm9ya2VkVGFza0V4ZWN1dG9yPFQ+KTogRm9ya2VkVGFzazxUPiA9PiB7XHJcbiAgICBhc3NlcnRGdW5jdGlvbih0YXNrRXhlY3V0b3IsICd0YXNrRXhlY3V0b3InKVxyXG4gICAgY29uc3QgY2hpbGRBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcclxuXHJcbiAgICBsaW5rQ29udHJvbGxlcnMoY2hpbGRBYm9ydENvbnRyb2xsZXIpXHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gcnVuVGFzazxUPihcclxuICAgICAgYXN5bmMgKCk6IFByb21pc2U8VD4gPT4ge1xyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKVxyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbClcclxuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICB9KSkgYXMgVFxyXG4gICAgICAgIHZhbGlkYXRlQWN0aXZlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbClcclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgIH0sXHJcbiAgICAgICgpID0+IGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDb21wbGV0ZWQpXHJcbiAgICApXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdWx0OiBjcmVhdGVQYXVzZTxUYXNrUmVzdWx0PFQ+PihwYXJlbnRBYm9ydFNpZ25hbCkocmVzdWx0KSxcclxuICAgICAgY2FuY2VsKCkge1xyXG4gICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDYW5jZWxsZWQpXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVUYWtlUGF0dGVybiA9IDxTPihcclxuICBzdGFydExpc3RlbmluZzogQWRkTGlzdGVuZXJPdmVybG9hZHM8XHJcbiAgICBVbnN1YnNjcmliZUxpc3RlbmVyLFxyXG4gICAgUyxcclxuICAgIERpc3BhdGNoPEFueUFjdGlvbj5cclxuICA+LFxyXG4gIHNpZ25hbDogQWJvcnRTaWduYWxcclxuKTogVGFrZVBhdHRlcm48Uz4gPT4ge1xyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIExpc3RlbmVyUHJlZGljYXRlIGFuZCBhbiBvcHRpb25hbCB0aW1lb3V0LFxyXG4gICAqIGFuZCByZXNvbHZlcyB3aGVuIGVpdGhlciB0aGUgcHJlZGljYXRlIHJldHVybnMgYHRydWVgIGJhc2VkIG9uIGFuIGFjdGlvblxyXG4gICAqIHN0YXRlIGNvbWJpbmF0aW9uIG9yIHdoZW4gdGhlIHRpbWVvdXQgZXhwaXJlcy5cclxuICAgKiBJZiB0aGUgcGFyZW50IGxpc3RlbmVyIGlzIGNhbmNlbGVkIHdoaWxlIHdhaXRpbmcsIHRoaXMgd2lsbCB0aHJvdyBhXHJcbiAgICogVGFza0Fib3J0RXJyb3IuXHJcbiAgICovXHJcbiAgY29uc3QgdGFrZSA9IGFzeW5jIDxQIGV4dGVuZHMgQW55TGlzdGVuZXJQcmVkaWNhdGU8Uz4+KFxyXG4gICAgcHJlZGljYXRlOiBQLFxyXG4gICAgdGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkXHJcbiAgKSA9PiB7XHJcbiAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpXHJcblxyXG4gICAgLy8gUGxhY2Vob2xkZXIgdW5zdWJzY3JpYmUgZnVuY3Rpb24gdW50aWwgdGhlIGxpc3RlbmVyIGlzIGFkZGVkXHJcbiAgICBsZXQgdW5zdWJzY3JpYmU6IFVuc3Vic2NyaWJlTGlzdGVuZXIgPSAoKSA9PiB7fVxyXG5cclxuICAgIGNvbnN0IHR1cGxlUHJvbWlzZSA9IG5ldyBQcm9taXNlPFtBbnlBY3Rpb24sIFMsIFNdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIC8vIEluc2lkZSB0aGUgUHJvbWlzZSwgd2Ugc3luY2hyb25vdXNseSBhZGQgdGhlIGxpc3RlbmVyLlxyXG4gICAgICBsZXQgc3RvcExpc3RlbmluZyA9IHN0YXJ0TGlzdGVuaW5nKHtcclxuICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSBhcyBhbnksXHJcbiAgICAgICAgZWZmZWN0OiAoYWN0aW9uLCBsaXN0ZW5lckFwaSk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgLy8gT25lLXNob3QgbGlzdGVuZXIgdGhhdCBjbGVhbnMgdXAgYXMgc29vbiBhcyB0aGUgcHJlZGljYXRlIHBhc3Nlc1xyXG4gICAgICAgICAgbGlzdGVuZXJBcGkudW5zdWJzY3JpYmUoKVxyXG4gICAgICAgICAgLy8gUmVzb2x2ZSB0aGUgcHJvbWlzZSB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGUgcHJlZGljYXRlIHNhd1xyXG4gICAgICAgICAgcmVzb2x2ZShbXHJcbiAgICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0U3RhdGUoKSxcclxuICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0T3JpZ2luYWxTdGF0ZSgpLFxyXG4gICAgICAgICAgXSlcclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG4gICAgICB1bnN1YnNjcmliZSA9ICgpID0+IHtcclxuICAgICAgICBzdG9wTGlzdGVuaW5nKClcclxuICAgICAgICByZWplY3QoKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IHByb21pc2VzOiAoUHJvbWlzZTxudWxsPiB8IFByb21pc2U8W0FueUFjdGlvbiwgUywgU10+KVtdID0gW1xyXG4gICAgICB0dXBsZVByb21pc2UsXHJcbiAgICBdXHJcblxyXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xyXG4gICAgICBwcm9taXNlcy5wdXNoKFxyXG4gICAgICAgIG5ldyBQcm9taXNlPG51bGw+KChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQsIG51bGwpKVxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgcmFjZVdpdGhTaWduYWwoc2lnbmFsLCBQcm9taXNlLnJhY2UocHJvbWlzZXMpKVxyXG5cclxuICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKVxyXG4gICAgICByZXR1cm4gb3V0cHV0XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICAvLyBBbHdheXMgY2xlYW4gdXAgdGhlIGxpc3RlbmVyXHJcbiAgICAgIHVuc3Vic2NyaWJlKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiAoKHByZWRpY2F0ZTogQW55TGlzdGVuZXJQcmVkaWNhdGU8Uz4sIHRpbWVvdXQ6IG51bWJlciB8IHVuZGVmaW5lZCkgPT5cclxuICAgIGNhdGNoUmVqZWN0aW9uKHRha2UocHJlZGljYXRlLCB0aW1lb3V0KSkpIGFzIFRha2VQYXR0ZXJuPFM+XHJcbn1cclxuXHJcbmNvbnN0IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20gPSAob3B0aW9uczogRmFsbGJhY2tBZGRMaXN0ZW5lck9wdGlvbnMpID0+IHtcclxuICBsZXQgeyB0eXBlLCBhY3Rpb25DcmVhdG9yLCBtYXRjaGVyLCBwcmVkaWNhdGUsIGVmZmVjdCB9ID0gb3B0aW9uc1xyXG5cclxuICBpZiAodHlwZSkge1xyXG4gICAgcHJlZGljYXRlID0gY3JlYXRlQWN0aW9uKHR5cGUpLm1hdGNoXHJcbiAgfSBlbHNlIGlmIChhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICB0eXBlID0gYWN0aW9uQ3JlYXRvciEudHlwZVxyXG4gICAgcHJlZGljYXRlID0gYWN0aW9uQ3JlYXRvci5tYXRjaFxyXG4gIH0gZWxzZSBpZiAobWF0Y2hlcikge1xyXG4gICAgcHJlZGljYXRlID0gbWF0Y2hlclxyXG4gIH0gZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICAvLyBwYXNzXHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgJ0NyZWF0aW5nIG9yIHJlbW92aW5nIGEgbGlzdGVuZXIgcmVxdWlyZXMgb25lIG9mIHRoZSBrbm93biBmaWVsZHMgZm9yIG1hdGNoaW5nIGFuIGFjdGlvbidcclxuICAgIClcclxuICB9XHJcblxyXG4gIGFzc2VydEZ1bmN0aW9uKGVmZmVjdCwgJ29wdGlvbnMubGlzdGVuZXInKVxyXG5cclxuICByZXR1cm4geyBwcmVkaWNhdGUsIHR5cGUsIGVmZmVjdCB9XHJcbn1cclxuXHJcbi8qKiBBY2NlcHRzIHRoZSBwb3NzaWJsZSBvcHRpb25zIGZvciBjcmVhdGluZyBhIGxpc3RlbmVyLCBhbmQgcmV0dXJucyBhIGZvcm1hdHRlZCBsaXN0ZW5lciBlbnRyeSAqL1xyXG5leHBvcnQgY29uc3QgY3JlYXRlTGlzdGVuZXJFbnRyeTogVHlwZWRDcmVhdGVMaXN0ZW5lckVudHJ5PHVua25vd24+ID0gKFxyXG4gIG9wdGlvbnM6IEZhbGxiYWNrQWRkTGlzdGVuZXJPcHRpb25zXHJcbikgPT4ge1xyXG4gIGNvbnN0IHsgdHlwZSwgcHJlZGljYXRlLCBlZmZlY3QgfSA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucylcclxuXHJcbiAgY29uc3QgaWQgPSBuYW5vaWQoKVxyXG4gIGNvbnN0IGVudHJ5OiBMaXN0ZW5lckVudHJ5PHVua25vd24+ID0ge1xyXG4gICAgaWQsXHJcbiAgICBlZmZlY3QsXHJcbiAgICB0eXBlLFxyXG4gICAgcHJlZGljYXRlLFxyXG4gICAgcGVuZGluZzogbmV3IFNldDxBYm9ydENvbnRyb2xsZXI+KCksXHJcbiAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZCcpXHJcbiAgICB9LFxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVudHJ5XHJcbn1cclxuXHJcbmNvbnN0IGNhbmNlbEFjdGl2ZUxpc3RlbmVycyA9IChcclxuICBlbnRyeTogTGlzdGVuZXJFbnRyeTx1bmtub3duLCBEaXNwYXRjaDxBbnlBY3Rpb24+PlxyXG4pID0+IHtcclxuICBlbnRyeS5wZW5kaW5nLmZvckVhY2goKGNvbnRyb2xsZXIpID0+IHtcclxuICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpXHJcbiAgfSlcclxufVxyXG5cclxuY29uc3QgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSAoXHJcbiAgbGlzdGVuZXJNYXA6IE1hcDxzdHJpbmcsIExpc3RlbmVyRW50cnk+XHJcbikgPT4ge1xyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBsaXN0ZW5lck1hcC5mb3JFYWNoKGNhbmNlbEFjdGl2ZUxpc3RlbmVycylcclxuXHJcbiAgICBsaXN0ZW5lck1hcC5jbGVhcigpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2FmZWx5IHJlcG9ydHMgZXJyb3JzIHRvIHRoZSBgZXJyb3JIYW5kbGVyYCBwcm92aWRlZC5cclxuICogRXJyb3JzIHRoYXQgb2NjdXIgaW5zaWRlIGBlcnJvckhhbmRsZXJgIGFyZSBub3RpZmllZCBpbiBhIG5ldyB0YXNrLlxyXG4gKiBJbnNwaXJlZCBieSBbcnhqcyByZXBvcnRVbmhhbmRsZWRFcnJvcl0oaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2Jsb2IvNmZhZmNmNTNkYzllNTU3NDM5YjI1ZGViYWVhZGZkMjI0YjI0NWE2Ni9zcmMvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci50cylcclxuICogQHBhcmFtIGVycm9ySGFuZGxlclxyXG4gKiBAcGFyYW0gZXJyb3JUb05vdGlmeVxyXG4gKi9cclxuY29uc3Qgc2FmZWx5Tm90aWZ5RXJyb3IgPSAoXHJcbiAgZXJyb3JIYW5kbGVyOiBMaXN0ZW5lckVycm9ySGFuZGxlcixcclxuICBlcnJvclRvTm90aWZ5OiB1bmtub3duLFxyXG4gIGVycm9ySW5mbzogTGlzdGVuZXJFcnJvckluZm9cclxuKTogdm9pZCA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGVycm9ySGFuZGxlcihlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pXHJcbiAgfSBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcclxuICAgIC8vIFdlIGNhbm5vdCBsZXQgYW4gZXJyb3IgcmFpc2VkIGhlcmUgYmxvY2sgdGhlIGxpc3RlbmVyIHF1ZXVlLlxyXG4gICAgLy8gVGhlIGVycm9yIHJhaXNlZCBoZXJlIHdpbGwgYmUgcGlja2VkIHVwIGJ5IGB3aW5kb3cub25lcnJvcmAsIGBwcm9jZXNzLm9uKCdlcnJvcicpYCBldGMuLi5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aHJvdyBlcnJvckhhbmRsZXJFcnJvclxyXG4gICAgfSwgMClcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWRkTGlzdGVuZXIgPSBjcmVhdGVBY3Rpb24oXHJcbiAgYCR7YWxtfS9hZGRgXHJcbikgYXMgVHlwZWRBZGRMaXN0ZW5lcjx1bmtub3duPlxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBjb25zdCBjbGVhckFsbExpc3RlbmVycyA9IGNyZWF0ZUFjdGlvbihgJHthbG19L3JlbW92ZUFsbGApXHJcblxyXG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUxpc3RlbmVyID0gY3JlYXRlQWN0aW9uKFxyXG4gIGAke2FsbX0vcmVtb3ZlYFxyXG4pIGFzIFR5cGVkUmVtb3ZlTGlzdGVuZXI8dW5rbm93bj5cclxuXHJcbmNvbnN0IGRlZmF1bHRFcnJvckhhbmRsZXI6IExpc3RlbmVyRXJyb3JIYW5kbGVyID0gKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IoYCR7YWxtfS9lcnJvcmAsIC4uLmFyZ3MpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlPFxyXG4gIFMgPSB1bmtub3duLFxyXG4gIEQgZXh0ZW5kcyBEaXNwYXRjaDxBbnlBY3Rpb24+ID0gVGh1bmtEaXNwYXRjaDxTLCB1bmtub3duLCBBbnlBY3Rpb24+LFxyXG4gIEV4dHJhQXJndW1lbnQgPSB1bmtub3duXHJcbj4obWlkZGxld2FyZU9wdGlvbnM6IENyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZU9wdGlvbnM8RXh0cmFBcmd1bWVudD4gPSB7fSkge1xyXG4gIGNvbnN0IGxpc3RlbmVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIExpc3RlbmVyRW50cnk+KClcclxuICBjb25zdCB7IGV4dHJhLCBvbkVycm9yID0gZGVmYXVsdEVycm9ySGFuZGxlciB9ID0gbWlkZGxld2FyZU9wdGlvbnNcclxuXHJcbiAgYXNzZXJ0RnVuY3Rpb24ob25FcnJvciwgJ29uRXJyb3InKVxyXG5cclxuICBjb25zdCBpbnNlcnRFbnRyeSA9IChlbnRyeTogTGlzdGVuZXJFbnRyeSkgPT4ge1xyXG4gICAgZW50cnkudW5zdWJzY3JpYmUgPSAoKSA9PiBsaXN0ZW5lck1hcC5kZWxldGUoZW50cnkhLmlkKVxyXG5cclxuICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpXHJcbiAgICByZXR1cm4gKGNhbmNlbE9wdGlvbnM/OiBVbnN1YnNjcmliZUxpc3RlbmVyT3B0aW9ucykgPT4ge1xyXG4gICAgICBlbnRyeS51bnN1YnNjcmliZSgpXHJcbiAgICAgIGlmIChjYW5jZWxPcHRpb25zPy5jYW5jZWxBY3RpdmUpIHtcclxuICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGZpbmRMaXN0ZW5lckVudHJ5ID0gKFxyXG4gICAgY29tcGFyYXRvcjogKGVudHJ5OiBMaXN0ZW5lckVudHJ5KSA9PiBib29sZWFuXHJcbiAgKTogTGlzdGVuZXJFbnRyeSB8IHVuZGVmaW5lZCA9PiB7XHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIEFycmF5LmZyb20obGlzdGVuZXJNYXAudmFsdWVzKCkpKSB7XHJcbiAgICAgIGlmIChjb21wYXJhdG9yKGVudHJ5KSkge1xyXG4gICAgICAgIHJldHVybiBlbnRyeVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc3RhcnRMaXN0ZW5pbmcgPSAob3B0aW9uczogRmFsbGJhY2tBZGRMaXN0ZW5lck9wdGlvbnMpID0+IHtcclxuICAgIGxldCBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KFxyXG4gICAgICAoZXhpc3RpbmdFbnRyeSkgPT4gZXhpc3RpbmdFbnRyeS5lZmZlY3QgPT09IG9wdGlvbnMuZWZmZWN0XHJcbiAgICApXHJcblxyXG4gICAgaWYgKCFlbnRyeSkge1xyXG4gICAgICBlbnRyeSA9IGNyZWF0ZUxpc3RlbmVyRW50cnkob3B0aW9ucyBhcyBhbnkpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluc2VydEVudHJ5KGVudHJ5KVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc3RvcExpc3RlbmluZyA9IChcclxuICAgIG9wdGlvbnM6IEZhbGxiYWNrQWRkTGlzdGVuZXJPcHRpb25zICYgVW5zdWJzY3JpYmVMaXN0ZW5lck9wdGlvbnNcclxuICApOiBib29sZWFuID0+IHtcclxuICAgIGNvbnN0IHsgdHlwZSwgZWZmZWN0LCBwcmVkaWNhdGUgfSA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucylcclxuXHJcbiAgICBjb25zdCBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KChlbnRyeSkgPT4ge1xyXG4gICAgICBjb25zdCBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9XHJcbiAgICAgICAgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICA/IGVudHJ5LnR5cGUgPT09IHR5cGVcclxuICAgICAgICAgIDogZW50cnkucHJlZGljYXRlID09PSBwcmVkaWNhdGVcclxuXHJcbiAgICAgIHJldHVybiBtYXRjaFByZWRpY2F0ZU9yVHlwZSAmJiBlbnRyeS5lZmZlY3QgPT09IGVmZmVjdFxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoZW50cnkpIHtcclxuICAgICAgZW50cnkudW5zdWJzY3JpYmUoKVxyXG4gICAgICBpZiAob3B0aW9ucy5jYW5jZWxBY3RpdmUpIHtcclxuICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gISFlbnRyeVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgbm90aWZ5TGlzdGVuZXIgPSBhc3luYyAoXHJcbiAgICBlbnRyeTogTGlzdGVuZXJFbnRyeTx1bmtub3duLCBEaXNwYXRjaDxBbnlBY3Rpb24+PixcclxuICAgIGFjdGlvbjogQW55QWN0aW9uLFxyXG4gICAgYXBpOiBNaWRkbGV3YXJlQVBJLFxyXG4gICAgZ2V0T3JpZ2luYWxTdGF0ZTogKCkgPT4gU1xyXG4gICkgPT4ge1xyXG4gICAgY29uc3QgaW50ZXJuYWxUYXNrQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxyXG4gICAgY29uc3QgdGFrZSA9IGNyZWF0ZVRha2VQYXR0ZXJuKFxyXG4gICAgICBzdGFydExpc3RlbmluZyxcclxuICAgICAgaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWxcclxuICAgIClcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKVxyXG4gICAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoXHJcbiAgICAgICAgZW50cnkuZWZmZWN0KFxyXG4gICAgICAgICAgYWN0aW9uLFxyXG4gICAgICAgICAgLy8gVXNlIGFzc2lnbigpIHJhdGhlciB0aGFuIC4uLiB0byBhdm9pZCBleHRyYSBoZWxwZXIgZnVuY3Rpb25zIGFkZGVkIHRvIGJ1bmRsZVxyXG4gICAgICAgICAgYXNzaWduKHt9LCBhcGksIHtcclxuICAgICAgICAgICAgZ2V0T3JpZ2luYWxTdGF0ZSxcclxuICAgICAgICAgICAgY29uZGl0aW9uOiAoXHJcbiAgICAgICAgICAgICAgcHJlZGljYXRlOiBBbnlMaXN0ZW5lclByZWRpY2F0ZTxhbnk+LFxyXG4gICAgICAgICAgICAgIHRpbWVvdXQ/OiBudW1iZXJcclxuICAgICAgICAgICAgKSA9PiB0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkudGhlbihCb29sZWFuKSxcclxuICAgICAgICAgICAgdGFrZSxcclxuICAgICAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgcGF1c2U6IGNyZWF0ZVBhdXNlPGFueT4oaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICBleHRyYSxcclxuICAgICAgICAgICAgc2lnbmFsOiBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgZm9yazogY3JlYXRlRm9yayhpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBlbnRyeS51bnN1YnNjcmliZSxcclxuICAgICAgICAgICAgc3Vic2NyaWJlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5mb3JFYWNoKChjb250cm9sbGVyLCBfLCBzZXQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyICE9PSBpbnRlcm5hbFRhc2tDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgIHNldC5kZWxldGUoY29udHJvbGxlcilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgIH0gY2F0Y2ggKGxpc3RlbmVyRXJyb3IpIHtcclxuICAgICAgaWYgKCEobGlzdGVuZXJFcnJvciBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yKSkge1xyXG4gICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIGxpc3RlbmVyRXJyb3IsIHtcclxuICAgICAgICAgIHJhaXNlZEJ5OiAnZWZmZWN0JyxcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGludGVybmFsVGFza0NvbnRyb2xsZXIsIGxpc3RlbmVyQ29tcGxldGVkKSAvLyBOb3RpZnkgdGhhdCB0aGUgdGFzayBoYXMgY29tcGxldGVkXHJcbiAgICAgIGVudHJ5LnBlbmRpbmcuZGVsZXRlKGludGVybmFsVGFza0NvbnRyb2xsZXIpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKGxpc3RlbmVyTWFwKVxyXG5cclxuICBjb25zdCBtaWRkbGV3YXJlOiBMaXN0ZW5lck1pZGRsZXdhcmU8UywgRCwgRXh0cmFBcmd1bWVudD4gPVxyXG4gICAgKGFwaSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcclxuICAgICAgaWYgKCFpc0FjdGlvbihhY3Rpb24pKSB7XHJcbiAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIG5vdGlmeSBsaXN0ZW5lcnMgZm9yIGFjdGlvbiBvYmplY3RzXHJcbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYWRkTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZClcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNsZWFyQWxsTGlzdGVuZXJzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSgpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZW1vdmVMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5lZWQgdG8gZ2V0IHRoaXMgc3RhdGUgX2JlZm9yZV8gdGhlIHJlZHVjZXIgcHJvY2Vzc2VzIHRoZSBhY3Rpb25cclxuICAgICAgbGV0IG9yaWdpbmFsU3RhdGU6IFMgfCB0eXBlb2YgSU5URVJOQUxfTklMX1RPS0VOID0gYXBpLmdldFN0YXRlKClcclxuXHJcbiAgICAgIC8vIGBnZXRPcmlnaW5hbFN0YXRlYCBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseS5cclxuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVkdXhqcy9yZWR1eC10b29sa2l0L2Rpc2N1c3Npb25zLzE2NDgjZGlzY3Vzc2lvbmNvbW1lbnQtMTkzMjgyMFxyXG4gICAgICBjb25zdCBnZXRPcmlnaW5hbFN0YXRlID0gKCk6IFMgPT4ge1xyXG4gICAgICAgIGlmIChvcmlnaW5hbFN0YXRlID09PSBJTlRFUk5BTF9OSUxfVE9LRU4pIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgYCR7YWxtfTogZ2V0T3JpZ2luYWxTdGF0ZSBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseWBcclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFN0YXRlIGFzIFNcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJlc3VsdDogdW5rbm93blxyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBBY3R1YWxseSBmb3J3YXJkIHRoZSBhY3Rpb24gdG8gdGhlIHJlZHVjZXIgYmVmb3JlIHdlIGhhbmRsZSBsaXN0ZW5lcnNcclxuICAgICAgICByZXN1bHQgPSBuZXh0KGFjdGlvbilcclxuXHJcbiAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKClcclxuICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIEVTQnVpbGQrVFMgdHJhbnNwaWxhdGlvbiBpc3N1ZVxyXG4gICAgICAgICAgY29uc3QgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSlcclxuICAgICAgICAgIGZvciAobGV0IGVudHJ5IG9mIGxpc3RlbmVyRW50cmllcykge1xyXG4gICAgICAgICAgICBsZXQgcnVuTGlzdGVuZXIgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSlcclxuICAgICAgICAgICAgfSBjYXRjaCAocHJlZGljYXRlRXJyb3IpIHtcclxuICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlXHJcblxyXG4gICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIHByZWRpY2F0ZUVycm9yLCB7XHJcbiAgICAgICAgICAgICAgICByYWlzZWRCeTogJ3ByZWRpY2F0ZScsXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFydW5MaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIGBvcmlnaW5hbFN0YXRlYCBzdG9yZSBmcm9tIHRoaXMgc2NvcGUuXHJcbiAgICAgICAgb3JpZ2luYWxTdGF0ZSA9IElOVEVSTkFMX05JTF9UT0tFTlxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBtaWRkbGV3YXJlLFxyXG4gICAgc3RhcnRMaXN0ZW5pbmcsXHJcbiAgICBzdG9wTGlzdGVuaW5nLFxyXG4gICAgY2xlYXJMaXN0ZW5lcnM6IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlLFxyXG4gIH0gYXMgTGlzdGVuZXJNaWRkbGV3YXJlSW5zdGFuY2U8UywgRCwgRXh0cmFBcmd1bWVudD5cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IFN0b3JlRW5oYW5jZXIgfSBmcm9tICdyZWR1eCdcclxuXHJcbmV4cG9ydCBjb25zdCBTSE9VTERfQVVUT0JBVENIID0gJ1JUS19hdXRvQmF0Y2gnXHJcblxyXG5leHBvcnQgY29uc3QgcHJlcGFyZUF1dG9CYXRjaGVkID1cclxuICA8VD4oKSA9PlxyXG4gIChwYXlsb2FkOiBUKTogeyBwYXlsb2FkOiBUOyBtZXRhOiB1bmtub3duIH0gPT4gKHtcclxuICAgIHBheWxvYWQsXHJcbiAgICBtZXRhOiB7IFtTSE9VTERfQVVUT0JBVENIXTogdHJ1ZSB9LFxyXG4gIH0pXHJcblxyXG4vLyBUT0RPIFJlbW92ZSB0aGlzIGluIDIuMFxyXG4vLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL3F1ZXVlLW1pY3JvdGFza1xyXG5sZXQgcHJvbWlzZTogUHJvbWlzZTxhbnk+XHJcbmNvbnN0IHF1ZXVlTWljcm90YXNrU2hpbSA9XHJcbiAgdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSAnZnVuY3Rpb24nXHJcbiAgICA/IHF1ZXVlTWljcm90YXNrLmJpbmQoXHJcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgID8gd2luZG93XHJcbiAgICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICA/IGdsb2JhbFxyXG4gICAgICAgICAgOiBnbG9iYWxUaGlzXHJcbiAgICAgIClcclxuICAgIDogLy8gcmV1c2UgcmVzb2x2ZWQgcHJvbWlzZSwgYW5kIGFsbG9jYXRlIGl0IGxhemlseVxyXG4gICAgICAoY2I6ICgpID0+IHZvaWQpID0+XHJcbiAgICAgICAgKHByb21pc2UgfHwgKHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKSkpLnRoZW4oY2IpLmNhdGNoKChlcnI6IGFueSkgPT5cclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJcclxuICAgICAgICAgIH0sIDApXHJcbiAgICAgICAgKVxyXG5cclxuY29uc3QgY3JlYXRlUXVldWVXaXRoVGltZXIgPSAodGltZW91dDogbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIChub3RpZnk6ICgpID0+IHZvaWQpID0+IHtcclxuICAgIHNldFRpbWVvdXQobm90aWZ5LCB0aW1lb3V0KVxyXG4gIH1cclxufVxyXG5cclxuLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHdvbid0IGV4aXN0IGluIFNTUiBlbnZpcm9ubWVudHMuXHJcbi8vIEZhbGwgYmFjayB0byBhIHZhZ3VlIGFwcHJveGltYXRpb24ganVzdCB0byBrZWVwIGZyb20gZXJyb3JpbmcuXHJcbmNvbnN0IHJBRiA9XHJcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICA6IGNyZWF0ZVF1ZXVlV2l0aFRpbWVyKDEwKVxyXG5cclxuZXhwb3J0IHR5cGUgQXV0b0JhdGNoT3B0aW9ucyA9XHJcbiAgfCB7IHR5cGU6ICd0aWNrJyB9XHJcbiAgfCB7IHR5cGU6ICd0aW1lcic7IHRpbWVvdXQ6IG51bWJlciB9XHJcbiAgfCB7IHR5cGU6ICdyYWYnIH1cclxuICB8IHsgdHlwZTogJ2NhbGxiYWNrJzsgcXVldWVOb3RpZmljYXRpb246IChub3RpZnk6ICgpID0+IHZvaWQpID0+IHZvaWQgfVxyXG5cclxuLyoqXHJcbiAqIEEgUmVkdXggc3RvcmUgZW5oYW5jZXIgdGhhdCB3YXRjaGVzIGZvciBcImxvdy1wcmlvcml0eVwiIGFjdGlvbnMsIGFuZCBkZWxheXNcclxuICogbm90aWZ5aW5nIHN1YnNjcmliZXJzIHVudGlsIGVpdGhlciB0aGUgcXVldWVkIGNhbGxiYWNrIGV4ZWN1dGVzIG9yIHRoZVxyXG4gKiBuZXh0IFwic3RhbmRhcmQtcHJpb3JpdHlcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZC5cclxuICpcclxuICogVGhpcyBhbGxvd3MgZGlzcGF0Y2hpbmcgbXVsdGlwbGUgXCJsb3ctcHJpb3JpdHlcIiBhY3Rpb25zIGluIGEgcm93IHdpdGggb25seVxyXG4gKiBhIHNpbmdsZSBzdWJzY3JpYmVyIG5vdGlmaWNhdGlvbiB0byB0aGUgVUkgYWZ0ZXIgdGhlIHNlcXVlbmNlIG9mIGFjdGlvbnNcclxuICogaXMgZmluaXNoZWQsIHRodXMgaW1wcm92aW5nIFVJIHJlLXJlbmRlciBwZXJmb3JtYW5jZS5cclxuICpcclxuICogV2F0Y2hlcyBmb3IgYWN0aW9ucyB3aXRoIHRoZSBgYWN0aW9uLm1ldGFbU0hPVUxEX0FVVE9CQVRDSF1gIGF0dHJpYnV0ZS5cclxuICogVGhpcyBjYW4gYmUgYWRkZWQgdG8gYGFjdGlvbi5tZXRhYCBtYW51YWxseSwgb3IgYnkgdXNpbmcgdGhlXHJcbiAqIGBwcmVwYXJlQXV0b0JhdGNoZWRgIGhlbHBlci5cclxuICpcclxuICogQnkgZGVmYXVsdCwgaXQgd2lsbCBxdWV1ZSBhIG5vdGlmaWNhdGlvbiBmb3IgdGhlIGVuZCBvZiB0aGUgZXZlbnQgbG9vcCB0aWNrLlxyXG4gKiBIb3dldmVyLCB5b3UgY2FuIHBhc3Mgc2V2ZXJhbCBvdGhlciBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgYmVoYXZpb3I6XHJcbiAqIC0gYHt0eXBlOiAndGljayd9OiBxdWV1ZXMgdXNpbmcgYHF1ZXVlTWljcm90YXNrYCAoZGVmYXVsdClcclxuICogLSBge3R5cGU6ICd0aW1lciwgdGltZW91dDogbnVtYmVyfWA6IHF1ZXVlcyB1c2luZyBgc2V0VGltZW91dGBcclxuICogLSBge3R5cGU6ICdyYWYnfWA6IHF1ZXVlcyB1c2luZyBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYFxyXG4gKiAtIGB7dHlwZTogJ2NhbGxiYWNrJywgcXVldWVOb3RpZmljYXRpb246IChub3RpZnk6ICgpID0+IHZvaWQpID0+IHZvaWR9OiBsZXRzIHlvdSBwcm92aWRlIHlvdXIgb3duIGNhbGxiYWNrXHJcbiAqXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYXV0b0JhdGNoRW5oYW5jZXIgPVxyXG4gIChvcHRpb25zOiBBdXRvQmF0Y2hPcHRpb25zID0geyB0eXBlOiAncmFmJyB9KTogU3RvcmVFbmhhbmNlciA9PlxyXG4gIChuZXh0KSA9PlxyXG4gICguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zdCBzdG9yZSA9IG5leHQoLi4uYXJncylcclxuXHJcbiAgICBsZXQgbm90aWZ5aW5nID0gdHJ1ZVxyXG4gICAgbGV0IHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gZmFsc2VcclxuICAgIGxldCBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZVxyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxyXG5cclxuICAgIGNvbnN0IHF1ZXVlQ2FsbGJhY2sgPVxyXG4gICAgICBvcHRpb25zLnR5cGUgPT09ICd0aWNrJ1xyXG4gICAgICAgID8gcXVldWVNaWNyb3Rhc2tTaGltXHJcbiAgICAgICAgOiBvcHRpb25zLnR5cGUgPT09ICdyYWYnXHJcbiAgICAgICAgPyByQUZcclxuICAgICAgICA6IG9wdGlvbnMudHlwZSA9PT0gJ2NhbGxiYWNrJ1xyXG4gICAgICAgID8gb3B0aW9ucy5xdWV1ZU5vdGlmaWNhdGlvblxyXG4gICAgICAgIDogY3JlYXRlUXVldWVXaXRoVGltZXIob3B0aW9ucy50aW1lb3V0KVxyXG5cclxuICAgIGNvbnN0IG5vdGlmeUxpc3RlbmVycyA9ICgpID0+IHtcclxuICAgICAgLy8gV2UncmUgcnVubmluZyBhdCB0aGUgZW5kIG9mIHRoZSBldmVudCBsb29wIHRpY2suXHJcbiAgICAgIC8vIFJ1biB0aGUgcmVhbCBsaXN0ZW5lciBjYWxsYmFja3MgdG8gYWN0dWFsbHkgdXBkYXRlIHRoZSBVSS5cclxuICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2VcclxuICAgICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XHJcbiAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSBmYWxzZVxyXG4gICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsKSA9PiBsKCkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RvcmUsIHtcclxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIGJhc2UgYHN0b3JlLnN1YnNjcmliZWAgbWV0aG9kIHRvIGtlZXAgb3JpZ2luYWwgbGlzdGVuZXJzXHJcbiAgICAgIC8vIGZyb20gcnVubmluZyBpZiB3ZSdyZSBkZWxheWluZyBub3RpZmljYXRpb25zXHJcbiAgICAgIHN1YnNjcmliZShsaXN0ZW5lcjogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIC8vIEVhY2ggd3JhcHBlZCBsaXN0ZW5lciB3aWxsIG9ubHkgY2FsbCB0aGUgcmVhbCBsaXN0ZW5lciBpZlxyXG4gICAgICAgIC8vIHRoZSBgbm90aWZ5aW5nYCBmbGFnIGlzIGN1cnJlbnRseSBhY3RpdmUgd2hlbiBpdCdzIGNhbGxlZC5cclxuICAgICAgICAvLyBUaGlzIGxldHMgdGhlIGJhc2Ugc3RvcmUgd29yayBhcyBub3JtYWwsIHdoaWxlIHRoZSBhY3R1YWwgVUlcclxuICAgICAgICAvLyB1cGRhdGUgYmVjb21lcyBjb250cm9sbGVkIGJ5IHRoaXMgZW5oYW5jZXIuXHJcbiAgICAgICAgY29uc3Qgd3JhcHBlZExpc3RlbmVyOiB0eXBlb2YgbGlzdGVuZXIgPSAoKSA9PiBub3RpZnlpbmcgJiYgbGlzdGVuZXIoKVxyXG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKHdyYXBwZWRMaXN0ZW5lcilcclxuICAgICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKVxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICB1bnN1YnNjcmliZSgpXHJcbiAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIGJhc2UgYHN0b3JlLmRpc3BhdGNoYCBtZXRob2Qgc28gdGhhdCB3ZSBjYW4gY2hlY2sgYWN0aW9uc1xyXG4gICAgICAvLyBmb3IgdGhlIGBzaG91bGRBdXRvQmF0Y2hgIGZsYWcgYW5kIGRldGVybWluZSBpZiBiYXRjaGluZyBpcyBhY3RpdmVcclxuICAgICAgZGlzcGF0Y2goYWN0aW9uOiBhbnkpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgLy8gSWYgdGhlIGFjdGlvbiBkb2VzIF9ub3RfIGhhdmUgdGhlIGBzaG91bGRBdXRvQmF0Y2hgIGZsYWcsXHJcbiAgICAgICAgICAvLyB3ZSByZXN1bWUvY29udGludWUgbm9ybWFsIG5vdGlmeS1hZnRlci1lYWNoLWRpc3BhdGNoIGJlaGF2aW9yXHJcbiAgICAgICAgICBub3RpZnlpbmcgPSAhYWN0aW9uPy5tZXRhPy5bU0hPVUxEX0FVVE9CQVRDSF1cclxuICAgICAgICAgIC8vIElmIGEgYG5vdGlmeUxpc3RlbmVyc2AgbWljcm90YXNrIHdhcyBxdWV1ZWQsIHlvdSBjYW4ndCBjYW5jZWwgaXQuXHJcbiAgICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzZXQgYSBmbGFnIHNvIHRoYXQgaXQncyBhIG5vLW9wIHdoZW4gaXQgZG9lcyBydW5cclxuICAgICAgICAgIHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gIW5vdGlmeWluZ1xyXG4gICAgICAgICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XHJcbiAgICAgICAgICAgIC8vIFdlJ3ZlIHNlZW4gYXQgbGVhc3QgMSBhY3Rpb24gd2l0aCBgU0hPVUxEX0FVVE9CQVRDSGAuIFRyeSB0byBxdWV1ZVxyXG4gICAgICAgICAgICAvLyBhIG1pY3JvdGFzayB0byBub3RpZnkgbGlzdGVuZXJzIGF0IHRoZSBlbmQgb2YgdGhlIGV2ZW50IGxvb3AgdGljay5cclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIG9ubHkgZW5xdWV1ZSB0aGlzIF9vbmNlXyBwZXIgdGljay5cclxuICAgICAgICAgICAgaWYgKCFub3RpZmljYXRpb25RdWV1ZWQpIHtcclxuICAgICAgICAgICAgICBub3RpZmljYXRpb25RdWV1ZWQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgcXVldWVDYWxsYmFjayhub3RpZnlMaXN0ZW5lcnMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIEdvIGFoZWFkIGFuZCBwcm9jZXNzIHRoZSBhY3Rpb24gYXMgdXN1YWwsIGluY2x1ZGluZyByZWR1Y2Vycy5cclxuICAgICAgICAgIC8vIElmIG5vcm1hbCBub3RpZmljYXRpb24gYmVoYXZpb3IgaXMgZW5hYmxlZCwgdGhlIHN0b3JlIHdpbGwgbm90aWZ5XHJcbiAgICAgICAgICAvLyBhbGwgb2YgaXRzIG93biBsaXN0ZW5lcnMsIGFuZCB0aGUgd3JhcHBlciBjYWxsYmFja3MgYWJvdmUgd2lsbFxyXG4gICAgICAgICAgLy8gc2VlIGBub3RpZnlpbmdgIGlzIHRydWUgYW5kIHBhc3Mgb24gdG8gdGhlIHJlYWwgbGlzdGVuZXIgY2FsbGJhY2tzLlxyXG4gICAgICAgICAgLy8gSWYgd2UncmUgXCJiYXRjaGluZ1wiIGJlaGF2aW9yLCB0aGVuIHRoZSB3cmFwcGVkIGNhbGxiYWNrcyB3aWxsXHJcbiAgICAgICAgICAvLyBiYWlsIG91dCwgY2F1c2luZyB0aGUgYmFzZSBzdG9yZSBub3RpZmljYXRpb24gYmVoYXZpb3IgdG8gYmUgbm8tb3BzLlxyXG4gICAgICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKGFjdGlvbilcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgLy8gQXNzdW1lIHdlJ3JlIGJhY2sgdG8gbm9ybWFsIGJlaGF2aW9yIGFmdGVyIGVhY2ggYWN0aW9uXHJcbiAgICAgICAgICBub3RpZnlpbmcgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgfSlcclxuICB9XHJcbiJdLCJuYW1lcyI6WyJlbmFibGVFUzUiLCJkZWZhdWx0IiwiZGVmYXVsdDIiLCJjdXJyZW50IiwiY3VycmVudDIiLCJmcmVlemUiLCJvcmlnaW5hbCIsImlzRHJhZnQiLCJpc0RyYWZ0NCIsImNyZWF0ZVNlbGVjdG9yIiwiY3JlYXRlU2VsZWN0b3IyIiwiY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzZWxlY3RvciIsImFwcGx5Iiwid3JhcHBlZFNlbGVjdG9yIiwidmFsdWUiLCJyZXN0IiwiX19zcHJlYWRBcnJheSIsImNyZWF0ZVN0b3JlIiwiY29tcG9zZSIsImNvbXBvc2UyIiwiYXBwbHlNaWRkbGV3YXJlIiwiY29tYmluZVJlZHVjZXJzIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIndpbmRvdyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsImRldlRvb2xzRW5oYW5jZXIiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwibm9vcDIiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImJhc2VQcm90byIsInRodW5rTWlkZGxld2FyZSIsImNyZWF0ZU5leHRTdGF0ZSIsImlzRHJhZnRhYmxlIiwiZ2V0VGltZU1lYXN1cmVVdGlscyIsIm1heERlbGF5IiwiZm5OYW1lIiwiZWxhcHNlZCIsIm1lYXN1cmVUaW1lIiwiZm4iLCJzdGFydGVkIiwiRGF0ZSIsIm5vdyIsImZpbmlzaGVkIiwid2FybklmRXhjZWVkZWQiLCJjb25zb2xlIiwid2FybiIsIk1pZGRsZXdhcmVBcnJheSIsIl9zdXBlciIsIl9fZXh0ZW5kcyIsIl90aGlzIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJkZWZpbmVQcm9wZXJ0eSIsIlN5bWJvbCIsInNwZWNpZXMiLCJnZXQiLCJjb25jYXQiLCJhcnIiLCJwcmVwZW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiYmluZCIsIkVuaGFuY2VyQXJyYXkiLCJmcmVlemVEcmFmdGFibGUiLCJ2YWwiLCJpc1Byb2R1Y3Rpb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcmVmaXgiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJzdHJpbmdpZnkiLCJvYmoiLCJzZXJpYWxpemVyIiwiaW5kZW50IiwiZGVjeWNsZXIiLCJKU09OIiwiZ2V0U2VyaWFsaXplIiwic3RhY2siLCJrZXlzIiwiXyIsInNsaWNlIiwiaW5kZXhPZiIsImpvaW4iLCJrZXkiLCJ0aGlzUG9zIiwic3BsaWNlIiwicHVzaCIsIkluZmluaXR5IiwiY2FsbCIsImlzSW1tdXRhYmxlRGVmYXVsdCIsImlzRnJvemVuIiwidHJhY2tGb3JNdXRhdGlvbnMiLCJpc0ltbXV0YWJsZSIsImlnbm9yZVBhdGhzIiwidHJhY2tlZFByb3BlcnRpZXMiLCJ0cmFja1Byb3BlcnRpZXMiLCJkZXRlY3RNdXRhdGlvbnMiLCJwYXRoIiwidHJhY2tlZCIsImNoaWxkcmVuIiwiY2hpbGRQYXRoIiwiaWdub3JlZFBhdGhzIiwidHJhY2tlZFByb3BlcnR5Iiwic2FtZVBhcmVudFJlZiIsInByZXZPYmoiLCJzYW1lUmVmIiwiTnVtYmVyIiwiaXNOYU4iLCJ3YXNNdXRhdGVkIiwia2V5c1RvRGV0ZWN0IiwiaGFzSWdub3JlZFBhdGhzIiwibmVzdGVkUGF0aCIsImhhc01hdGNoZXMiLCJzb21lIiwiaWdub3JlZCIsIlJlZ0V4cCIsInRlc3QiLCJyZXN1bHQiLCJjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJvcHRpb25zIiwibmV4dCIsImFjdGlvbiIsIl9jIiwiX2QiLCJ3YXJuQWZ0ZXIiLCJpZ25vcmUiLCJ0cmFjayIsImdldFN0YXRlIiwic3RhdGUiLCJ0cmFja2VyIiwibWVhc3VyZVV0aWxzIiwiZGlzcGF0Y2hlZEFjdGlvbiIsImlzUGxhaW4iLCJ0eXBlIiwiZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlIiwiaXNTZXJpYWxpemFibGUiLCJnZXRFbnRyaWVzIiwiY2FjaGUiLCJmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSIsImtleVBhdGgiLCJoYXMiLCJlbnRyaWVzIiwibmVzdGVkVmFsdWUiLCJlbnRyaWVzXzEiLCJpc05lc3RlZEZyb3plbiIsImFkZCIsInZhbHVlcyIsImNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSIsImlnbm9yZWRBY3Rpb25zIiwiX2UiLCJpZ25vcmVkQWN0aW9uUGF0aHMiLCJfZiIsIl9nIiwiX2giLCJpZ25vcmVTdGF0ZSIsIl9qIiwiaWdub3JlQWN0aW9ucyIsIl9rIiwiZGlzYWJsZUNhY2hlIiwiV2Vha1NldCIsInN0b3JlQVBJIiwiZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSIsImVycm9yIiwiZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlIiwiaXNCb29sZWFuIiwieCIsImN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsInRodW5rIiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsIm1pZGRsZXdhcmVBcnJheSIsIndpdGhFeHRyYUFyZ3VtZW50IiwiZXh0cmFBcmd1bWVudCIsImltbXV0YWJsZU9wdGlvbnMiLCJ1bnNoaWZ0Iiwic2VyaWFsaXphYmxlT3B0aW9ucyIsIklTX1BST0RVQ1RJT04iLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJtaWRkbGV3YXJlIiwiZGV2VG9vbHMiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VycyIsInJvb3RSZWR1Y2VyIiwiZmluYWxNaWRkbGV3YXJlIiwiaXRlbSIsIm1pZGRsZXdhcmVFbmhhbmNlciIsImZpbmFsQ29tcG9zZSIsIl9fc3ByZWFkVmFsdWVzIiwidHJhY2UiLCJkZWZhdWx0RW5oYW5jZXJzIiwic3RvcmVFbmhhbmNlcnMiLCJjb21wb3NlZEVuaGFuY2VyIiwiY3JlYXRlQWN0aW9uIiwicHJlcGFyZUFjdGlvbiIsImFjdGlvbkNyZWF0b3IiLCJwcmVwYXJlZCIsInBheWxvYWQiLCJtZXRhIiwidG9TdHJpbmciLCJtYXRjaCIsImlzQWN0aW9uIiwiaXNGU0EiLCJldmVyeSIsImlzVmFsaWRLZXkiLCJnZXRUeXBlIiwiY3JlYXRlTmV4dFN0YXRlMiIsImlzRHJhZnQyIiwiaXNEcmFmdGFibGUyIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJidWlsZGVyQ2FsbGJhY2siLCJhY3Rpb25zTWFwIiwiYWN0aW9uTWF0Y2hlcnMiLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJhZGRNYXRjaGVyIiwibWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiaXNTdGF0ZUZ1bmN0aW9uIiwiaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiIsImNyZWF0ZVJlZHVjZXIiLCJpbml0aWFsU3RhdGUiLCJtYXBPckJ1aWxkZXJDYWxsYmFjayIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsImdldEluaXRpYWxTdGF0ZSIsImZyb3plbkluaXRpYWxTdGF0ZV8xIiwiY2FzZVJlZHVjZXJzIiwiZmlsdGVyIiwibWFwIiwicmVkdWNlcjIiLCJjciIsInJlZHVjZSIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsImRyYWZ0IiwiaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIiLCJnZXRUeXBlMiIsImFjdGlvbktleSIsImNyZWF0ZVNsaWNlIiwibmFtZSIsInJlZHVjZXJzIiwicmVkdWNlck5hbWVzIiwic2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSIsImFjdGlvbkNyZWF0b3JzIiwiZm9yRWFjaCIsInJlZHVjZXJOYW1lIiwibWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUiLCJwcmVwYXJlQ2FsbGJhY2siLCJwcmVwYXJlIiwiYnVpbGRSZWR1Y2VyIiwiZXh0cmFSZWR1Y2VycyIsImZpbmFsQ2FzZVJlZHVjZXJzIiwiYWN0aW9uTWF0Y2hlcnNfMSIsIm0iLCJfcmVkdWNlciIsImFjdGlvbnMiLCJnZXRJbml0aWFsRW50aXR5U3RhdGUiLCJpZHMiLCJlbnRpdGllcyIsImNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkiLCJhZGRpdGlvbmFsU3RhdGUiLCJhc3NpZ24iLCJjcmVhdGVTZWxlY3RvcnNGYWN0b3J5IiwiZ2V0U2VsZWN0b3JzIiwic2VsZWN0U3RhdGUiLCJzZWxlY3RJZHMiLCJzZWxlY3RFbnRpdGllcyIsInNlbGVjdEFsbCIsImlkIiwic2VsZWN0SWQiLCJzZWxlY3RCeUlkIiwic2VsZWN0VG90YWwiLCJzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMiLCJjcmVhdGVOZXh0U3RhdGUzIiwiaXNEcmFmdDMiLCJjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IiLCJtdXRhdG9yIiwib3BlcmF0b3IiLCJjcmVhdGVTdGF0ZU9wZXJhdG9yIiwib3BlcmF0aW9uIiwiYXJnIiwiaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQiLCJhcmcyIiwicnVuTXV0YXRvciIsInNlbGVjdElkVmFsdWUiLCJlbnRpdHkiLCJlbnN1cmVFbnRpdGllc0FycmF5Iiwic3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyIsIm5ld0VudGl0aWVzIiwiYWRkZWQiLCJ1cGRhdGVkIiwibmV3RW50aXRpZXNfMSIsImNoYW5nZXMiLCJjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlciIsImFkZE9uZU11dGFibHkiLCJhZGRNYW55TXV0YWJseSIsIm5ld0VudGl0aWVzXzIiLCJzZXRPbmVNdXRhYmx5Iiwic2V0TWFueU11dGFibHkiLCJuZXdFbnRpdGllc18zIiwic2V0QWxsTXV0YWJseSIsInJlbW92ZU9uZU11dGFibHkiLCJyZW1vdmVNYW55TXV0YWJseSIsImRpZE11dGF0ZSIsInJlbW92ZUFsbE11dGFibHkiLCJ0YWtlTmV3S2V5IiwidXBkYXRlIiwib3JpZ2luYWwyIiwibmV3S2V5IiwiaGFzTmV3S2V5IiwidXBkYXRlT25lTXV0YWJseSIsInVwZGF0ZU1hbnlNdXRhYmx5IiwidXBkYXRlcyIsIm5ld0tleXMiLCJ1cGRhdGVzUGVyRW50aXR5IiwiZGlkTXV0YXRlRW50aXRpZXMiLCJkaWRNdXRhdGVJZHMiLCJ1cHNlcnRPbmVNdXRhYmx5IiwidXBzZXJ0TWFueU11dGFibHkiLCJyZW1vdmVBbGwiLCJhZGRPbmUiLCJhZGRNYW55Iiwic2V0T25lIiwic2V0TWFueSIsInNldEFsbCIsInVwZGF0ZU9uZSIsInVwZGF0ZU1hbnkiLCJ1cHNlcnRPbmUiLCJ1cHNlcnRNYW55IiwicmVtb3ZlT25lIiwicmVtb3ZlTWFueSIsImNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlciIsInNvcnQiLCJtb2RlbHMiLCJtb2RlbCIsIm1lcmdlIiwiYXBwbGllZFVwZGF0ZXMiLCJ1cGRhdGVzXzEiLCJuZXdJZCIsInJlc29ydEVudGl0aWVzIiwiYXJlQXJyYXlzRXF1YWwiLCJhIiwiYiIsImkiLCJhbGxFbnRpdGllcyIsIm5ld1NvcnRlZElkcyIsImNyZWF0ZUVudGl0eUFkYXB0ZXIiLCJzb3J0Q29tcGFyZXIiLCJpbnN0YW5jZSIsInN0YXRlRmFjdG9yeSIsInNlbGVjdG9yc0ZhY3RvcnkiLCJzdGF0ZUFkYXB0ZXIiLCJ1cmxBbHBoYWJldCIsIm5hbm9pZCIsInNpemUiLCJNYXRoIiwicmFuZG9tIiwiY29tbW9uUHJvcGVydGllcyIsIlJlamVjdFdpdGhWYWx1ZSIsIkZ1bGZpbGxXaXRoTWV0YSIsIm1pbmlTZXJpYWxpemVFcnJvciIsInNpbXBsZUVycm9yIiwiY29tbW9uUHJvcGVydGllc18xIiwicHJvcGVydHkiLCJTdHJpbmciLCJjcmVhdGVBc3luY1RodW5rIiwiY3JlYXRlQXN5bmNUaHVuazIiLCJ0eXBlUHJlZml4IiwicGF5bG9hZENyZWF0b3IiLCJmdWxmaWxsZWQiLCJyZXF1ZXN0SWQiLCJfX3NwcmVhZFByb3BzIiwicmVxdWVzdFN0YXR1cyIsInBlbmRpbmciLCJyZWplY3RlZCIsInNlcmlhbGl6ZUVycm9yIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJhYm9ydGVkIiwiZGlzcGxheWVkV2FybmluZyIsIkFDIiwiQWJvcnRDb250cm9sbGVyIiwiY2xhc3NfMSIsInNpZ25hbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50Iiwib25hYm9ydCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFzb24iLCJ0aHJvd0lmQWJvcnRlZCIsImFib3J0IiwiaW5mbyIsImRpc3BhdGNoIiwiZXh0cmEiLCJpZEdlbmVyYXRvciIsImFib3J0Q29udHJvbGxlciIsImFib3J0UmVhc29uIiwicHJvbWlzZTIiLCJfX2FzeW5jIiwiY29uZGl0aW9uUmVzdWx0IiwiX2EiLCJpc1RoZW5hYmxlIiwic2VudCIsImFib3J0ZWRQcm9taXNlIiwiUHJvbWlzZSIsInJlamVjdCIsIl9iIiwiZ2V0UGVuZGluZ01ldGEiLCJyYWNlIiwicmVzb2x2ZSIsInJlamVjdFdpdGhWYWx1ZSIsImZ1bGZpbGxXaXRoVmFsdWUiLCJ0aGVuIiwiZmluYWxBY3Rpb24iLCJlcnJfMSIsInNraXBEaXNwYXRjaCIsImRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uIiwidW53cmFwIiwidW53cmFwUmVzdWx0Iiwid2l0aFR5cGVzIiwiaGFzTWF0Y2hGdW5jdGlvbiIsInYiLCJtYXRjaGVzIiwiaXNBbnlPZiIsIm1hdGNoZXJzIiwiaXNBbGxPZiIsImhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhIiwidmFsaWRTdGF0dXMiLCJoYXNWYWxpZFJlcXVlc3RJZCIsImhhc1ZhbGlkUmVxdWVzdFN0YXR1cyIsImlzQXN5bmNUaHVua0FycmF5IiwiaXNQZW5kaW5nIiwiYXN5bmNUaHVua3MiLCJhc3luY1RodW5rIiwiY29tYmluZWRNYXRjaGVyIiwiaXNSZWplY3RlZCIsImlzUmVqZWN0ZWRXaXRoVmFsdWUiLCJoYXNGbGFnIiwiaXNGdWxmaWxsZWQiLCJpc0FzeW5jVGh1bmtBY3Rpb24iLCJhc3luY1RodW5rc18xIiwiYXNzZXJ0RnVuY3Rpb24iLCJmdW5jIiwiZXhwZWN0ZWQiLCJUeXBlRXJyb3IiLCJub29wIiwiY2F0Y2hSZWplY3Rpb24iLCJvbkVycm9yIiwiY2F0Y2giLCJhZGRBYm9ydFNpZ25hbExpc3RlbmVyIiwiYWJvcnRTaWduYWwiLCJjYWxsYmFjayIsIm9uY2UiLCJhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidGFzayIsImxpc3RlbmVyIiwiY29tcGxldGVkIiwiY2FuY2VsbGVkIiwidGFza0NhbmNlbGxlZCIsInRhc2tDb21wbGV0ZWQiLCJsaXN0ZW5lckNhbmNlbGxlZCIsImxpc3RlbmVyQ29tcGxldGVkIiwiVGFza0Fib3J0RXJyb3IiLCJjb2RlIiwidmFsaWRhdGVBY3RpdmUiLCJyYWNlV2l0aFNpZ25hbCIsImNsZWFudXAiLCJub3RpZnlSZWplY3Rpb24iLCJmaW5hbGx5IiwicnVuVGFzayIsInRhc2syIiwiY2xlYW5VcCIsInN0YXR1cyIsImVycm9yXzEiLCJjcmVhdGVQYXVzZSIsIm91dHB1dCIsImNyZWF0ZURlbGF5IiwicGF1c2UiLCJ0aW1lb3V0TXMiLCJzZXRUaW1lb3V0IiwiSU5URVJOQUxfTklMX1RPS0VOIiwiYWxtIiwiY3JlYXRlRm9yayIsInBhcmVudEFib3J0U2lnbmFsIiwibGlua0NvbnRyb2xsZXJzIiwiY29udHJvbGxlciIsInRhc2tFeGVjdXRvciIsImNoaWxkQWJvcnRDb250cm9sbGVyIiwiZGVsYXkiLCJyZXN1bHQyIiwiY2FuY2VsIiwiY3JlYXRlVGFrZVBhdHRlcm4iLCJzdGFydExpc3RlbmluZyIsInRha2UiLCJwcmVkaWNhdGUiLCJ0aW1lb3V0IiwidW5zdWJzY3JpYmUiLCJ0dXBsZVByb21pc2UiLCJzdG9wTGlzdGVuaW5nIiwiZWZmZWN0IiwibGlzdGVuZXJBcGkiLCJnZXRPcmlnaW5hbFN0YXRlIiwicHJvbWlzZXMiLCJnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tIiwiY3JlYXRlTGlzdGVuZXJFbnRyeSIsImVudHJ5IiwiU2V0IiwiY2FuY2VsQWN0aXZlTGlzdGVuZXJzIiwiY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUiLCJsaXN0ZW5lck1hcCIsImNsZWFyIiwic2FmZWx5Tm90aWZ5RXJyb3IiLCJlcnJvckhhbmRsZXIiLCJlcnJvclRvTm90aWZ5IiwiZXJyb3JJbmZvIiwiZXJyb3JIYW5kbGVyRXJyb3IiLCJhZGRMaXN0ZW5lciIsImNsZWFyQWxsTGlzdGVuZXJzIiwicmVtb3ZlTGlzdGVuZXIiLCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwiY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlIiwibWlkZGxld2FyZU9wdGlvbnMiLCJNYXAiLCJpbnNlcnRFbnRyeSIsImRlbGV0ZSIsInNldCIsImNhbmNlbE9wdGlvbnMiLCJjYW5jZWxBY3RpdmUiLCJmaW5kTGlzdGVuZXJFbnRyeSIsImNvbXBhcmF0b3IiLCJmcm9tIiwiZXhpc3RpbmdFbnRyeSIsImVudHJ5MiIsIm1hdGNoUHJlZGljYXRlT3JUeXBlIiwibm90aWZ5TGlzdGVuZXIiLCJhcGkiLCJpbnRlcm5hbFRhc2tDb250cm9sbGVyIiwiQm9vbGVhbiIsImZvcmsiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lckVycm9yXzEiLCJyYWlzZWRCeSIsImNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlIiwib3JpZ2luYWxTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImxpc3RlbmVyRW50cmllcyIsImxpc3RlbmVyRW50cmllc18xIiwicnVuTGlzdGVuZXIiLCJwcmVkaWNhdGVFcnJvciIsImNsZWFyTGlzdGVuZXJzIiwiU0hPVUxEX0FVVE9CQVRDSCIsInByZXBhcmVBdXRvQmF0Y2hlZCIsInByb21pc2UiLCJxdWV1ZU1pY3JvdGFza1NoaW0iLCJxdWV1ZU1pY3JvdGFzayIsImdsb2JhbCIsImdsb2JhbFRoaXMiLCJjYiIsImVyciIsImNyZWF0ZVF1ZXVlV2l0aFRpbWVyIiwibm90aWZ5IiwickFGIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYXV0b0JhdGNoRW5oYW5jZXIiLCJzdG9yZSIsIm5vdGlmeWluZyIsInNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrIiwibm90aWZpY2F0aW9uUXVldWVkIiwibGlzdGVuZXJzIiwicXVldWVDYWxsYmFjayIsInF1ZXVlTm90aWZpY2F0aW9uIiwibm90aWZ5TGlzdGVuZXJzIiwibCIsImxpc3RlbmVyMiIsIndyYXBwZWRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1721\n')}}]);