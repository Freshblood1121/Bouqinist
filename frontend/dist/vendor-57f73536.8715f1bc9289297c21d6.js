"use strict";(self.webpackChunkelder_books_fe=self.webpackChunkelder_books_fe||[]).push([[700],{4008:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   d: () => (/* binding */ ClickAwayListener)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5466);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1433);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6728);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5923);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3823);\n'use client';\n\n\n\n\n\n// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/base-ui/react-click-away-listener/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/base-ui/react-click-away-listener/components-api/#click-away-listener)\n */\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const nodeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const activatedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const syntheticEventRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)(\n  // @ts-expect-error TODO upstream fix\n  children.ref, nodeRef);\n\n  // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n  const handleClickAway = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(nodeRef.current);\n\n    // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    }\n\n    // Do not act if user performed touchmove\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n    let insideDOM;\n\n    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains(\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  });\n\n  // Keep track of mouse/touch events that bubbled up through the portal.\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const childrenProps = {\n    ref: handleRef\n  };\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(nodeRef.current);\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, childrenProps)\n  });\n}\n false ? 0 : void 0;\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4008\n")},5134:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ FocusTrap)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5466);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1433);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5923);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3823);\n'use client';\n\n/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */\n\n\n\n\n\n// Inspired by https://github.com/focus-trap/tabbable\nconst candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'].join(',');\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  }\n\n  // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n  //  yet they are still part of the regular tab order; in FF, they get a default\n  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n  //  order, consider their tab index to be 0.\n  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {\n    return 0;\n  }\n  return node.tabIndex;\n}\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio') {\n    return false;\n  }\n  if (!node.name) {\n    return false;\n  }\n  const getRadio = selector => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n  return roving !== node;\n}\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {\n    return false;\n  }\n  return true;\n}\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node: node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);\n}\nfunction defaultIsEnabled() {\n  return true;\n}\n\n/**\n * Utility component that locks focus inside the component.\n *\n * Demos:\n *\n * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)\n *\n * API:\n *\n * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)\n */\nfunction FocusTrap(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const sentinelStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const sentinelEnd = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const nodeToRestore = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const reactFocusEventTarget = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n  const activated = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const rootRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  // @ts-expect-error TODO upstream fix\n  const handleRef = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)(children.ref, rootRef);\n  const lastKeydown = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(rootRef.current);\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (false) {}\n        rootRef.current.setAttribute('tabIndex', '-1');\n      }\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n    return () => {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE11 have a focus method.\n        // Once IE11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n        nodeToRestore.current = null;\n      }\n    };\n    // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open FocusTrap\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(rootRef.current);\n    const loopFocus = nativeEvent => {\n      lastKeydown.current = nativeEvent;\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      }\n\n      // Make sure the next tab starts from the right place.\n      // doc.activeElement refers to the origin.\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n        if (sentinelEnd.current) {\n          sentinelEnd.current.focus();\n        }\n      }\n    };\n    const contain = () => {\n      const rootElement = rootRef.current;\n\n      // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n      if (rootElement === null) {\n        return;\n      }\n      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      // The focus is already inside\n      if (rootElement.contains(doc.activeElement)) {\n        return;\n      }\n\n      // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)\n      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {\n        return;\n      }\n\n      // if the focus event is not coming from inside the children's react tree, reset the refs\n      if (doc.activeElement !== reactFocusEventTarget.current) {\n        reactFocusEventTarget.current = null;\n      } else if (reactFocusEventTarget.current !== null) {\n        return;\n      }\n      if (!activated.current) {\n        return;\n      }\n      let tabbable = [];\n      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n        tabbable = getTabbable(rootRef.current);\n      }\n\n      // one of the sentinel nodes was focused, so move the focus\n      // to the first/last tabbable element inside the focus trap\n      if (tabbable.length > 0) {\n        var _lastKeydown$current, _lastKeydown$current2;\n        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');\n        const focusNext = tabbable[0];\n        const focusPrevious = tabbable[tabbable.length - 1];\n        if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        }\n        // no tabbable elements in the trap focus or the focus was outside of the focus trap\n      } else {\n        rootElement.focus();\n      }\n    };\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true);\n\n    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n    const interval = setInterval(() => {\n      if (doc.activeElement && doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n  const onFocus = event => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const handleFocusSentinel = event => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n  };\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-testid\": \"sentinelStart\"\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-testid\": \"sentinelEnd\"\n    })]\n  });\n}\n false ? 0 : void 0;\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5134\n")},7138:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  r: () => (/* binding */ Popper)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(3123);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(7958);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(5466);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useForkRef/useForkRef.js\nvar useForkRef = __webpack_require__(1433);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js\nvar useEnhancedEffect = __webpack_require__(704);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js\nvar ownerDocument = __webpack_require__(5923);\n// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/popper.js + 53 modules\nvar lib_popper = __webpack_require__(2158);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/composeClasses/composeClasses.js\nvar composeClasses = __webpack_require__(635);\n// EXTERNAL MODULE: ./node_modules/@mui/base/Portal/Portal.js\nvar Portal = __webpack_require__(4357);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js\nvar generateUtilityClass = __webpack_require__(1662);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js\nvar generateUtilityClasses = __webpack_require__(8866);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/Popper/popperClasses.js\n\n\nfunction getPopperUtilityClass(slot) {\n  return (0,generateUtilityClass/* default */.Z)('MuiPopper', slot);\n}\nconst popperClasses = (0,generateUtilityClasses/* default */.Z)('MuiPopper', ['root']);\n// EXTERNAL MODULE: ./node_modules/@mui/base/utils/useSlotProps.js + 3 modules\nvar useSlotProps = __webpack_require__(8972);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(3823);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/utils/ClassNameConfigurator.js\n'use client';\n\n\n\nconst defaultContextValue = {\n  disableDefaultClasses: false\n};\nconst ClassNameConfiguratorContext = /*#__PURE__*/react.createContext(defaultContextValue);\n/**\n * @ignore - internal hook.\n *\n * Wraps the `generateUtilityClass` function and controls how the classes are generated.\n * Currently it only affects whether the classes are applied or not.\n *\n * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.\n */\nfunction useClassNamesOverride(generateUtilityClass) {\n  const {\n    disableDefaultClasses\n  } = react.useContext(ClassNameConfiguratorContext);\n  return slot => {\n    if (disableDefaultClasses) {\n      return '';\n    }\n    return generateUtilityClass(slot);\n  };\n}\n\n/**\n * Allows to configure the components within to not apply any built-in classes.\n */\nfunction ClassNameConfigurator(props) {\n  const {\n    disableDefaultClasses,\n    children\n  } = props;\n  const contextValue = React.useMemo(() => ({\n    disableDefaultClasses: disableDefaultClasses != null ? disableDefaultClasses : false\n  }), [disableDefaultClasses]);\n  return /*#__PURE__*/_jsx(ClassNameConfiguratorContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@mui/base/Popper/Popper.js\n'use client';\n\n\n\nconst _excluded = [\"anchorEl\", \"children\", \"direction\", \"disablePortal\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"slotProps\", \"slots\", \"TransitionProps\", \"ownerState\"],\n  _excluded2 = [\"anchorEl\", \"children\", \"container\", \"direction\", \"disablePortal\", \"keepMounted\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"style\", \"transition\", \"slotProps\", \"slots\"];\n\n\n\n\n\n\n\n\n\n\nfunction flipPlacement(placement, direction) {\n  if (direction === 'ltr') {\n    return placement;\n  }\n  switch (placement) {\n    case 'bottom-end':\n      return 'bottom-start';\n    case 'bottom-start':\n      return 'bottom-end';\n    case 'top-end':\n      return 'top-start';\n    case 'top-start':\n      return 'top-end';\n    default:\n      return placement;\n  }\n}\nfunction resolveAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\nfunction isHTMLElement(element) {\n  return element.nodeType !== undefined;\n}\nfunction isVirtualElement(element) {\n  return !isHTMLElement(element);\n}\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return (0,composeClasses/* default */.Z)(slots, useClassNamesOverride(getPopperUtilityClass));\n};\nconst defaultPopperOptions = {};\nconst PopperTooltip = /*#__PURE__*/react.forwardRef(function PopperTooltip(props, forwardedRef) {\n  var _slots$root;\n  const {\n      anchorEl,\n      children,\n      direction,\n      disablePortal,\n      modifiers,\n      open,\n      placement: initialPlacement,\n      popperOptions,\n      popperRef: popperRefProp,\n      slotProps = {},\n      slots = {},\n      TransitionProps\n      // @ts-ignore internal logic\n      // prevent from spreading to DOM, it can come from the parent component e.g. Select.\n    } = props,\n    other = (0,objectWithoutPropertiesLoose/* default */.Z)(props, _excluded);\n  const tooltipRef = react.useRef(null);\n  const ownRef = (0,useForkRef/* default */.Z)(tooltipRef, forwardedRef);\n  const popperRef = react.useRef(null);\n  const handlePopperRef = (0,useForkRef/* default */.Z)(popperRef, popperRefProp);\n  const handlePopperRefRef = react.useRef(handlePopperRef);\n  (0,useEnhancedEffect/* default */.Z)(() => {\n    handlePopperRefRef.current = handlePopperRef;\n  }, [handlePopperRef]);\n  react.useImperativeHandle(popperRefProp, () => popperRef.current, []);\n  const rtlPlacement = flipPlacement(initialPlacement, direction);\n  /**\n   * placement initialized from prop but can change during lifetime if modifiers.flip.\n   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior\n   */\n  const [placement, setPlacement] = react.useState(rtlPlacement);\n  const [resolvedAnchorElement, setResolvedAnchorElement] = react.useState(resolveAnchorEl(anchorEl));\n  react.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.forceUpdate();\n    }\n  });\n  react.useEffect(() => {\n    if (anchorEl) {\n      setResolvedAnchorElement(resolveAnchorEl(anchorEl));\n    }\n  }, [anchorEl]);\n  (0,useEnhancedEffect/* default */.Z)(() => {\n    if (!resolvedAnchorElement || !open) {\n      return undefined;\n    }\n    const handlePopperUpdate = data => {\n      setPlacement(data.placement);\n    };\n    if (false) {}\n    let popperModifiers = [{\n      name: 'preventOverflow',\n      options: {\n        altBoundary: disablePortal\n      }\n    }, {\n      name: 'flip',\n      options: {\n        altBoundary: disablePortal\n      }\n    }, {\n      name: 'onUpdate',\n      enabled: true,\n      phase: 'afterWrite',\n      fn: ({\n        state\n      }) => {\n        handlePopperUpdate(state);\n      }\n    }];\n    if (modifiers != null) {\n      popperModifiers = popperModifiers.concat(modifiers);\n    }\n    if (popperOptions && popperOptions.modifiers != null) {\n      popperModifiers = popperModifiers.concat(popperOptions.modifiers);\n    }\n    const popper = (0,lib_popper/* createPopper */.fi)(resolvedAnchorElement, tooltipRef.current, (0,esm_extends/* default */.Z)({\n      placement: rtlPlacement\n    }, popperOptions, {\n      modifiers: popperModifiers\n    }));\n    handlePopperRefRef.current(popper);\n    return () => {\n      popper.destroy();\n      handlePopperRefRef.current(null);\n    };\n  }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);\n  const childProps = {\n    placement: placement\n  };\n  if (TransitionProps !== null) {\n    childProps.TransitionProps = TransitionProps;\n  }\n  const classes = useUtilityClasses();\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'div';\n  const rootProps = (0,useSlotProps/* useSlotProps */.y)({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: 'tooltip',\n      ref: ownRef\n    },\n    ownerState: props,\n    className: classes.root\n  });\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Root, (0,esm_extends/* default */.Z)({}, rootProps, {\n    children: typeof children === 'function' ? children(childProps) : children\n  }));\n});\n\n/**\n * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.\n *\n * Demos:\n *\n * - [Popper](https://mui.com/base-ui/react-popper/)\n *\n * API:\n *\n * - [Popper API](https://mui.com/base-ui/react-popper/components-api/#popper)\n */\nconst Popper = /*#__PURE__*/react.forwardRef(function Popper(props, forwardedRef) {\n  const {\n      anchorEl,\n      children,\n      container: containerProp,\n      direction = 'ltr',\n      disablePortal = false,\n      keepMounted = false,\n      modifiers,\n      open,\n      placement = 'bottom',\n      popperOptions = defaultPopperOptions,\n      popperRef,\n      style,\n      transition = false,\n      slotProps = {},\n      slots = {}\n    } = props,\n    other = (0,objectWithoutPropertiesLoose/* default */.Z)(props, _excluded2);\n  const [exited, setExited] = react.useState(true);\n  const handleEnter = () => {\n    setExited(false);\n  };\n  const handleExited = () => {\n    setExited(true);\n  };\n  if (!keepMounted && !open && (!transition || exited)) {\n    return null;\n  }\n\n  // If the container prop is provided, use that\n  // If the anchorEl prop is provided, use its parent body element as the container\n  // If neither are provided let the Modal take care of choosing the container\n  let container;\n  if (containerProp) {\n    container = containerProp;\n  } else if (anchorEl) {\n    const resolvedAnchorEl = resolveAnchorEl(anchorEl);\n    container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? (0,ownerDocument/* default */.Z)(resolvedAnchorEl).body : (0,ownerDocument/* default */.Z)(null).body;\n  }\n  const display = !open && keepMounted && (!transition || exited) ? 'none' : undefined;\n  const transitionProps = transition ? {\n    in: open,\n    onEnter: handleEnter,\n    onExited: handleExited\n  } : undefined;\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Portal/* Portal */.h, {\n    disablePortal: disablePortal,\n    container: container,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(PopperTooltip, (0,esm_extends/* default */.Z)({\n      anchorEl: anchorEl,\n      direction: direction,\n      disablePortal: disablePortal,\n      modifiers: modifiers,\n      ref: forwardedRef,\n      open: transition ? !exited : open,\n      placement: placement,\n      popperOptions: popperOptions,\n      popperRef: popperRef,\n      slotProps: slotProps,\n      slots: slots\n    }, other, {\n      style: (0,esm_extends/* default */.Z)({\n        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.\n        position: 'fixed',\n        // Fix Popper.js display issue\n        top: 0,\n        left: 0,\n        display\n      }, style),\n      TransitionProps: transitionProps,\n      children: children\n    }))\n  });\n});\n false ? 0 : void 0;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7138\n")},4357:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   h: () => (/* binding */ Portal)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5466);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6116);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1433);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(704);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1750);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3823);\n\'use client\';\n\n\n\n\n\n\nfunction getContainer(container) {\n  return typeof container === \'function\' ? container() : container;\n}\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\nconst Portal = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function Portal(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  // @ts-expect-error TODO upstream fix\n  const handleRef = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(children) ? children.ref : null, forwardedRef);\n  (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(() => {\n    if (mountNode && !disablePortal) {\n      (0,_mui_utils__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(forwardedRef, mountNode);\n      return () => {\n        (0,_mui_utils__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(forwardedRef, null);\n      };\n    }\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, newProps);\n    }\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n      children: children\n    });\n  }\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: mountNode ? /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(children, mountNode) : mountNode\n  });\n});\n false ? 0 : void 0;\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM1Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxZQUFZOztBQUVtQjtBQUNPO0FBQ0g7QUFDb0k7QUFDdkg7QUFDaEQsU0FBU2EsWUFBWUEsQ0FBQ0MsU0FBUyxFQUFFO0VBQy9CLE9BQU8sT0FBT0EsU0FBUyxLQUFLLFVBQVUsR0FBR0EsU0FBUyxDQUFDLENBQUMsR0FBR0EsU0FBUztBQUNsRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxNQUFNLEdBQUcsYUFBYWYsNkNBQWdCLENBQUMsU0FBU2UsTUFBTUEsQ0FBQ0UsS0FBSyxFQUFFQyxZQUFZLEVBQUU7RUFDaEYsTUFBTTtJQUNKQyxRQUFRO0lBQ1JMLFNBQVM7SUFDVE0sYUFBYSxHQUFHO0VBQ2xCLENBQUMsR0FBR0gsS0FBSztFQUNULE1BQU0sQ0FBQ0ksU0FBUyxFQUFFQyxZQUFZLENBQUMsR0FBR3RCLDJDQUFjLENBQUMsSUFBSSxDQUFDO0VBQ3REO0VBQ0EsTUFBTXdCLFNBQVMsR0FBR2hCLCtEQUFVLEVBQUUsYUFBYVIsaURBQW9CLENBQUNtQixRQUFRLENBQUMsR0FBR0EsUUFBUSxDQUFDTyxHQUFHLEdBQUcsSUFBSSxFQUFFUixZQUFZLENBQUM7RUFDOUdaLCtEQUFpQixDQUFDLE1BQU07SUFDdEIsSUFBSSxDQUFDYyxhQUFhLEVBQUU7TUFDbEJFLFlBQVksQ0FBQ1QsWUFBWSxDQUFDQyxTQUFTLENBQUMsSUFBSWEsUUFBUSxDQUFDQyxJQUFJLENBQUM7SUFDeEQ7RUFDRixDQUFDLEVBQUUsQ0FBQ2QsU0FBUyxFQUFFTSxhQUFhLENBQUMsQ0FBQztFQUM5QmQsK0RBQWlCLENBQUMsTUFBTTtJQUN0QixJQUFJZSxTQUFTLElBQUksQ0FBQ0QsYUFBYSxFQUFFO01BQy9CViwrREFBTSxDQUFDUSxZQUFZLEVBQUVHLFNBQVMsQ0FBQztNQUMvQixPQUFPLE1BQU07UUFDWFgsK0RBQU0sQ0FBQ1EsWUFBWSxFQUFFLElBQUksQ0FBQztNQUM1QixDQUFDO0lBQ0g7SUFDQSxPQUFPVyxTQUFTO0VBQ2xCLENBQUMsRUFBRSxDQUFDWCxZQUFZLEVBQUVHLFNBQVMsRUFBRUQsYUFBYSxDQUFDLENBQUM7RUFDNUMsSUFBSUEsYUFBYSxFQUFFO0lBQ2pCLEtBQUssYUFBYXBCLGlEQUFvQixDQUFDbUIsUUFBUSxDQUFDLEVBQUU7TUFDaEQsTUFBTVcsUUFBUSxHQUFHO1FBQ2ZKLEdBQUcsRUFBRUY7TUFDUCxDQUFDO01BQ0QsT0FBTyxhQUFheEIsK0NBQWtCLENBQUNtQixRQUFRLEVBQUVXLFFBQVEsQ0FBQztJQUM1RDtJQUNBLE9BQU8sYUFBYWxCLHNEQUFJLENBQUNaLDJDQUFjLEVBQUU7TUFDdkNtQixRQUFRLEVBQUVBO0lBQ1osQ0FBQyxDQUFDO0VBQ0o7RUFDQSxPQUFPLGFBQWFQLHNEQUFJLENBQUNaLDJDQUFjLEVBQUU7SUFDdkNtQixRQUFRLEVBQUVFLFNBQVMsR0FBRyxhQUFhcEIsbURBQXFCLENBQUNrQixRQUFRLEVBQUVFLFNBQVMsQ0FBQyxHQUFHQTtFQUNsRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFDRmEsTUFBcUMsR0FBR25CLENBc0J2QyxHQUFHLEtBQUssQ0FBQztBQUNWLElBQUltQixLQUFxQyxFQUFFLEVBRzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1BvcnRhbC9Qb3J0YWwuanM/NjlhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3NldFJlZiBhcyBzZXRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG59XG5cbi8qKlxuICogUG9ydGFscyBwcm92aWRlIGEgZmlyc3QtY2xhc3Mgd2F5IHRvIHJlbmRlciBjaGlsZHJlbiBpbnRvIGEgRE9NIG5vZGVcbiAqIHRoYXQgZXhpc3RzIG91dHNpZGUgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbUG9ydGFsXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1wb3J0YWwvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtQb3J0YWwgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1wb3J0YWwvY29tcG9uZW50cy1hcGkvI3BvcnRhbClcbiAqL1xuY29uc3QgUG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9ydGFsKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2VcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbbW91bnROb2RlLCBzZXRNb3VudE5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETyB1cHN0cmVhbSBmaXhcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZiggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGNoaWxkcmVuLnJlZiA6IG51bGwsIGZvcndhcmRlZFJlZik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldE1vdW50Tm9kZShnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBkb2N1bWVudC5ib2R5KTtcbiAgICB9XG4gIH0sIFtjb250YWluZXIsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtb3VudE5vZGUgJiYgIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldFJlZihmb3J3YXJkZWRSZWYsIG1vdW50Tm9kZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBzZXRSZWYoZm9yd2FyZGVkUmVmLCBudWxsKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtmb3J3YXJkZWRSZWYsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgY29uc3QgbmV3UHJvcHMgPSB7XG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogbW91bnROb2RlID8gLyojX19QVVJFX18qL1JlYWN0RE9NLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgbW91bnROb2RlKSA6IG1vdW50Tm9kZVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9ydGFsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuZXhwb3J0IHsgUG9ydGFsIH07Il0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJQcm9wVHlwZXMiLCJleGFjdFByb3AiLCJIVE1MRWxlbWVudFR5cGUiLCJ1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCIsInVzZUVuaGFuY2VkRWZmZWN0IiwidW5zdGFibGVfdXNlRm9ya1JlZiIsInVzZUZvcmtSZWYiLCJ1bnN0YWJsZV9zZXRSZWYiLCJzZXRSZWYiLCJqc3giLCJfanN4IiwiZ2V0Q29udGFpbmVyIiwiY29udGFpbmVyIiwiUG9ydGFsIiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiY2hpbGRyZW4iLCJkaXNhYmxlUG9ydGFsIiwibW91bnROb2RlIiwic2V0TW91bnROb2RlIiwidXNlU3RhdGUiLCJoYW5kbGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsInJlZiIsImRvY3VtZW50IiwiYm9keSIsInVuZGVmaW5lZCIsIm5ld1Byb3BzIiwiY2xvbmVFbGVtZW50IiwiRnJhZ21lbnQiLCJjcmVhdGVQb3J0YWwiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJub2RlIiwib25lT2ZUeXBlIiwiZnVuYyIsImJvb2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4357\n')},3775:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ TextareaAutosize)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3123);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7958);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5466);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6116);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1433);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2413);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5712);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(704);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3823);\n'use client';\n\n\n\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\n\n\n\n\n\n\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\nconst TextareaAutosize = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(props, _excluded);\n  const {\n    current: isControlled\n  } = react__WEBPACK_IMPORTED_MODULE_0__.useRef(value != null);\n  const inputRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const handleRef = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(forwardedRef, inputRef);\n  const shadowRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const renders = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    outerHeightStyle: 0\n  });\n  const getUpdatedState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z)(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (false) {}\n    return prevState;\n  };\n  const syncHeight = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  const syncHeightWithFlushSync = () => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(() => {\n      setState(prevState => {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const handleResize = () => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSync();\n      }\n    };\n    const handleResizeWindow = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z)(() => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSync();\n      }\n    });\n    let resizeObserver;\n    const input = inputRef.current;\n    const containerWindow = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z)(input);\n    containerWindow.addEventListener('resize', handleResizeWindow);\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      handleResizeWindow.clear();\n      containerWindow.removeEventListener('resize', handleResizeWindow);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  (0,_mui_utils__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(() => {\n    syncHeight();\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"textarea\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__/* [\"default\"] */ .Z)({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n\n      rows: minRows,\n      style: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__/* [\"default\"] */ .Z)({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : undefined\n      }, style)\n    }, other)), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__/* [\"default\"] */ .Z)({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\n false ? 0 : void 0;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3775\n")},401:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  d: () => (/* binding */ useModal)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(3123);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(5466);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useForkRef/useForkRef.js\nvar useForkRef = __webpack_require__(1433);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js\nvar ownerDocument = __webpack_require__(5923);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js\nvar useEventCallback = __webpack_require__(6728);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/createChainedFunction.js\nvar createChainedFunction = __webpack_require__(5280);\n// EXTERNAL MODULE: ./node_modules/@mui/base/utils/extractEventHandlers.js\nvar extractEventHandlers = __webpack_require__(7531);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js\nvar ownerWindow = __webpack_require__(2413);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/getScrollbarSize.js\nvar getScrollbarSize = __webpack_require__(1467);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/unstable_useModal/ModalManager.js\n\n// Is a vertical scrollbar displayed?\nfunction isOverflowing(container) {\n  const doc = (0,ownerDocument/* default */.Z)(container);\n  if (doc.body === container) {\n    return (0,ownerWindow/* default */.Z)(container).innerWidth > doc.documentElement.clientWidth;\n  }\n  return container.scrollHeight > container.clientHeight;\n}\nfunction ariaHidden(element, show) {\n  if (show) {\n    element.setAttribute('aria-hidden', 'true');\n  } else {\n    element.removeAttribute('aria-hidden');\n  }\n}\nfunction getPaddingRight(element) {\n  return parseInt((0,ownerWindow/* default */.Z)(element).getComputedStyle(element).paddingRight, 10) || 0;\n}\nfunction isAriaHiddenForbiddenOnElement(element) {\n  // The forbidden HTML tags are the ones from ARIA specification that\n  // can be children of body and can't have aria-hidden attribute.\n  // cf. https://www.w3.org/TR/html-aria/#docconformance\n  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];\n  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;\n  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';\n  return isForbiddenTagName || isInputHidden;\n}\nfunction ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {\n  const blacklist = [mountElement, currentElement, ...elementsToExclude];\n  [].forEach.call(container.children, element => {\n    const isNotExcludedElement = blacklist.indexOf(element) === -1;\n    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);\n    if (isNotExcludedElement && isNotForbiddenElement) {\n      ariaHidden(element, show);\n    }\n  });\n}\nfunction findIndexOf(items, callback) {\n  let idx = -1;\n  items.some((item, index) => {\n    if (callback(item)) {\n      idx = index;\n      return true;\n    }\n    return false;\n  });\n  return idx;\n}\nfunction handleContainer(containerInfo, props) {\n  const restoreStyle = [];\n  const container = containerInfo.container;\n  if (!props.disableScrollLock) {\n    if (isOverflowing(container)) {\n      // Compute the size before applying overflow hidden to avoid any scroll jumps.\n      const scrollbarSize = (0,getScrollbarSize/* default */.Z)((0,ownerDocument/* default */.Z)(container));\n      restoreStyle.push({\n        value: container.style.paddingRight,\n        property: 'padding-right',\n        el: container\n      });\n      // Use computed style, here to get the real padding to add our scrollbar width.\n      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;\n\n      // .mui-fixed is a global helper.\n      const fixedElements = (0,ownerDocument/* default */.Z)(container).querySelectorAll('.mui-fixed');\n      [].forEach.call(fixedElements, element => {\n        restoreStyle.push({\n          value: element.style.paddingRight,\n          property: 'padding-right',\n          el: element\n        });\n        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;\n      });\n    }\n    let scrollContainer;\n    if (container.parentNode instanceof DocumentFragment) {\n      scrollContainer = (0,ownerDocument/* default */.Z)(container).body;\n    } else {\n      // Support html overflow-y: auto for scroll stability between pages\n      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/\n      const parent = container.parentElement;\n      const containerWindow = (0,ownerWindow/* default */.Z)(container);\n      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;\n    }\n\n    // Block the scroll even if no scrollbar is visible to account for mobile keyboard\n    // screensize shrink.\n    restoreStyle.push({\n      value: scrollContainer.style.overflow,\n      property: 'overflow',\n      el: scrollContainer\n    }, {\n      value: scrollContainer.style.overflowX,\n      property: 'overflow-x',\n      el: scrollContainer\n    }, {\n      value: scrollContainer.style.overflowY,\n      property: 'overflow-y',\n      el: scrollContainer\n    });\n    scrollContainer.style.overflow = 'hidden';\n  }\n  const restore = () => {\n    restoreStyle.forEach(({\n      value,\n      el,\n      property\n    }) => {\n      if (value) {\n        el.style.setProperty(property, value);\n      } else {\n        el.style.removeProperty(property);\n      }\n    });\n  };\n  return restore;\n}\nfunction getHiddenSiblings(container) {\n  const hiddenSiblings = [];\n  [].forEach.call(container.children, element => {\n    if (element.getAttribute('aria-hidden') === 'true') {\n      hiddenSiblings.push(element);\n    }\n  });\n  return hiddenSiblings;\n}\n/**\n * @ignore - do not document.\n *\n * Proper state management for containers and the modals in those containers.\n * Simplified, but inspired by react-overlay's ModalManager class.\n * Used by the Modal to ensure proper styling of containers.\n */\nclass ModalManager {\n  constructor() {\n    this.containers = void 0;\n    this.modals = void 0;\n    this.modals = [];\n    this.containers = [];\n  }\n  add(modal, container) {\n    let modalIndex = this.modals.indexOf(modal);\n    if (modalIndex !== -1) {\n      return modalIndex;\n    }\n    modalIndex = this.modals.length;\n    this.modals.push(modal);\n\n    // If the modal we are adding is already in the DOM.\n    if (modal.modalRef) {\n      ariaHidden(modal.modalRef, false);\n    }\n    const hiddenSiblings = getHiddenSiblings(container);\n    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);\n    const containerIndex = findIndexOf(this.containers, item => item.container === container);\n    if (containerIndex !== -1) {\n      this.containers[containerIndex].modals.push(modal);\n      return modalIndex;\n    }\n    this.containers.push({\n      modals: [modal],\n      container,\n      restore: null,\n      hiddenSiblings\n    });\n    return modalIndex;\n  }\n  mount(modal, props) {\n    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);\n    const containerInfo = this.containers[containerIndex];\n    if (!containerInfo.restore) {\n      containerInfo.restore = handleContainer(containerInfo, props);\n    }\n  }\n  remove(modal, ariaHiddenState = true) {\n    const modalIndex = this.modals.indexOf(modal);\n    if (modalIndex === -1) {\n      return modalIndex;\n    }\n    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);\n    const containerInfo = this.containers[containerIndex];\n    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);\n    this.modals.splice(modalIndex, 1);\n\n    // If that was the last modal in a container, clean up the container.\n    if (containerInfo.modals.length === 0) {\n      // The modal might be closed before it had the chance to be mounted in the DOM.\n      if (containerInfo.restore) {\n        containerInfo.restore();\n      }\n      if (modal.modalRef) {\n        // In case the modal wasn't in the DOM yet.\n        ariaHidden(modal.modalRef, ariaHiddenState);\n      }\n      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);\n      this.containers.splice(containerIndex, 1);\n    } else {\n      // Otherwise make sure the next top modal is visible to a screen reader.\n      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];\n      // as soon as a modal is adding its modalRef is undefined. it can't set\n      // aria-hidden because the dom element doesn't exist either\n      // when modal was unmounted before modalRef gets null\n      if (nextTop.modalRef) {\n        ariaHidden(nextTop.modalRef, false);\n      }\n    }\n    return modalIndex;\n  }\n  isTopModal(modal) {\n    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@mui/base/unstable_useModal/useModal.js\n'use client';\n\n\n\n\n\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\nfunction getHasTransition(children) {\n  return children ? children.props.hasOwnProperty('in') : false;\n}\n\n// A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\nconst defaultManager = new ModalManager();\n/**\n *\n * Demos:\n *\n * - [Modal](https://mui.com/base-ui/react-modal/#hook)\n *\n * API:\n *\n * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)\n */\nfunction useModal(parameters) {\n  const {\n    container,\n    disableEscapeKeyDown = false,\n    disableScrollLock = false,\n    // @ts-ignore internal logic - Base UI supports the manager as a prop too\n    manager = defaultManager,\n    closeAfterTransition = false,\n    onTransitionEnter,\n    onTransitionExited,\n    children,\n    onClose,\n    open,\n    rootRef\n  } = parameters;\n\n  // @ts-ignore internal logic\n  const modal = react.useRef({});\n  const mountNodeRef = react.useRef(null);\n  const modalRef = react.useRef(null);\n  const handleRef = (0,useForkRef/* default */.Z)(modalRef, rootRef);\n  const [exited, setExited] = react.useState(!open);\n  const hasTransition = getHasTransition(children);\n  let ariaHiddenProp = true;\n  if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {\n    ariaHiddenProp = false;\n  }\n  const getDoc = () => (0,ownerDocument/* default */.Z)(mountNodeRef.current);\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mount = mountNodeRef.current;\n    return modal.current;\n  };\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    });\n\n    // Fix a bug on Chrome where the scroll isn't initially 0.\n    if (modalRef.current) {\n      modalRef.current.scrollTop = 0;\n    }\n  };\n  const handleOpen = (0,useEventCallback/* default */.Z)(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer);\n\n    // The element was already mounted.\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = react.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = (0,useEventCallback/* default */.Z)(node => {\n    mountNodeRef.current = node;\n    if (!node) {\n      return;\n    }\n    if (open && isTopModal()) {\n      handleMounted();\n    } else if (modalRef.current) {\n      ariaHidden(modalRef.current, ariaHiddenProp);\n    }\n  });\n  const handleClose = react.useCallback(() => {\n    manager.remove(getModal(), ariaHiddenProp);\n  }, [ariaHiddenProp, manager]);\n  react.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  react.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviors like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n    if (!disableEscapeKeyDown) {\n      // Swallow the event, in case someone is listening for the escape key on the body.\n      event.stopPropagation();\n      if (onClose) {\n        onClose(event, 'escapeKeyDown');\n      }\n    }\n  };\n  const createHandleBackdropClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    const propsEventHandlers = (0,extractEventHandlers/* extractEventHandlers */._)(parameters);\n\n    // The custom event handlers shouldn't be spread on the root element\n    delete propsEventHandlers.onTransitionEnter;\n    delete propsEventHandlers.onTransitionExited;\n    const externalEventHandlers = (0,esm_extends/* default */.Z)({}, propsEventHandlers, otherHandlers);\n    return (0,esm_extends/* default */.Z)({\n      role: 'presentation'\n    }, externalEventHandlers, {\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      ref: handleRef\n    });\n  };\n  const getBackdropProps = (otherHandlers = {}) => {\n    const externalEventHandlers = otherHandlers;\n    return (0,esm_extends/* default */.Z)({\n      'aria-hidden': true\n    }, externalEventHandlers, {\n      onClick: createHandleBackdropClick(externalEventHandlers),\n      open\n    });\n  };\n  const getTransitionProps = () => {\n    const handleEnter = () => {\n      setExited(false);\n      if (onTransitionEnter) {\n        onTransitionEnter();\n      }\n    };\n    const handleExited = () => {\n      setExited(true);\n      if (onTransitionExited) {\n        onTransitionExited();\n      }\n      if (closeAfterTransition) {\n        handleClose();\n      }\n    };\n    return {\n      onEnter: (0,createChainedFunction/* default */.Z)(handleEnter, children == null ? void 0 : children.props.onEnter),\n      onExited: (0,createChainedFunction/* default */.Z)(handleExited, children == null ? void 0 : children.props.onExited)\n    };\n  };\n  return {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    rootRef: handleRef,\n    portalRef: handlePortalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///401\n")},1819:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   o: () => (/* binding */ useAutocomplete)\n/* harmony export */ });\n/* unused harmony export createFilterOptions */\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3123);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5466);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(545);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1680);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1805);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6728);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1750);\n'use client';\n\n/* eslint-disable no-constant-condition */\n\n\n\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nfunction createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (false) {}\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const firstFocus = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n  const inputRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const listboxRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const [anchorEl, setAnchorEl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const [focusedTag, setFocusedTag] = react__WEBPACK_IMPORTED_MODULE_0__.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(defaultHighlighted);\n  const [value, setValueState] = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const resetInputValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = react__WEBPACK_IMPORTED_MODULE_0__.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (false) {}\n  const focusTag = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const setHighlightedIndex = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const checkHighlightedOptionExists = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        const previousHighlightedOptionExists = filteredOptions.some(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n        if (previousHighlightedOptionExists) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const syncHighlightedIndex = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, return, otherwise continue execution\n    if (checkHighlightedOptionExists()) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(node => {\n    (0,_mui_utils__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z)(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (false) {}\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (false) {}\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (false) {}\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z)({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z)({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1819\n")},2116:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  oN: () => (/* binding */ useSlider),\n  Rg: () => (/* binding */ valueToPercent)\n});\n\n// UNUSED EXPORTS: Identity\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(3123);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(5466);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js\nvar ownerDocument = __webpack_require__(5923);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useControlled/useControlled.js\nvar useControlled = __webpack_require__(1680);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useIsFocusVisible.js\nvar useIsFocusVisible = __webpack_require__(2682);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useForkRef/useForkRef.js\nvar useForkRef = __webpack_require__(1433);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js\nvar useEnhancedEffect = __webpack_require__(704);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js\nvar useEventCallback = __webpack_require__(6728);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/visuallyHidden.js\nvar visuallyHidden = __webpack_require__(932);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/utils/areArraysEqual.js\nfunction areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {\n  return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));\n}\n;// CONCATENATED MODULE: ./node_modules/@mui/base/useSlider/useSlider.js\n'use client';\n\n\n\n\n\nconst INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;\nfunction asc(a, b) {\n  return a - b;\n}\nfunction clamp(value, min, max) {\n  if (value == null) {\n    return min;\n  }\n  return Math.min(Math.max(min, value), max);\n}\nfunction findClosest(values, currentValue) {\n  var _values$reduce;\n  const {\n    index: closestIndex\n  } = (_values$reduce = values.reduce((acc, value, index) => {\n    const distance = Math.abs(currentValue - value);\n    if (acc === null || distance < acc.distance || distance === acc.distance) {\n      return {\n        distance,\n        index\n      };\n    }\n    return acc;\n  }, null)) != null ? _values$reduce : {};\n  return closestIndex;\n}\nfunction trackFinger(event, touchId) {\n  // The event is TouchEvent\n  if (touchId.current !== undefined && event.changedTouches) {\n    const touchEvent = event;\n    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {\n      const touch = touchEvent.changedTouches[i];\n      if (touch.identifier === touchId.current) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n\n  // The event is MouseEvent\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nfunction percentToValue(percent, min, max) {\n  return (max - min) * percent + min;\n}\nfunction getDecimalPrecision(num) {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split('e-');\n    const matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\nfunction roundValueToStep(value, step, min) {\n  const nearest = Math.round((value - min) / step) * step + min;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n}\nfunction setValueIndex({\n  values,\n  newValue,\n  index\n}) {\n  const output = values.slice();\n  output[index] = newValue;\n  return output.sort(asc);\n}\nfunction focusThumb({\n  sliderRef,\n  activeIndex,\n  setActive\n}) {\n  var _sliderRef$current, _doc$activeElement;\n  const doc = (0,ownerDocument/* default */.Z)(sliderRef.current);\n  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {\n    var _sliderRef$current2;\n    (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type=\"range\"][data-index=\"${activeIndex}\"]`).focus();\n  }\n  if (setActive) {\n    setActive(activeIndex);\n  }\n}\nfunction areValuesEqual(newValue, oldValue) {\n  if (typeof newValue === 'number' && typeof oldValue === 'number') {\n    return newValue === oldValue;\n  }\n  if (typeof newValue === 'object' && typeof oldValue === 'object') {\n    return areArraysEqual(newValue, oldValue);\n  }\n  return false;\n}\nconst axisProps = {\n  horizontal: {\n    offset: percent => ({\n      left: `${percent}%`\n    }),\n    leap: percent => ({\n      width: `${percent}%`\n    })\n  },\n  'horizontal-reverse': {\n    offset: percent => ({\n      right: `${percent}%`\n    }),\n    leap: percent => ({\n      width: `${percent}%`\n    })\n  },\n  vertical: {\n    offset: percent => ({\n      bottom: `${percent}%`\n    }),\n    leap: percent => ({\n      height: `${percent}%`\n    })\n  }\n};\nconst Identity = x => x;\n\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\n/**\n *\n * Demos:\n *\n * - [Slider](https://mui.com/base-ui/react-slider/#hook)\n *\n * API:\n *\n * - [useSlider API](https://mui.com/base-ui/react-slider/hooks-api/#use-slider)\n */\nfunction useSlider(parameters) {\n  const {\n    'aria-labelledby': ariaLabelledby,\n    defaultValue,\n    disabled = false,\n    disableSwap = false,\n    isRtl = false,\n    marks: marksProp = false,\n    max = 100,\n    min = 0,\n    name,\n    onChange,\n    onChangeCommitted,\n    orientation = 'horizontal',\n    rootRef: ref,\n    scale = Identity,\n    step = 1,\n    tabIndex,\n    value: valueProp\n  } = parameters;\n  const touchId = react.useRef();\n  // We can't use the :active browser pseudo-classes.\n  // - The active state isn't triggered when clicking on the rail.\n  // - The active state isn't transferred when inversing a range slider.\n  const [active, setActive] = react.useState(-1);\n  const [open, setOpen] = react.useState(-1);\n  const [dragging, setDragging] = react.useState(false);\n  const moveCount = react.useRef(0);\n  const [valueDerived, setValueState] = (0,useControlled/* default */.Z)({\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : min,\n    name: 'Slider'\n  });\n  const handleChange = onChange && ((event, value, thumbIndex) => {\n    // Redefine target to allow name and value to be read.\n    // This allows seamless integration with the most popular form libraries.\n    // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492\n    // Clone the event to not override `target` of the original event.\n    const nativeEvent = event.nativeEvent || event;\n    // @ts-ignore The nativeEvent is function, not object\n    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\n    Object.defineProperty(clonedEvent, 'target', {\n      writable: true,\n      value: {\n        value,\n        name\n      }\n    });\n    onChange(clonedEvent, value, thumbIndex);\n  });\n  const range = Array.isArray(valueDerived);\n  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];\n  values = values.map(value => clamp(value, min, max));\n  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({\n    value: min + step * index\n  })) : marksProp || [];\n  const marksValues = marks.map(mark => mark.value);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = (0,useIsFocusVisible/* default */.Z)();\n  const [focusedThumbIndex, setFocusedThumbIndex] = react.useState(-1);\n  const sliderRef = react.useRef();\n  const handleFocusRef = (0,useForkRef/* default */.Z)(focusVisibleRef, sliderRef);\n  const handleRef = (0,useForkRef/* default */.Z)(ref, handleFocusRef);\n  const createHandleHiddenInputFocus = otherHandlers => event => {\n    var _otherHandlers$onFocu;\n    const index = Number(event.currentTarget.getAttribute('data-index'));\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusedThumbIndex(index);\n    }\n    setOpen(index);\n    otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n  };\n  const createHandleHiddenInputBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusedThumbIndex(-1);\n    }\n    setOpen(-1);\n    otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n  };\n  (0,useEnhancedEffect/* default */.Z)(() => {\n    if (disabled && sliderRef.current.contains(document.activeElement)) {\n      var _document$activeEleme;\n      // This is necessary because Firefox and Safari will keep focus\n      // on a disabled element:\n      // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js\n      // @ts-ignore\n      (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();\n    }\n  }, [disabled]);\n  if (disabled && active !== -1) {\n    setActive(-1);\n  }\n  if (disabled && focusedThumbIndex !== -1) {\n    setFocusedThumbIndex(-1);\n  }\n  const createHandleHiddenInputChange = otherHandlers => event => {\n    var _otherHandlers$onChan;\n    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);\n    const index = Number(event.currentTarget.getAttribute('data-index'));\n    const value = values[index];\n    const marksIndex = marksValues.indexOf(value);\n\n    // @ts-ignore\n    let newValue = event.target.valueAsNumber;\n    if (marks && step == null) {\n      const maxMarksValue = marksValues[marksValues.length - 1];\n      if (newValue > maxMarksValue) {\n        newValue = maxMarksValue;\n      } else if (newValue < marksValues[0]) {\n        newValue = marksValues[0];\n      } else {\n        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];\n      }\n    }\n    newValue = clamp(newValue, min, max);\n    if (range) {\n      // Bound the new value to the thumb's neighbours.\n      if (disableSwap) {\n        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);\n      }\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        newValue,\n        index\n      });\n      let activeIndex = index;\n\n      // Potentially swap the index if needed.\n      if (!disableSwap) {\n        activeIndex = newValue.indexOf(previousValue);\n      }\n      focusThumb({\n        sliderRef,\n        activeIndex\n      });\n    }\n    setValueState(newValue);\n    setFocusedThumbIndex(index);\n    if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n      handleChange(event, newValue, index);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(event, newValue);\n    }\n  };\n  const previousIndex = react.useRef();\n  let axis = orientation;\n  if (isRtl && orientation === 'horizontal') {\n    axis += '-reverse';\n  }\n  const getFingerNewValue = ({\n    finger,\n    move = false\n  }) => {\n    const {\n      current: slider\n    } = sliderRef;\n    const {\n      width,\n      height,\n      bottom,\n      left\n    } = slider.getBoundingClientRect();\n    let percent;\n    if (axis.indexOf('vertical') === 0) {\n      percent = (bottom - finger.y) / height;\n    } else {\n      percent = (finger.x - left) / width;\n    }\n    if (axis.indexOf('-reverse') !== -1) {\n      percent = 1 - percent;\n    }\n    let newValue;\n    newValue = percentToValue(percent, min, max);\n    if (step) {\n      newValue = roundValueToStep(newValue, step, min);\n    } else {\n      const closestIndex = findClosest(marksValues, newValue);\n      newValue = marksValues[closestIndex];\n    }\n    newValue = clamp(newValue, min, max);\n    let activeIndex = 0;\n    if (range) {\n      if (!move) {\n        activeIndex = findClosest(values, newValue);\n      } else {\n        activeIndex = previousIndex.current;\n      }\n\n      // Bound the new value to the thumb's neighbours.\n      if (disableSwap) {\n        newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);\n      }\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        newValue,\n        index: activeIndex\n      });\n\n      // Potentially swap the index if needed.\n      if (!(disableSwap && move)) {\n        activeIndex = newValue.indexOf(previousValue);\n        previousIndex.current = activeIndex;\n      }\n    }\n    return {\n      newValue,\n      activeIndex\n    };\n  };\n  const handleTouchMove = (0,useEventCallback/* default */.Z)(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId);\n    if (!finger) {\n      return;\n    }\n    moveCount.current += 1;\n\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    // @ts-ignore buttons doesn't not exists on touch event\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    const {\n      newValue,\n      activeIndex\n    } = getFingerNewValue({\n      finger,\n      move: true\n    });\n    focusThumb({\n      sliderRef,\n      activeIndex,\n      setActive\n    });\n    setValueState(newValue);\n    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {\n      setDragging(true);\n    }\n    if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n      handleChange(nativeEvent, newValue, activeIndex);\n    }\n  });\n  const handleTouchEnd = (0,useEventCallback/* default */.Z)(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId);\n    setDragging(false);\n    if (!finger) {\n      return;\n    }\n    const {\n      newValue\n    } = getFingerNewValue({\n      finger,\n      move: true\n    });\n    setActive(-1);\n    if (nativeEvent.type === 'touchend') {\n      setOpen(-1);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(nativeEvent, newValue);\n    }\n    touchId.current = undefined;\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n  });\n  const handleTouchStart = (0,useEventCallback/* default */.Z)(nativeEvent => {\n    if (disabled) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      nativeEvent.preventDefault();\n    }\n    const touch = nativeEvent.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const finger = trackFinger(nativeEvent, touchId);\n    if (finger !== false) {\n      const {\n        newValue,\n        activeIndex\n      } = getFingerNewValue({\n        finger\n      });\n      focusThumb({\n        sliderRef,\n        activeIndex,\n        setActive\n      });\n      setValueState(newValue);\n      if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n        handleChange(nativeEvent, newValue, activeIndex);\n      }\n    }\n    moveCount.current = 0;\n    const doc = (0,ownerDocument/* default */.Z)(sliderRef.current);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = react.useCallback(() => {\n    const doc = (0,ownerDocument/* default */.Z)(sliderRef.current);\n    doc.removeEventListener('mousemove', handleTouchMove);\n    doc.removeEventListener('mouseup', handleTouchEnd);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n  }, [handleTouchEnd, handleTouchMove]);\n  react.useEffect(() => {\n    const {\n      current: slider\n    } = sliderRef;\n    slider.addEventListener('touchstart', handleTouchStart, {\n      passive: doesSupportTouchActionNone()\n    });\n    return () => {\n      // @ts-ignore\n      slider.removeEventListener('touchstart', handleTouchStart, {\n        passive: doesSupportTouchActionNone()\n      });\n      stopListening();\n    };\n  }, [stopListening, handleTouchStart]);\n  react.useEffect(() => {\n    if (disabled) {\n      stopListening();\n    }\n  }, [disabled, stopListening]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);\n    if (disabled) {\n      return;\n    }\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    const finger = trackFinger(event, touchId);\n    if (finger !== false) {\n      const {\n        newValue,\n        activeIndex\n      } = getFingerNewValue({\n        finger\n      });\n      focusThumb({\n        sliderRef,\n        activeIndex,\n        setActive\n      });\n      setValueState(newValue);\n      if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n        handleChange(event, newValue, activeIndex);\n      }\n    }\n    moveCount.current = 0;\n    const doc = (0,ownerDocument/* default */.Z)(sliderRef.current);\n    doc.addEventListener('mousemove', handleTouchMove);\n    doc.addEventListener('mouseup', handleTouchEnd);\n  };\n  const trackOffset = valueToPercent(range ? values[0] : min, min, max);\n  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;\n  const getRootProps = (otherHandlers = {}) => {\n    const ownEventHandlers = {\n      onMouseDown: createHandleMouseDown(otherHandlers || {})\n    };\n    const mergedEventHandlers = (0,esm_extends/* default */.Z)({}, otherHandlers, ownEventHandlers);\n    return (0,esm_extends/* default */.Z)({\n      ref: handleRef\n    }, mergedEventHandlers);\n  };\n  const createHandleMouseOver = otherHandlers => event => {\n    var _otherHandlers$onMous2;\n    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);\n    const index = Number(event.currentTarget.getAttribute('data-index'));\n    setOpen(index);\n  };\n  const createHandleMouseLeave = otherHandlers => event => {\n    var _otherHandlers$onMous3;\n    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);\n    setOpen(-1);\n  };\n  const getThumbProps = (otherHandlers = {}) => {\n    const ownEventHandlers = {\n      onMouseOver: createHandleMouseOver(otherHandlers || {}),\n      onMouseLeave: createHandleMouseLeave(otherHandlers || {})\n    };\n    return (0,esm_extends/* default */.Z)({}, otherHandlers, ownEventHandlers);\n  };\n  const getThumbStyle = index => {\n    return {\n      // So the non active thumb doesn't show its label on hover.\n      pointerEvents: active !== -1 && active !== index ? 'none' : undefined\n    };\n  };\n  const getHiddenInputProps = (otherHandlers = {}) => {\n    var _parameters$step;\n    const ownEventHandlers = {\n      onChange: createHandleHiddenInputChange(otherHandlers || {}),\n      onFocus: createHandleHiddenInputFocus(otherHandlers || {}),\n      onBlur: createHandleHiddenInputBlur(otherHandlers || {})\n    };\n    const mergedEventHandlers = (0,esm_extends/* default */.Z)({}, otherHandlers, ownEventHandlers);\n    return (0,esm_extends/* default */.Z)({\n      tabIndex,\n      'aria-labelledby': ariaLabelledby,\n      'aria-orientation': orientation,\n      'aria-valuemax': scale(max),\n      'aria-valuemin': scale(min),\n      name,\n      type: 'range',\n      min: parameters.min,\n      max: parameters.max,\n      step: parameters.step === null && parameters.marks ? 'any' : (_parameters$step = parameters.step) != null ? _parameters$step : undefined,\n      disabled\n    }, mergedEventHandlers, {\n      style: (0,esm_extends/* default */.Z)({}, visuallyHidden/* default */.Z, {\n        direction: isRtl ? 'rtl' : 'ltr',\n        // So that VoiceOver's focus indicator matches the thumb's dimensions\n        width: '100%',\n        height: '100%'\n      })\n    });\n  };\n  return {\n    active,\n    axis: axis,\n    axisProps,\n    dragging,\n    focusedThumbIndex,\n    getHiddenInputProps,\n    getRootProps,\n    getThumbProps,\n    marks: marks,\n    open,\n    range,\n    rootRef: handleRef,\n    trackLeap,\n    trackOffset,\n    values,\n    getThumbStyle\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2116\n")},3641:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ useSnackbar)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3123);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5466);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6728);\n/* harmony import */ var _utils_extractEventHandlers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7531);\n'use client';\n\n\n\n\n\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\nfunction useSnackbar(parameters = {}) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null || onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)((event, reason) => {\n    onClose == null || onClose(event, reason);\n  });\n  const setAutoHideTimer = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n  const handleClickAway = event => {\n    onClose == null || onClose(event, 'clickaway');\n  };\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null || onBlurCallback(event);\n    handleResume();\n  };\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null || onFocusCallback(event);\n    handlePause();\n  };\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null || onMouseEnterCallback(event);\n    handlePause();\n  };\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null || onMouseLeaveCallback(event);\n    handleResume();\n  };\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)({}, (0,_utils_extractEventHandlers__WEBPACK_IMPORTED_MODULE_3__/* .extractEventHandlers */ ._)(parameters), (0,_utils_extractEventHandlers__WEBPACK_IMPORTED_MODULE_3__/* .extractEventHandlers */ ._)(externalProps));\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalProps, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3641\n")},7531:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ extractEventHandlers)\n/* harmony export */ });\n/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nfunction extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUzMS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLG9CQUFvQkEsQ0FBQ0MsTUFBTSxFQUFFQyxXQUFXLEdBQUcsRUFBRSxFQUFFO0VBQzdELElBQUlELE1BQU0sS0FBS0UsU0FBUyxFQUFFO0lBQ3hCLE9BQU8sQ0FBQyxDQUFDO0VBQ1g7RUFDQSxNQUFNQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ2pCQyxNQUFNLENBQUNDLElBQUksQ0FBQ0wsTUFBTSxDQUFDLENBQUNNLE1BQU0sQ0FBQ0MsSUFBSSxJQUFJQSxJQUFJLENBQUNDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPUixNQUFNLENBQUNPLElBQUksQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDTixXQUFXLENBQUNRLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQ0csT0FBTyxDQUFDSCxJQUFJLElBQUk7SUFDOUlKLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDLEdBQUdQLE1BQU0sQ0FBQ08sSUFBSSxDQUFDO0VBQzdCLENBQUMsQ0FBQztFQUNGLE9BQU9KLE1BQU07QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9leHRyYWN0RXZlbnRIYW5kbGVycy5qcz85ODI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0cmFjdHMgZXZlbnQgaGFuZGxlcnMgZnJvbSBhIGdpdmVuIG9iamVjdC5cbiAqIEEgcHJvcCBpcyBjb25zaWRlcmVkIGFuIGV2ZW50IGhhbmRsZXIgaWYgaXQgaXMgYSBmdW5jdGlvbiBhbmQgaXRzIG5hbWUgc3RhcnRzIHdpdGggYG9uYC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IEFuIG9iamVjdCB0byBleHRyYWN0IGV2ZW50IGhhbmRsZXJzIGZyb20uXG4gKiBAcGFyYW0gZXhjbHVkZUtleXMgQW4gYXJyYXkgb2Yga2V5cyB0byBleGNsdWRlIGZyb20gdGhlIHJldHVybmVkIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RFdmVudEhhbmRsZXJzKG9iamVjdCwgZXhjbHVkZUtleXMgPSBbXSkge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZmlsdGVyKHByb3AgPT4gcHJvcC5tYXRjaCgvXm9uW0EtWl0vKSAmJiB0eXBlb2Ygb2JqZWN0W3Byb3BdID09PSAnZnVuY3Rpb24nICYmICFleGNsdWRlS2V5cy5pbmNsdWRlcyhwcm9wKSkuZm9yRWFjaChwcm9wID0+IHtcbiAgICByZXN1bHRbcHJvcF0gPSBvYmplY3RbcHJvcF07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSJdLCJuYW1lcyI6WyJleHRyYWN0RXZlbnRIYW5kbGVycyIsIm9iamVjdCIsImV4Y2x1ZGVLZXlzIiwidW5kZWZpbmVkIiwicmVzdWx0IiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsInByb3AiLCJtYXRjaCIsImluY2x1ZGVzIiwiZm9yRWFjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7531\n")},355:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X: () => (/* binding */ isHostComponent)\n/* harmony export */ });\n/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nfunction isHostComponent(element) {\n  return typeof element === 'string';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU1LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLGVBQWVBLENBQUNDLE9BQU8sRUFBRTtFQUN2QyxPQUFPLE9BQU9BLE9BQU8sS0FBSyxRQUFRO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2lzSG9zdENvbXBvbmVudC5qcz82ZGNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIGVsZW1lbnQgaXMgYSBET00gZWxlbWVudCBuYW1lIChpLmUuIG5vdCBhIFJlYWN0IGNvbXBvbmVudCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RDb21wb25lbnQoZWxlbWVudCkge1xuICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnO1xufSJdLCJuYW1lcyI6WyJpc0hvc3RDb21wb25lbnQiLCJlbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///355\n")},5565:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   x: () => (/* binding */ resolveComponentProps)\n/* harmony export */ });\n/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nfunction resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU2NS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLHFCQUFxQkEsQ0FBQ0MsY0FBYyxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRTtFQUMzRSxJQUFJLE9BQU9GLGNBQWMsS0FBSyxVQUFVLEVBQUU7SUFDeEMsT0FBT0EsY0FBYyxDQUFDQyxVQUFVLEVBQUVDLFNBQVMsQ0FBQztFQUM5QztFQUNBLE9BQU9GLGNBQWM7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbGRlci1ib29rcy1mZS8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvcmVzb2x2ZUNvbXBvbmVudFByb3BzLmpzPzY4ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJZiBgY29tcG9uZW50UHJvcHNgIGlzIGEgZnVuY3Rpb24sIGNhbGxzIGl0IHdpdGggdGhlIHByb3ZpZGVkIGBvd25lclN0YXRlYC5cbiAqIE90aGVyd2lzZSwganVzdCByZXR1cm5zIGBjb21wb25lbnRQcm9wc2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50UHJvcHMoY29tcG9uZW50UHJvcHMsIG93bmVyU3RhdGUsIHNsb3RTdGF0ZSkge1xuICBpZiAodHlwZW9mIGNvbXBvbmVudFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudFByb3BzKG93bmVyU3RhdGUsIHNsb3RTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudFByb3BzO1xufSJdLCJuYW1lcyI6WyJyZXNvbHZlQ29tcG9uZW50UHJvcHMiLCJjb21wb25lbnRQcm9wcyIsIm93bmVyU3RhdGUiLCJzbG90U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5565\n")},8972:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  y: () => (/* binding */ useSlotProps)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(3123);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(7958);\n// EXTERNAL MODULE: ./node_modules/@mui/utils/esm/useForkRef/useForkRef.js\nvar useForkRef = __webpack_require__(1433);\n// EXTERNAL MODULE: ./node_modules/@mui/base/utils/isHostComponent.js\nvar isHostComponent = __webpack_require__(355);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/utils/appendOwnerState.js\n\n\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can\'t be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || (0,isHostComponent/* isHostComponent */.X)(elementType)) {\n    return otherProps;\n  }\n  return (0,esm_extends/* default */.Z)({}, otherProps, {\n    ownerState: (0,esm_extends/* default */.Z)({}, otherProps.ownerState, ownerState)\n  });\n}\n// EXTERNAL MODULE: ./node_modules/clsx/dist/clsx.mjs\nvar clsx = __webpack_require__(512);\n// EXTERNAL MODULE: ./node_modules/@mui/base/utils/extractEventHandlers.js\nvar extractEventHandlers = __webpack_require__(7531);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/utils/omitEventHandlers.js\n/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nfunction omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === \'function\')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\n;// CONCATENATED MODULE: ./node_modules/@mui/base/utils/mergeSlotProps.js\n\n\n\n\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = (0,clsx/* default */.Z)(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);\n    const mergedStyle = (0,esm_extends/* default */.Z)({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n    const props = (0,esm_extends/* default */.Z)({}, additionalProps, externalForwardedProps, externalSlotProps);\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don\'t need to include them in the merged props because of this.\n\n  const eventHandlers = (0,extractEventHandlers/* extractEventHandlers */._)((0,esm_extends/* default */.Z)({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = (0,clsx/* default */.Z)(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = (0,esm_extends/* default */.Z)({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n  const props = (0,esm_extends/* default */.Z)({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\n// EXTERNAL MODULE: ./node_modules/@mui/base/utils/resolveComponentProps.js\nvar resolveComponentProps = __webpack_require__(5565);\n;// CONCATENATED MODULE: ./node_modules/@mui/base/utils/useSlotProps.js\n\'use client\';\n\n\n\nconst _excluded = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];\n\n\n\n\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nfunction useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n      elementType,\n      externalSlotProps,\n      ownerState,\n      skipResolvingSlotProps = false\n    } = parameters,\n    rest = (0,objectWithoutPropertiesLoose/* default */.Z)(parameters, _excluded);\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : (0,resolveComponentProps/* resolveComponentProps */.x)(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps((0,esm_extends/* default */.Z)({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = (0,useForkRef/* default */.Z)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, (0,esm_extends/* default */.Z)({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODk3Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBMEQ7QUFDTjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNFLGdCQUFnQkEsQ0FBQ0MsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRTtFQUNwRSxJQUFJRixXQUFXLEtBQUtHLFNBQVMsSUFBSUwsMENBQWUsQ0FBQ0UsV0FBVyxDQUFDLEVBQUU7SUFDN0QsT0FBT0MsVUFBVTtFQUNuQjtFQUNBLE9BQU9KLDhCQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUVJLFVBQVUsRUFBRTtJQUM5QkMsVUFBVSxFQUFFTCw4QkFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFSSxVQUFVLENBQUNDLFVBQVUsRUFBRUEsVUFBVTtFQUM1RCxDQUFDLENBQUM7QUFDSixDOzs7Ozs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRSxpQkFBaUJBLENBQUNDLE1BQU0sRUFBRTtFQUN4QyxJQUFJQSxNQUFNLEtBQUtGLFNBQVMsRUFBRTtJQUN4QixPQUFPLENBQUMsQ0FBQztFQUNYO0VBQ0EsTUFBTUcsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNqQkMsTUFBTSxDQUFDQyxJQUFJLENBQUNILE1BQU0sQ0FBQyxDQUFDSSxNQUFNLENBQUNDLElBQUksSUFBSSxFQUFFQSxJQUFJLENBQUNDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPTixNQUFNLENBQUNLLElBQUksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUNFLE9BQU8sQ0FBQ0YsSUFBSSxJQUFJO0lBQ2xISixNQUFNLENBQUNJLElBQUksQ0FBQyxHQUFHTCxNQUFNLENBQUNLLElBQUksQ0FBQztFQUM3QixDQUFDLENBQUM7RUFDRixPQUFPSixNQUFNO0FBQ2YsQzs7QUNoQjBEO0FBQ2xDO0FBQ3NDO0FBQ047QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTUyxjQUFjQSxDQUFDQyxVQUFVLEVBQUU7RUFDekMsTUFBTTtJQUNKQyxZQUFZO0lBQ1pDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxzQkFBc0I7SUFDdEJDO0VBQ0YsQ0FBQyxHQUFHTCxVQUFVO0VBQ2QsSUFBSSxDQUFDQyxZQUFZLEVBQUU7SUFDakI7SUFDQTtJQUNBLE1BQU1LLGFBQWEsR0FBR1QsdUJBQUksQ0FBQ08sc0JBQXNCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHQSxzQkFBc0IsQ0FBQ0MsU0FBUyxFQUFFRixpQkFBaUIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLGlCQUFpQixDQUFDRSxTQUFTLEVBQUVBLFNBQVMsRUFBRUgsZUFBZSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsZUFBZSxDQUFDRyxTQUFTLENBQUM7SUFDalAsTUFBTUUsV0FBVyxHQUFHMUIsOEJBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRXFCLGVBQWUsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLGVBQWUsQ0FBQ00sS0FBSyxFQUFFSixzQkFBc0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLHNCQUFzQixDQUFDSSxLQUFLLEVBQUVMLGlCQUFpQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsaUJBQWlCLENBQUNLLEtBQUssQ0FBQztJQUNoTyxNQUFNQyxLQUFLLEdBQUc1Qiw4QkFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFcUIsZUFBZSxFQUFFRSxzQkFBc0IsRUFBRUQsaUJBQWlCLENBQUM7SUFDdEYsSUFBSUcsYUFBYSxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzVCRCxLQUFLLENBQUNKLFNBQVMsR0FBR0MsYUFBYTtJQUNqQztJQUNBLElBQUlmLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDZSxXQUFXLENBQUMsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN2Q0QsS0FBSyxDQUFDRCxLQUFLLEdBQUdELFdBQVc7SUFDM0I7SUFDQSxPQUFPO01BQ0xFLEtBQUs7TUFDTEUsV0FBVyxFQUFFeEI7SUFDZixDQUFDO0VBQ0g7O0VBRUE7RUFDQTs7RUFFQSxNQUFNeUIsYUFBYSxHQUFHZCxvREFBb0IsQ0FBQ2pCLDhCQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUV1QixzQkFBc0IsRUFBRUQsaUJBQWlCLENBQUMsQ0FBQztFQUNuRyxNQUFNVSxtQ0FBbUMsR0FBR3pCLGlCQUFpQixDQUFDZSxpQkFBaUIsQ0FBQztFQUNoRixNQUFNVyw4QkFBOEIsR0FBRzFCLGlCQUFpQixDQUFDZ0Isc0JBQXNCLENBQUM7RUFDaEYsTUFBTVcsaUJBQWlCLEdBQUdkLFlBQVksQ0FBQ1csYUFBYSxDQUFDOztFQUVyRDtFQUNBO0VBQ0E7RUFDQTtFQUNBLE1BQU1OLGFBQWEsR0FBR1QsdUJBQUksQ0FBQ2tCLGlCQUFpQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsaUJBQWlCLENBQUNWLFNBQVMsRUFBRUgsZUFBZSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsZUFBZSxDQUFDRyxTQUFTLEVBQUVBLFNBQVMsRUFBRUQsc0JBQXNCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHQSxzQkFBc0IsQ0FBQ0MsU0FBUyxFQUFFRixpQkFBaUIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLGlCQUFpQixDQUFDRSxTQUFTLENBQUM7RUFDblQsTUFBTUUsV0FBVyxHQUFHMUIsOEJBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRWtDLGlCQUFpQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsaUJBQWlCLENBQUNQLEtBQUssRUFBRU4sZUFBZSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsZUFBZSxDQUFDTSxLQUFLLEVBQUVKLHNCQUFzQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0Esc0JBQXNCLENBQUNJLEtBQUssRUFBRUwsaUJBQWlCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHQSxpQkFBaUIsQ0FBQ0ssS0FBSyxDQUFDO0VBQzlSLE1BQU1DLEtBQUssR0FBRzVCLDhCQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUVrQyxpQkFBaUIsRUFBRWIsZUFBZSxFQUFFWSw4QkFBOEIsRUFBRUQsbUNBQW1DLENBQUM7RUFDbkksSUFBSVAsYUFBYSxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQzVCRCxLQUFLLENBQUNKLFNBQVMsR0FBR0MsYUFBYTtFQUNqQztFQUNBLElBQUlmLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDZSxXQUFXLENBQUMsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRTtJQUN2Q0QsS0FBSyxDQUFDRCxLQUFLLEdBQUdELFdBQVc7RUFDM0I7RUFDQSxPQUFPO0lBQ0xFLEtBQUs7SUFDTEUsV0FBVyxFQUFFSSxpQkFBaUIsQ0FBQ0M7RUFDakMsQ0FBQztBQUNILEM7Ozs7QUNwRUEsWUFBWTs7QUFFOEM7QUFDMEM7QUFDcEcsTUFBTUUsU0FBUyxHQUFHLENBQUMsYUFBYSxFQUFFLG1CQUFtQixFQUFFLFlBQVksRUFBRSx3QkFBd0IsQ0FBQztBQUMvQjtBQUNUO0FBQ0o7QUFDYztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0ksWUFBWUEsQ0FBQ3RCLFVBQVUsRUFBRTtFQUN2QyxJQUFJdUIscUJBQXFCO0VBQ3pCLE1BQU07TUFDRnZDLFdBQVc7TUFDWG1CLGlCQUFpQjtNQUNqQmpCLFVBQVU7TUFDVnNDLHNCQUFzQixHQUFHO0lBQzNCLENBQUMsR0FBR3hCLFVBQVU7SUFDZHlCLElBQUksR0FBR1IsK0NBQTZCLENBQUNqQixVQUFVLEVBQUVrQixTQUFTLENBQUM7RUFDN0QsTUFBTVEsdUJBQXVCLEdBQUdGLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxHQUFHSCxzREFBcUIsQ0FBQ2xCLGlCQUFpQixFQUFFakIsVUFBVSxDQUFDO0VBQ2xILE1BQU07SUFDSnVCLEtBQUssRUFBRWtCLFdBQVc7SUFDbEJoQjtFQUNGLENBQUMsR0FBR1osY0FBYyxDQUFDbEIsOEJBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTRDLElBQUksRUFBRTtJQUNwQ3RCLGlCQUFpQixFQUFFdUI7RUFDckIsQ0FBQyxDQUFDLENBQUM7RUFDSCxNQUFNVixHQUFHLEdBQUdJLDZCQUFVLENBQUNULFdBQVcsRUFBRWUsdUJBQXVCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHQSx1QkFBdUIsQ0FBQ1YsR0FBRyxFQUFFLENBQUNPLHFCQUFxQixHQUFHdkIsVUFBVSxDQUFDRSxlQUFlLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHcUIscUJBQXFCLENBQUNQLEdBQUcsQ0FBQztFQUM5TSxNQUFNUCxLQUFLLEdBQUcxQixnQkFBZ0IsQ0FBQ0MsV0FBVyxFQUFFSCw4QkFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFOEMsV0FBVyxFQUFFO0lBQ3BFWDtFQUNGLENBQUMsQ0FBQyxFQUFFOUIsVUFBVSxDQUFDO0VBQ2YsT0FBT3VCLEtBQUs7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2VsZGVyLWJvb2tzLWZlLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9hcHBlbmRPd25lclN0YXRlLmpzPzlhZTUiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL29taXRFdmVudEhhbmRsZXJzLmpzP2ExODgiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL21lcmdlU2xvdFByb3BzLmpzPzNlYWEiLCJ3ZWJwYWNrOi8vZWxkZXItYm9va3MtZmUvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3VzZVNsb3RQcm9wcy5qcz9jNzVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgaXNIb3N0Q29tcG9uZW50IH0gZnJvbSAnLi9pc0hvc3RDb21wb25lbnQnO1xuXG4vKipcbiAqIFR5cGUgb2YgdGhlIG93bmVyU3RhdGUgYmFzZWQgb24gdGhlIHR5cGUgb2YgYW4gZWxlbWVudCBpdCBhcHBsaWVzIHRvLlxuICogVGhpcyByZXNvbHZlcyB0byB0aGUgcHJvdmlkZWQgT3duZXJTdGF0ZSBmb3IgUmVhY3QgY29tcG9uZW50cyBhbmQgYHVuZGVmaW5lZGAgZm9yIGhvc3QgY29tcG9uZW50cy5cbiAqIEZhbGxzIGJhY2sgdG8gYE93bmVyU3RhdGUgfCB1bmRlZmluZWRgIHdoZW4gdGhlIGV4YWN0IHR5cGUgY2FuJ3QgYmUgZGV0ZXJtaW5lZCBpbiBkZXZlbG9wbWVudCB0aW1lLlxuICovXG5cbi8qKlxuICogQXBwZW5kcyB0aGUgb3duZXJTdGF0ZSBvYmplY3QgdG8gdGhlIHByb3BzLCBtZXJnaW5nIHdpdGggdGhlIGV4aXN0aW5nIG9uZSBpZiBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIGVsZW1lbnRUeXBlIFR5cGUgb2YgdGhlIGVsZW1lbnQgdGhhdCBvd25zIHRoZSBgZXhpc3RpbmdQcm9wc2AuIElmIHRoZSBlbGVtZW50IGlzIGEgRE9NIG5vZGUgb3IgdW5kZWZpbmVkLCBgb3duZXJTdGF0ZWAgaXMgbm90IGFwcGxpZWQuXG4gKiBAcGFyYW0gb3RoZXJQcm9wcyBQcm9wcyBvZiB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSBvd25lclN0YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRPd25lclN0YXRlKGVsZW1lbnRUeXBlLCBvdGhlclByb3BzLCBvd25lclN0YXRlKSB7XG4gIGlmIChlbGVtZW50VHlwZSA9PT0gdW5kZWZpbmVkIHx8IGlzSG9zdENvbXBvbmVudChlbGVtZW50VHlwZSkpIHtcbiAgICByZXR1cm4gb3RoZXJQcm9wcztcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcy5vd25lclN0YXRlLCBvd25lclN0YXRlKVxuICB9KTtcbn0iLCIvKipcbiAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0LlxuICogQSBmaWVsZCBpcyBjb25zaWRlcmVkIGFuIGV2ZW50IGhhbmRsZXIgaWYgaXQgaXMgYSBmdW5jdGlvbiB3aXRoIGEgbmFtZSBiZWdpbm5pbmcgd2l0aCBgb25gLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgT2JqZWN0IHRvIHJlbW92ZSBldmVudCBoYW5kbGVycyBmcm9tLlxuICogQHJldHVybnMgT2JqZWN0IHdpdGggZXZlbnQgaGFuZGxlcnMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9taXRFdmVudEhhbmRsZXJzKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZmlsdGVyKHByb3AgPT4gIShwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicpKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGV4dHJhY3RFdmVudEhhbmRsZXJzIH0gZnJvbSAnLi9leHRyYWN0RXZlbnRIYW5kbGVycyc7XG5pbXBvcnQgeyBvbWl0RXZlbnRIYW5kbGVycyB9IGZyb20gJy4vb21pdEV2ZW50SGFuZGxlcnMnO1xuLyoqXG4gKiBNZXJnZXMgdGhlIHNsb3QgY29tcG9uZW50IGludGVybmFsIHByb3BzICh1c3VhbGx5IGNvbWluZyBmcm9tIGEgaG9vaylcbiAqIHdpdGggdGhlIGV4dGVybmFsbHkgcHJvdmlkZWQgb25lcy5cbiAqXG4gKiBUaGUgbWVyZ2Ugb3JkZXIgaXMgKHRoZSBsYXR0ZXIgb3ZlcnJpZGVzIHRoZSBmb3JtZXIpOlxuICogMS4gVGhlIGludGVybmFsIHByb3BzIChzcGVjaWZpZWQgYXMgYSBnZXR0ZXIgZnVuY3Rpb24gdG8gd29yayB3aXRoIGdldCpQcm9wcyBob29rIHJlc3VsdClcbiAqIDIuIEFkZGl0aW9uYWwgcHJvcHMgKHNwZWNpZmllZCBpbnRlcm5hbGx5IG9uIGEgQmFzZSBVSSBjb21wb25lbnQpXG4gKiAzLiBFeHRlcm5hbCBwcm9wcyBzcGVjaWZpZWQgb24gdGhlIG93bmVyIGNvbXBvbmVudC4gVGhlc2Ugc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiBhIHJvb3Qgc2xvdC5cbiAqIDQuIEV4dGVybmFsIHByb3BzIHNwZWNpZmllZCBpbiB0aGUgYHNsb3RQcm9wcy4qYCBwcm9wLlxuICogNS4gVGhlIGBjbGFzc05hbWVgIHByb3AgLSBjb21iaW5lZCBmcm9tIGFsbCB0aGUgYWJvdmUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyc1xuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGdldFNsb3RQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHMsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBjbGFzc05hbWVcbiAgfSA9IHBhcmFtZXRlcnM7XG4gIGlmICghZ2V0U2xvdFByb3BzKSB7XG4gICAgLy8gVGhlIHNpbXBsZXIgY2FzZSAtIGdldFNsb3RQcm9wcyBpcyBub3QgZGVmaW5lZCwgc28gbm8gaW50ZXJuYWwgZXZlbnQgaGFuZGxlcnMgYXJlIGRlZmluZWQsXG4gICAgLy8gc28gd2UgY2FuIHNpbXBseSBtZXJnZSBhbGwgdGhlIHByb3BzIHdpdGhvdXQgaGF2aW5nIHRvIHdvcnJ5IGFib3V0IGV4dHJhY3RpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgY29uc3Qgam9pbmVkQ2xhc3NlcyA9IGNsc3goZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5jbGFzc05hbWUsIGV4dGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFNsb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuY2xhc3NOYW1lKTtcbiAgICBjb25zdCBtZXJnZWRTdHlsZSA9IF9leHRlbmRzKHt9LCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5zdHlsZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5zdHlsZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLnN0eWxlKTtcbiAgICBjb25zdCBwcm9wcyA9IF9leHRlbmRzKHt9LCBhZGRpdGlvbmFsUHJvcHMsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsIGV4dGVybmFsU2xvdFByb3BzKTtcbiAgICBpZiAoam9pbmVkQ2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICBwcm9wcy5jbGFzc05hbWUgPSBqb2luZWRDbGFzc2VzO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMobWVyZ2VkU3R5bGUpLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwcm9wcyxcbiAgICAgIGludGVybmFsUmVmOiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG5cbiAgLy8gSW4gdGhpcyBjYXNlLCBnZXRTbG90UHJvcHMgaXMgcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgdGhlIGV4dGVybmFsIGV2ZW50IGhhbmRsZXJzLlxuICAvLyBXZSBkb24ndCBuZWVkIHRvIGluY2x1ZGUgdGhlbSBpbiB0aGUgbWVyZ2VkIHByb3BzIGJlY2F1c2Ugb2YgdGhpcy5cblxuICBjb25zdCBldmVudEhhbmRsZXJzID0gZXh0cmFjdEV2ZW50SGFuZGxlcnMoX2V4dGVuZHMoe30sIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsIGV4dGVybmFsU2xvdFByb3BzKSk7XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzID0gb21pdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxTbG90UHJvcHMpO1xuICBjb25zdCBvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMgPSBvbWl0RXZlbnRIYW5kbGVycyhleHRlcm5hbEZvcndhcmRlZFByb3BzKTtcbiAgY29uc3QgaW50ZXJuYWxTbG90UHJvcHMgPSBnZXRTbG90UHJvcHMoZXZlbnRIYW5kbGVycyk7XG5cbiAgLy8gVGhlIG9yZGVyIG9mIGNsYXNzZXMgaXMgaW1wb3J0YW50IGhlcmUuXG4gIC8vIEVtb3Rpb24gKHRoYXQgd2UgdXNlIGluIGxpYnJhcmllcyBjb25zdW1pbmcgQmFzZSBVSSkgZGVwZW5kcyBvbiB0aGlzIG9yZGVyXG4gIC8vIHRvIHByb3Blcmx5IG92ZXJyaWRlIHN0eWxlLiBJdCByZXF1aXJlcyB0aGUgbW9zdCBpbXBvcnRhbnQgY2xhc3NlcyB0byBiZSBsYXN0XG4gIC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzMzMjA1KSBmb3IgdGhlIHJlbGF0ZWQgZGlzY3Vzc2lvbi5cbiAgY29uc3Qgam9pbmVkQ2xhc3NlcyA9IGNsc3goaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuY2xhc3NOYW1lLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuY2xhc3NOYW1lKTtcbiAgY29uc3QgbWVyZ2VkU3R5bGUgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLnN0eWxlLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5zdHlsZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5zdHlsZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLnN0eWxlKTtcbiAgY29uc3QgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMsIGFkZGl0aW9uYWxQcm9wcywgb3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzLCBjb21wb25lbnRzUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyk7XG4gIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBqb2luZWRDbGFzc2VzO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9wcyxcbiAgICBpbnRlcm5hbFJlZjogaW50ZXJuYWxTbG90UHJvcHMucmVmXG4gIH07XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZWxlbWVudFR5cGVcIiwgXCJleHRlcm5hbFNsb3RQcm9wc1wiLCBcIm93bmVyU3RhdGVcIiwgXCJza2lwUmVzb2x2aW5nU2xvdFByb3BzXCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBhcHBlbmRPd25lclN0YXRlIH0gZnJvbSAnLi9hcHBlbmRPd25lclN0YXRlJztcbmltcG9ydCB7IG1lcmdlU2xvdFByb3BzIH0gZnJvbSAnLi9tZXJnZVNsb3RQcm9wcyc7XG5pbXBvcnQgeyByZXNvbHZlQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuL3Jlc29sdmVDb21wb25lbnRQcm9wcyc7XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKiBCdWlsZHMgdGhlIHByb3BzIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSBzbG90IG9mIGFuIHVuc3R5bGVkIGNvbXBvbmVudC5cbiAqIEl0IG1lcmdlcyB0aGUgaW50ZXJuYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCB3aXRoIHRoZSBvbmVzIHN1cHBsaWVkIGJ5IHRoZSB1c2VyLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yLlxuICogSWYgdGhlIHNsb3QgY29tcG9uZW50IGlzIG5vdCBhIGhvc3QgY29tcG9uZW50LCBpdCBhbHNvIG1lcmdlcyBpbiB0aGUgYG93bmVyU3RhdGVgLlxuICpcbiAqIEBwYXJhbSBwYXJhbWV0ZXJzLmdldFNsb3RQcm9wcyAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgdG8gdGhlIHNsb3QgY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgdmFyIF9wYXJhbWV0ZXJzJGFkZGl0aW9uYTtcbiAgY29uc3Qge1xuICAgICAgZWxlbWVudFR5cGUsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICAgIG93bmVyU3RhdGUsXG4gICAgICBza2lwUmVzb2x2aW5nU2xvdFByb3BzID0gZmFsc2VcbiAgICB9ID0gcGFyYW1ldGVycyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPSBza2lwUmVzb2x2aW5nU2xvdFByb3BzID8ge30gOiByZXNvbHZlQ29tcG9uZW50UHJvcHMoZXh0ZXJuYWxTbG90UHJvcHMsIG93bmVyU3RhdGUpO1xuICBjb25zdCB7XG4gICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgIGludGVybmFsUmVmXG4gIH0gPSBtZXJnZVNsb3RQcm9wcyhfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGV4dGVybmFsU2xvdFByb3BzOiByZXNvbHZlZENvbXBvbmVudHNQcm9wc1xuICB9KSk7XG4gIGNvbnN0IHJlZiA9IHVzZUZvcmtSZWYoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID09IG51bGwgPyB2b2lkIDAgOiByZXNvbHZlZENvbXBvbmVudHNQcm9wcy5yZWYsIChfcGFyYW1ldGVycyRhZGRpdGlvbmEgPSBwYXJhbWV0ZXJzLmFkZGl0aW9uYWxQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJhbWV0ZXJzJGFkZGl0aW9uYS5yZWYpO1xuICBjb25zdCBwcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBtZXJnZWRQcm9wcywge1xuICAgIHJlZlxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIHJldHVybiBwcm9wcztcbn0iXSwibmFtZXMiOlsiX2V4dGVuZHMiLCJpc0hvc3RDb21wb25lbnQiLCJhcHBlbmRPd25lclN0YXRlIiwiZWxlbWVudFR5cGUiLCJvdGhlclByb3BzIiwib3duZXJTdGF0ZSIsInVuZGVmaW5lZCIsIm9taXRFdmVudEhhbmRsZXJzIiwib2JqZWN0IiwicmVzdWx0IiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsInByb3AiLCJtYXRjaCIsImZvckVhY2giLCJjbHN4IiwiZXh0cmFjdEV2ZW50SGFuZGxlcnMiLCJtZXJnZVNsb3RQcm9wcyIsInBhcmFtZXRlcnMiLCJnZXRTbG90UHJvcHMiLCJhZGRpdGlvbmFsUHJvcHMiLCJleHRlcm5hbFNsb3RQcm9wcyIsImV4dGVybmFsRm9yd2FyZGVkUHJvcHMiLCJjbGFzc05hbWUiLCJqb2luZWRDbGFzc2VzIiwibWVyZ2VkU3R5bGUiLCJzdHlsZSIsInByb3BzIiwibGVuZ3RoIiwiaW50ZXJuYWxSZWYiLCJldmVudEhhbmRsZXJzIiwiY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJpbnRlcm5hbFNsb3RQcm9wcyIsInJlZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiX2V4Y2x1ZGVkIiwidW5zdGFibGVfdXNlRm9ya1JlZiIsInVzZUZvcmtSZWYiLCJyZXNvbHZlQ29tcG9uZW50UHJvcHMiLCJ1c2VTbG90UHJvcHMiLCJfcGFyYW1ldGVycyRhZGRpdGlvbmEiLCJza2lwUmVzb2x2aW5nU2xvdFByb3BzIiwicmVzdCIsInJlc29sdmVkQ29tcG9uZW50c1Byb3BzIiwibWVyZ2VkUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8972\n')}}]);